<head>
<link rel="stylesheet" href="${(contextPath)!''}/webjars/bootstrap/css/bootstrap.css" />
<script src="${(contextPath)!''}/webjars/jquery/3.5.1/jquery.min.js"></script>
<script src="${(contextPath)!''}/webjars/jquery-ui/1.12.1/jquery-ui.min.js"></script>
<link rel="stylesheet" href="${(contextPath)!''}/webjars/font-awesome/4.7.0/css/font-awesome.min.css" />
<link rel="stylesheet" href="${(contextPath)!''}/webjars/1.0/css/starter.style.css" />
<link rel="stylesheet" type="text/css" href="${(contextPath)!''}/webjars/1.0/JSCal2/css/jscal2.css" />
<link rel="stylesheet" type="text/css" href="${(contextPath)!''}/webjars/1.0/JSCal2/css/border-radius.css" />
<link rel="stylesheet" type="text/css" href="${(contextPath)!''}/webjars/1.0/JSCal2/css/steel/steel.css" />
<script type="text/javascript" src="${(contextPath)!''}/webjars/1.0/JSCal2/js/jscal2.js"></script>
<script type="text/javascript" src="${(contextPath)!''}/webjars/1.0/JSCal2/js/lang/en.js"></script>
<script type="text/javascript" src="${(contextPath)!''}/webjars/1.0/dropzone/dist/dropzone.js"></script>
<link rel="stylesheet" type="text/css" href="${(contextPath)!''}/webjars/1.0/dropzone/dist/dropzone.css" />
<script type="text/javascript" src="${(contextPath)!''}/webjars/1.0/fileupload/fileupload.js"></script>
<script src="${(contextPath)!''}/webjars/1.0/dynamicform/addEditDynamicForm.js"></script>
<script src="${(contextPath)!''}/webjars/1.0/common/jQuiverCommon.js"></script>
        
</head>

<div class="container">
	<div class="topband">
		<h2 class="title-cls-name float-left pageHeader">${messageSource.getMessage('jws.adddetails')}</h2> 
		<div class="clearfix"></div>		
	</div>
   <form method="post" name="addEditForm" id="addEditForm">
    <div id="errorMessage" class="alert errorsms alert-danger alert-dismissable" style="display:none"></div>
    <input type="hidden" data-type="text" id="notificationid" name="notificationid"  value="${(resultSetObject.notification_id)!""}">
    	<div class="row">
                
	    		<div class="col-4">
					<div class="col-inner-form full-form-fields">
						            <label for="messagevalidfrom" style="white-space:nowrap"><span class="asteriskmark">*</span>
						            	${messageSource.getMessage('jws.msgvalidfrom')}
						            </label>
                                    <span id="messagevalidfromSpan">
						                <input  id="messagevalidfrom" name= "messagevalidfrom" readonly
                                        class="form-control" placeholder="Message Valid From" />
                                        <button id="fromDate-trigger" class="calender_icon"><i class="fa fa-calendar" aria-hidden="true"></i></button>
					                </span>
                    </div>
				</div>
               
	    		<div class="col-4">
					<div class="col-inner-form full-form-fields">
						            <label for="messagevalidtill" style="white-space:nowrap"><span class="asteriskmark">*</span>
						            	${messageSource.getMessage('jws.msgvalidtill')}
						            </label>
                                    <span id="messagevalidtillSpan">
						                <input class="form-control" id="messagevalidtill"  name= "messagevalidtill" readonly placeholder="Message Valid Till" />
                                        <button id="toDate-trigger" class="calender_icon"><i class="fa fa-calendar" aria-hidden="true"></i></button>
					                </span>
					</div>
				</div>
            <div class="col-4">
				<div class="col-inner-form full-form-fields">
					<span class="asteriskmark">*</span><label for="messageType">${messageSource.getMessage('jws.msgtype')}  </label>
						<select class="form-control" id="messageType" name="messageType" title="Message Type">
							<option value="" selected="selected"> --- select --- </option>
							<option value="0">${messageSource.getMessage('jws.informative')}</option>
							<option value="1">${messageSource.getMessage('jws.warning')}</option>
							<option value="2">${messageSource.getMessage('jws.error')}</option>
						</select>
				</div>
			</div>
            </div>
          <div class="row">
	    		<div class="col-4" style="    margin-bottom: 20px;">
					<div class="col-inner-form full-form-fields">
						            <label for="messagetext" style="white-space:nowrap"><span class="asteriskmark">*</span>
						            	${messageSource.getMessage('jws.msgtext')}
						            </label>
							 <textarea class="form-control" rows="4" cols="90" data-type="text"  id="messagetext" placeholder="Message Text" name="messagetext" onkeydown="calculateLengthMsgTxt();" onkeyup="calculateLengthMsgTxt();" maxlength="500" >${(resultSetObject.message_text)!""}</textarea>
					<div style = "position:relative;float:right;">
                    <input style="border:none" readonly type="text" id="countdown_msg" name="countdown_msg" size="1" value="500" >
                </div>
                    </div>
				</div>    
                <div class="col-4">
					<div class="col-inner-form full-form-fields">
								<span class="asteriskmark">*</span>
								<label for="displayOnce">${messageSource.getMessage('jws.displayonce')}</label>
								<input type="hidden" id="displayOnceTxt" name="displayOnceTxt" value="0" />
								<div class="onoffswitch">
				                    <input type="checkbox" name="displayOnce" class="onoffswitch-checkbox" id="displayOnce" 
                                    value="0" onchange="updateDisplatOnceText();"/>
				                    <label class="onoffswitch-label" for="displayOnce">
				                        <span class="onoffswitch-inner"></span>
				                        <span class="onoffswitch-switch"></span>
				                    </label>
				                </div>
					</div>   
                </div>
                </div>
                <div class="row">                                                                        
	    		<div class="col-4">
					<div class="col-inner-form full-form-fields">
								<span class="asteriskmark">*</span>
								<label for="selectioncriteria">${messageSource.getMessage('jws.selectioncriteria')}</label>
                                	 <a class="tipsicon tipslabelright collapsed" title="Tips" data-toggle="collapse" href="#tipscolpase" role="button" aria-expanded="false">
                                        <i class="fa fa-lightbulb-o" aria-hidden="true"></i>
                                    </a>
								<textarea class="form-control" rows="4" cols="90" data-type="text"  id="selectioncriteria" placeholder="Selection Criteria" name="selectioncriteria" onkeydown="calculateLength();" onkeyup="calculateLength();"  maxlength="500">${(resultSetObject.selection_criteria)!""}</textarea>
                                <div style = "position:relative;float:right;">
                                <input style="border:none" readonly type="text" id="countdown" name="countdown" size="1" value="500" >
                            </div>
					</div>
                    
				</div>
                <div id="divDatasourceId" class="col-4">
				<div class="col-inner-form full-form-fields">
	        		<label for="flammableState" style="white-space:nowrap">${messageSource.getMessage('jws.datasource')}</label>
	        		<select id="dataSource" name="dataSourceId" class="form-control">
                       <option id="defaultConnection" value= "" data-product-name="default">${messageSource.getMessage('jws.defaultconnection')}</option>    
	        		</select>
           		</div>
			</div>
				
				 
                   <div id="ftlParameterDiv" class="col-12">
                            <div class="collapse tipsdetailsblock" id="tipscolpase">
                                <div class="tipscontent">
                            
                                    <h3 class="titlename method-sign-info">
                                    <label for="ftlParameter">${messageSource.getMessage('jws.sql/ftlparamandmacros')} :</label>   </h3>
                                    <span id="ftlParameter">loggedInUserId, loggedInUserName, fullName, userObject {}, loggedInUserRoleList {}, templateWithoutParams {}, templateWithParams {}, resourceBundle {}, resourceBundleWithDefault {}, scriptUtil{}</span>
                                </div>
                            </div>    
                     </div>


        	</div>

            <div class="row">
		<div class="col-12">
			<div class="float-right">
				<div class="btn-group dropup custom-grp-btn">
                    <div id="savedAction">
                        <button type="button" id="saveAndReturn" class="btn btn-primary" onclick="onSaveButtonClick(SaveAction.Return);">${messageSource.getMessage("jws.saveAndReturn")}</button>
                    </div>
                    <button id="actionDropdownBtn" type="button" class="btn btn-primary dropdown-toggle panel-collapsed" onclick="actionOptions();"></button>
                    <div class="dropdown-menu action-cls"  id="actionDiv">
                    	<ul class="dropdownmenu">
                            <li id="saveAndCreateNew" onclick="onSaveButtonClick(SaveAction.CreateNew);">${messageSource.getMessage("jws.saveAndCreateNew")}</li>
                            <li id="saveAndEdit" onclick="onSaveButtonClick(SaveAction.Edit);">${messageSource.getMessage("jws.saveAndEdit")}</li>
                        </ul>
                    </div>  
                </div>
				<span onclick="backToPreviousPage();">
					<input id="backBtn" class="btn btn-secondary" name="backBtn" value="${messageSource.getMessage('jws.cancel')}" type="button">
				</span> 
			</div>
		</div>
        </div>

        
	</div>
    </div>
  </form>
	
</div>
 
 
<script>
	contextPath = "${contextPath}";	 
    formId = "${formId}";
	let isEdit = 0;  
    $(function(){
   Calendar.setup({
			trigger    : "fromDate-trigger",
			inputField : "messagevalidfrom",
			dateFormat : "%d-%b-%Y",
			weekNumbers: true,
            showTime: 12,
			onSelect   : function() { 
				let selectedDate = this.selection.get();
				let date = Calendar.intToDate(selectedDate);
				date = Calendar.printDate(date, "%d-%b-%Y");
				$("#"+this.inputField.id).val(date);
				this.hide(); 
			}
		});
		Calendar.setup({
			trigger    : "toDate-trigger",
			inputField : "messagevalidtill",
			dateFormat : "%d-%b-%Y",
			weekNumbers: true,
            showTime: 12,
			onSelect   : function() {
				let selectedDate = this.selection.get();
				let date = Calendar.intToDate(selectedDate);
				date = Calendar.printDate(date, "%d-%b-%Y");
				$("#"+this.inputField.id).val(date);
				this.hide(); 
			}
		});
   
	<#if (resultSet)?? && resultSet?has_content>
		<#list resultSet as resultSetList>
			isEdit = 1;
			$("#messageType option[value='${resultSetList?api.get("message_type")}']").attr("selected", "selected");
			$("#messagevalidfrom").val(Calendar.printDate(Calendar.parseDate('${resultSetList?api.get("message_valid_from")}',false),"%d-%b-%Y"));
			$("#messagevalidtill").val(Calendar.printDate(Calendar.parseDate('${resultSetList?api.get("message_valid_till")}',false),"%d-%b-%Y"));
			$("#messageText").val('${resultSetList?api.get("message_text")!""}');
			if(${resultSetList?api.get("display_once")!""} == 1){ 
            	 $("#displayOnce").prop("checked",true);
            	 $("#displayOnceTxt").val(1);
            } else {
                $("#displayOnce").prop("checked",false);
            	$("#displayOnceTxt").val(0);
            }
			$("#notificationId").val('${resultSetList?api.get("notification_id")}');
			$("#primaryKey").val('${resultSetList?api.get("notification_id")}');
            /*Added for fetching Datasource ID*/
            getAllDatasource(1);
            /*Setting Datasource Id value in Edit Tab*/
            $("#dataSource").val('${resultSetList?api.get("datasource_id")!""}'); 
            if('${resultSetList?api.get("datasource_id")!""}' == '' || '${resultSetList?api.get("datasource_id")!""}'== 'NULL'){
               $("#dataSource").val('')
            }
            /*Written for updating the count of Selection Criteria and Message Text in Edit Form*/
            var selection_count = parseInt(document.getElementById('selectioncriteria').value.length);
            var msg_count = parseInt(document.getElementById('messagetext').value.length);
            var maxCount = 500;
            var finalselcount = maxCount-selection_count;
            var finalmsgcount = maxCount-msg_count;
            $('#countdown').val(finalselcount);
            $('#countdown_msg').val(finalmsgcount);
            /*Ends Here*/
           
		</#list>
        
        document.title = "Edit Details";
	    $(".pageHeader").html("Edit Details");
	<#else>
		const generatedNotificationId = uuidv4();
		$("#notificationId").val(generatedNotificationId);
		$("#primaryKey").val(generatedNotificationId);
		$("#displayOnceTxt").val(0);
        $("#displayOnce").prop("checked",false);
        $("#selectioncriteria").text('select 1 As noti_count');
        /*Added for fetching Datasource ID*/
        getAllDatasource(0);
        /*Setting Datasource Id value in Add Tab*/
        document.title = "Add Details";
	</#if>
   
	hideShowActionButtons();
    
  });
  
  function updateDisplatOnceText() {
      if($("#displayOnce").prop("checked") == true) {
          $("#displayOnceTxt").val(1);
      } else {
          $("#displayOnceTxt").val(0);
      }
  }
  /**
	* This method should return non null or defined object in order to 
 	* submit the form. return null or undefined in case your custom / additional 
	* validation fails. If you don't want to perform any validation then either
	* delete the method or return the same object.
	* 
	* If you want to change the name of the form, then implement below method and return 
	* the form name in String
	* 
	*      getFormName();
	*
	* you also want to call below lines to focus and highlight erroneous field
	*      $("#"+fieldName).focus();
	*      $("#"+fieldName).closest("div").parent().effect("highlight", {}, 3000);
	*      showMessage("Issue in input", "warn");
	*/
	function onValidation(a_serializedFormData){
        /**Method called on click of save button for validating MsgValidTill Dt not greater than MsgValidFrom Dt*/
        if(validateTillDate()== true)
        {
            return a_serializedFormData;
	    }
         
    }
	
	/**
	* this method is called when there is a successful response from server.
	* you can use this to take other actions in case you need to. Success 
	 * message will be shown before calling this method. 
	 * you can define getSuccessMessage() function and return string for custom success message
	*/
	function onSuccess(a_serverResponse){
	    
	}
	
	/**
	* this method is called when there is any error at server while executing server side 
	 * code.
	* you can use this to take other actions in case you need to.
	* error message will be shown before calling this method
	* you can define getErrorMessage() function and return string for custom error message
	*/
	function onError(jqXHR, exception){
	    
	}

	//Code go back to previous page
	function backToPreviousPage() {
			location.href = contextPath+"/cf/nl";
	}
    /* Written for Limit Count Validation in Selection Criteria Text Area*/
     function calculateLength() {
        var limitNum=500;
        var selectioncriteria = $("#selectioncriteria").val();
        var limitCount = $('#countdown').val();
        limitCount = (limitNum) - selectioncriteria.length;
        $('#countdown').val(limitCount);   
    }
    /**Ends Here*/	

     /* Written for Limit Count Validation in Message Text Area*/
    function calculateLengthMsgTxt() {
        var limitNum=500;
        var messagetext = $("#messagetext").val();
        var limitCount = $('#countdown_msg').val();
        limitCount = (limitNum) - messagetext.length;
        $('#countdown_msg').val(limitCount);  
    }
    /**Ends Here*/	

    /**Validation written for MsgValidTill Date should not be greater than MsgValidFrom Date*/
    function validateTillDate(){
        let currentDate = Calendar.printDate(new Date(), "%d-%b-%Y");
        let fromDate = Calendar.intToDate(Calendar.parseDate($("#messagevalidfrom").val()), false);
        let fromDateInt = Calendar.dateToInt(fromDate);
        let tillDate = Calendar.intToDate(Calendar.parseDate($("#messagevalidtill").val()), false);
        let tillDateInt = Calendar.dateToInt(tillDate);
        if(tillDate < fromDate){
            showMessage("Notification Till Date must be after " + $("#messagevalidfrom").val(), "warn");
            return false;
        }   
        /**Validaion written for not allowing values in MsgValidFrom And MsgValidTill other than date*/
        let msgValidFrom= $("#messagevalidfrom").val();
        let validFromParsedDate = Date.parse(msgValidFrom);
        let msgValidTill= $("#messagevalidtill").val();
        let validTillParsedDate = Date.parse(msgValidTill);
        if (isNaN(validFromParsedDate)) 
        {
            $("#messagevalidfrom").closest("div").parent().effect("highlight", {}, 3000);
            $("#messagevalidfrom").focus();
            showMessage("Invalid Date Format", "warn");
            return false;
        }
        if(isNaN(validTillParsedDate))
        {
            $("#messagevalidtill").closest("div").parent().effect("highlight", {}, 3000);
            $("#messagevalidtill").focus();
            showMessage("Invalid Date Format", "warn");
            return false;
        }
       /**Ends Here*/	
        return true;
    }
    /**Ends Here*/	
   
</script>