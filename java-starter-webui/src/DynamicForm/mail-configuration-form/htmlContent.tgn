<head>
<link rel="stylesheet" href="${(contextPath)!''}/webjars/font-awesome/4.7.0/css/font-awesome.min.css" />
<link rel="stylesheet" href="${(contextPath)!''}/webjars/bootstrap/css/bootstrap.css" />
<link rel="stylesheet" href="${(contextPath)!''}/webjars/jquery-ui/1.12.1/jquery-ui.css"/>
<link rel="stylesheet" href="${(contextPath)!''}/webjars/jquery-ui/1.12.1/jquery-ui.theme.css" />
<script src="${(contextPath)!''}/webjars/jquery/3.5.1/jquery.min.js"></script>
<script src="${(contextPath)!''}/webjars/jquery-ui/1.12.1/jquery-ui.min.js"></script>
<script src="${(contextPath)!''}/webjars/1.0/pqGrid/pqgrid.min.js"></script>          
<script src="${(contextPath)!''}/webjars/1.0/gridutils/gridutils.js"></script> 
<link rel="stylesheet" href="${(contextPath)!''}/webjars/1.0/pqGrid/pqgrid.min.css" />
<link rel="stylesheet" href="${(contextPath)!''}/webjars/1.0/css/starter.style.css" />
<link rel="stylesheet" type="text/css" href="${(contextPath)!''}/webjars/1.0/dropzone/dist/dropzone.css" />
<script type="text/javascript" src="${(contextPath)!''}/webjars/1.0/dropzone/dist/dropzone.js"></script>
<script type="text/javascript" src="${(contextPath)!''}/webjars/1.0/fileupload/fileupload.js"></script>
<script type="text/javascript" src="${(contextPath)!''}/webjars/1.0/dynamicform/addEditDynamicForm.js">
<script type="text/javascript" src="${(contextPath)!''}/webjars/1.0/dynamicform/fileupload.js">
</script>
</head>
<style>

.hm-property {
    margin-top: 10px;
  }

  .hm-fieldset {
    margin-top: 12px;
    margin-bottom:20px;
    border: 1px groove #ddd !important;
    padding: 0 10px 10px 10px !important;
  }

  .hm-legend {
    font-size: 15px;
    font-weight: normal;
    font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;
    font-size: 14px;
    color: #555;
    border-bottom: none;
    padding: 0 10px;
    width: auto;
  }
  
.switch {
  position: relative;
  display: inline-block;
  width: 50px;
  height: 18px;
}

.switch input { 
  opacity: 0;
  width: 0;
  height: 0;
}

.slider {
  position: absolute;
  cursor: pointer;
  top: -10px;
  left: 9px;
  right: -7px;
  bottom: 0px;
  background-color: #ccc;
  -webkit-transition: .4s;
  transition: .4s;
}

.slider:before {
  position: absolute;
  content: "";
  height: 15px;
  width: 15px;
  left: 4px;
  bottom: 7px;
  background-color: white;
  -webkit-transition: .4s;
  transition: .4s;
}

input:checked + .slider {
  background-color: #2196F3;
}

input:focus + .slider {
  box-shadow: 0 0 1px #2196F3;
}

input:checked + .slider:before {
  -webkit-transform: translateX(26px);
  -ms-transform: translateX(26px);
  transform: translateX(26px);
}

/* Rounded sliders */
.slider.round {
  border-radius: 34px;
}

.slider.round:before {
  border-radius: 50%;
}

.customefileupload .filepreviewcontainer {max-height:150px;overflow:auto;}

/* .mailForm {
  width: 55%;
} */

.dropzone-wrap {
    border-style: solid;
}
</style>

<div class="container">
  <div class="topband">
    <#if (resultSet)?? && (resultSet)?has_content>
        <h2 class="title-cls-name float-left">${messageSource.getMessage('jws.editmailconfiguration')}</h2> 
        <#else>
            <h2 class="title-cls-name float-left">${messageSource.getMessage('jws.mailconfiguration')}</h2> 
        </#if>
    <div class="clearfix"></div>    
  </div>
  
  <div id="errorMessage" class="alert errorsms alert-danger alert-dismissable" style="display:none"></div>  
  <form method="post"   name="addEditForm" id="addEditForm" >
    
    
    <input type="hidden" id="mailConfigJson" name="mailConfigJson" value='${(resultSetObject.property_value)!""}'>
    <input type="hidden" id="totalFailedMails" name="totalFailedMails" value="">
    <div class="row">
      <div class="col-4">
        <div class="col-inner-form full-form-fields">
          <label for="smtpHost" style="white-space:nowrap"><span class="asteriskmark">*</span>${messageSource.getMessage('jws.smtphost')}</label>
          <input type="text" id="smtpHostId" name="smtpHost" value="" placeholder="SMTP Host" required  class="form-control mailForm">
        </div>
      </div>
      
      <div class="col-4 ">
        <div class="col-inner-form full-form-fields">
          <label for="smtpPort" style="white-space:nowrap"><span class="asteriskmark">*</span>${messageSource.getMessage('jws.smtpPort')}</label>
          <input type="text" id="smtpPortId" name="smtpPort" value="" placeholder="SMTP Port" required  class="form-control mailForm">
        </div>
      </div>
      
      <div class="col-4">
        <div class="col-inner-form full-form-fields">
          <label for="smtpSecurityProtocal" style="white-space:nowrap">${messageSource.getMessage('jws.securityprotocol')}</label>
          <select id="smtpSecurityProtocalId" name="smtpSecurityProtocal" onchange="populateFields(this)" class="form-control">
              <option value="">${messageSource.getMessage('jws.select')}</option> 
              <option value="TLS">${messageSource.getMessage('jws.tls')}</option> 
              <option value="SSL">${messageSource.getMessage('jws.ssl')}</option> 
            </select>
        </div>
      </div>
      
      <div class="col-12"> 
        <fieldset class="hm-fieldset">
         <legend class="hm-legend" style="display:flex;"> ${messageSource.getMessage('jws.authentication')} <label class="switch" style="margin-left:15px;margin-right:15px;"> 

                         <div class="onoffswitch">
                                <input class="onoffswitch-checkbox" type="checkbox" name="isSmtpAutheticatedId" id="isSmtpAutheticatedId" onclick="authenticationChecked($(this));">
                                <label class="onoffswitch-label" for="isSmtpAutheticatedId">
                                        <span class="onoffswitch-inner"></span>
                                        <span class="onoffswitch-switch"></span>
                                    </label>
                            </div>
        
     </label></legend>
      
      <div class="col-6 float-left"">
        <div class="col-inner-form full-form-fields">
                  <label for="userName" style="white-space:nowrap"><span class="asteriskmark">*</span>${messageSource.getMessage('jws.username')} </label>
          <input type="text" id="userName" name="userName" value="" placeholder="Username"  required class="form-control mailForm RemoveData">
        </div>
      </div>
      <div class="col-6 float-right">
        <div class="col-inner-form full-form-fields">
  
          <label for="password" style="white-space:nowrap"><span class="asteriskmark">*</span>${messageSource.getMessage('jws.password')}</label>
          <input type="password" id="password" name="password" value=""  placeholder="Password" required class="form-control mailForm RemoveData">
        </div>
      </div>
      </fieldset>
      </div>
      
      
      <div class="col-6 float-right">
        <div class="col-inner-form full-form-fields">
          <label for="email" style="white-space:nowrap"><span class="asteriskmark">*</span>  ${messageSource.getMessage('jws.fromemail')}  </label>
          <input type="email" id="mailFrom" name="mailFrom" value=""  placeholder="EMail" required class="form-control mailForm"  >
        </div>
      </div>
      
       <div class="col-6">
        <div class="col-inner-form full-form-fields">
          <label for="mailFromName" style="white-space:nowrap"><span class="asteriskmark">*</span>${messageSource.getMessage('jws.fromname')}</label>
          <input type="text" id="fromNameId" name="mailFromName" value=""  placeholder="Name" required class="form-control mailForm">
        </div>
      </div>
      
      <div class="col-6">
        <div class="col-inner-form full-form-fields">
          <label for="replyToEmailDropdown" style="white-space:nowrap">${messageSource.getMessage('jws.replyto')}</label>
          <select id="replyToEmailDropdown" name="replyToEmailDropdown"  class="form-control mailForm">
              <option value="Same">${messageSource.getMessage('jws.same')}</option> 
              <option value="NoReply">${messageSource.getMessage('jws.noreply')}</option> 
              <option value="Different">${messageSource.getMessage('jws.different')}</option>
            </select>
        </div>
      </div>
      
       <div class="col-6">
        <div class="col-inner-form full-form-fields">
          <label for="email" style="white-space:nowrap">${messageSource.getMessage('jws.replytoemailid')}</label>
          <input type="email" id="replyToDifferentEmailId" name="replyToDifferentEmailId" placeholder="EMail" value=""  required class="form-control mailForm">
        </div>
      </div>
	  
	  <div class="col-6">
        <div class="col-inner-form full-form-fields">
          <label for="email" style="white-space:nowrap">${messageSource.getMessage('jws.noreplyemailid')}</label>
          <input type="email" id="noReplyToMailId" name="noReplyToMailId" placeholder="EMail" value=""  required class="form-control mailForm">
        </div>
      </div>
      
        <div style="display:flex; width:100%;">
      <div  class="col-12"> 
      <fieldset class="hm-fieldset" >
         <legend class="hm-legend" style="display:flex;     margin-bottom: 30px;">
     ${messageSource.getMessage('jws.mailfooter')} 

</legend>
        
       <div class="col-5" style="float:left;">
        <div class="col-inner-form full-form-fields">      
        <div class="txtWrapper">
            <textarea id="mailFooterId" name="mailFooter" rows="4" placeholder="Footer text will be appended to all outgoing mail" cols="50" class="form-control" > </textarea>
            <i class="fa fa-arrows-alt" title="Click to enter full screen" aria-hidden="true" style="top:-30px;"></i>
        </div>    
        </div>
        </div>   
      
       <div class="col-7" style="float:left;">
      <div id="fileUploadMaster" class="col-12 customefileupload fileupload dropzone"></div></div> 
      
      </fieldset>
      </div>     
      </div>
    </div>

<div class="row">
      
      <div class="col-6">
        <div class="col-inner-form full-form-fields">
          <label for="internetAddressToArray" style="white-space:nowrap">${messageSource.getMessage('jws.sendtestmailto')}</label>
          <input type="text" id="internetAddressToArray" name="internetAddressToArray" placeholder="Comma seperated email addresses" value=""  required class="form-control">
        </div>
      </div>
    
    <div class="col-4">
		<div class="col-inner-form full-form-fields">
			<label for="noOfFailedMails" style="white-space:nowrap">
    	        <span class="asteriskmark">*</span>${messageSource.getMessage('jws.noOfFailedemails')}
            </label>
            <input type="hidden" id="noOfFailedMails" name="noOfFailedMails">
            <p class="failed-mail-slider-cls"><span id="failedMailsSliderSpan" class="no-of-files-counter"></span></p>
		    <div class="file-slider-div-cls" id="failedMailsSliderDiv" style="margin: 10px 0px !important;"></div>
		</div>
    </div>
      
    </div>
    <!-- Your form fields end -->  
    
  </form>
  <div class="row margin-t-10">
        
    <div class="col-12">
      <div class="float-right">
        <div class="btn-group dropup custom-grp-btn">
            <div id="sendTestMail">
                <button type="button" id="sendTestMailId" class="btn btn-primary" onclick="sendMail()">${messageSource.getMessage("jws.sendTestMail")}</button>
             </div>   &nbsp;  
             <div id="savedAction">
                <button type="button" id="saveConfigurationId" class="btn btn-primary" onclick="saveData(this.id)">${messageSource.getMessage("jws.saveMailConfiguration")}</button>
             </div> 
              </div>
        <span onclick="backToPreviousPage();">
          <input id="backBtn" class="btn btn-secondary" name="backBtn" value="${messageSource.getMessage('jws.close')}" type="button">
        </span> 
      </div>
    </div>
  </div>
    <br> 
<div id="failedMailsListingGrid"></div>
</div>

<script>

  contextPath = "${contextPath}";
  /**Added for File Bin*/
  let dropZone = $(".fileupload").fileUpload({
        fileBinId : "mailAttachment",
        fileAssociationId: "mailAttachment",
        createFileBin : true,
        renderer: fileConfigRenderer,
    });
/**Ends Here*/
  let formId = "${formId}";
  let edit = 0;
    var saveMailConfigDetailsJson=[]; 
  
  	function initializeFailedMaillider(){
    	let context = this;
    	$("#failedMailsSliderDiv").slider({
           	orientation:"horizontal",
           	min:10,
           	max:100,
           	value:$("#noOfFailedMails").val() == "" ? 32 : $("#noOfFailedMails").val(),
			slide: function( event, ui ) {
				$("#failedMailsSliderSpan").text(ui.value);
            	$("#noOfFailedMails").val(ui.value);
           }	
       });
       let fileCount = $("#failedMailsSliderDiv").slider("value");
       $("#failedMailsSliderSpan").text(fileCount);
       $("#noOfFailedMails").val(fileCount);
    }
    
    function sendMail(){

    if(validateFields() == false){
        $("#errorMessage").show();
        return false;
    }
    if(checkFileUploadTempIdCookie() == true){
       
        return false;
    }
    var jsonobject =getJsonObject();
    saveMailConfigDetailsJson=JSON.stringify(jsonobject);
   
    $.ajax({
            type : "POST",
            async: false,
            url : contextPath+"/cf/stm",
            data : {
                saveMailConfigDetailsJson :saveMailConfigDetailsJson
            },
            success : function(data) {
                if(data){
                    showMessage("You will recieve test mail shortly", "success");
                } else {
                    $("#failedMailsListingGrid").trigger( "reloadGrid" );
                    showMessage("Error occurred while sending mail", "error");
                }
            },
            error : function(xhr, error){
                $("#failedMailsListingGrid").trigger( "reloadGrid" );
                showMessage("Error occurred while sending mail", "error");
            },
        });
        return true;
    }

  function getJsonObject(){
        var jsonobject={};
        jsonobject["smtpHost"]=$("#smtpHostId").val().trim();
        jsonobject["smtpPort"]=$("#smtpPortId").val().trim();
        jsonobject["smtpSecurityProtocal"]=$("#smtpSecurityProtocalId").val();
        jsonobject["userName"]=$("#userName").val().trim();
        jsonobject["password"]=$("#password").val().trim();
        jsonobject["mailFrom"]=$("#mailFrom").val().trim();
        jsonobject["mailFromName"]=$("#fromNameId").val().trim();
    
        if ($("#replyToEmailDropdown").val()=="Different"){
            jsonobject["isReplyToDifferentMail"]=true;
            jsonobject["replyToDifferentMailId"]=$("#replyToDifferentEmailId").val().trim();
        }else if ($("#replyToEmailDropdown").val()=="Same"){
            jsonobject["isReplyToDifferentMail"]=false;
            jsonobject["replyToDifferentMailId"]=$("#mailFrom").val().trim();
        }else{
			jsonobject["isReplyToDifferentMail"]=false;
			jsonobject["noReplyToMailId"]=$("#noReplyToMailId").val().trim();
        }
        
        jsonobject["mailFooter"]=$("#mailFooterId").val().trim();
        jsonobject["internetAddressToArray"]=$("#internetAddressToArray").val();
        jsonobject["isAuthenticated"]=$("#isSmtpAutheticatedId").is(":checked");
        jsonobject["failedMailCounter"]=$("#noOfFailedMails").val();
        return jsonobject;
    }

	function saveData (){
  		let isDataSaved = false;
	    if(validateFields() == false){
	    	$("#errorMessage").show();
	        return false;
	    }
	  	let jsonobject =getJsonObject();
	    saveMailConfigDetailsJson=JSON.stringify(jsonobject);
	    $.ajax({
	    	type : "POST",
	      	async: false,
	      	url : contextPath+"/api/mailConfigurationDetails",
	      	data : {
	      		saveMailConfigDetailsJson : saveMailConfigDetailsJson
	      	},
	        success : function(data) {
	        	isDataSaved = true;
                /**Added for File Bins*/
                dropZone.options['displayOptions'] = 0;
                var successMsg = dropZone.saveSelectedFiles(fileBins,"addEditForm"); 
                if (successMsg == 'Success') {
                    if (fileBins) {
                        for (let fileBinCounter = 0; fileBinCounter < fileBins.length; fileBinCounter++) {
                           $("#div_"+fileBins[fileBinCounter].fileUploadTempId).css('visibility', 'visible');
                        }
			        }
                }
                dropZone.getSelectedFiles();  
                /**Ends Here*/  
	      	},
	        error : function(xhr, error){
	      		showMessage("Error occurred while saving", "error");
	        },
		});  
	    refreshMailConfiguration();
    	    return isDataSaved;
  	}

	function refreshMailConfiguration(){
		$.ajax({
			type : "POST",
        	async: false,
        	url : contextPath+"/cf/rp",
        	data : {
            	ownerId: "system",
            	ownerType: "system",
            	propertyName: "mail-configuration",
            	propertyValue: saveMailConfigDetailsJson,
        	},
        	success : function(data) {
        	},
        	error : function(xhr, error){
            	showMessage("Error occurred while updating property configuration", "error");
        	},
      	});
  	}
  
    function validateFields(){
        const smtpHostId = $("#smtpHostId").val().trim();
        const smtpPortId = $("#smtpPortId").val().trim();   
        const mailFrom = $("#mailFrom").val().trim();
        const mailFromName = $("#fromNameId").val().trim();
   
        if($("#isSmtpAutheticatedId").is(":checked")){
            const userName = $("#userName").val().trim();
            const passwordIs = $("#password").val().trim();
            if(userName == "" || passwordIs == ""){
            $("#errorMessage").html("Please enter user name and password");
                return false;
            }
        }       
        
        if(smtpHostId == "" || smtpPortId == "" ||  mailFrom == "" || mailFromName == ""){
            $("#errorMessage").html("Please enter data for mandatory fields");
        return false;
        }    
       
        const emailExpression =  /[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,3}$/; 
        
        if( !emailExpression.test(mailFrom)){
            $("#errorMessage").html("Please enter valid email id into from email");
            showMessage("Please enter valid email id into from email", "error");
            $("#mailFrom").focus();
        return false;
        }
        
        const emailList = $("#internetAddressToArray").val();

        if( emailList == "" || emailList == undefined || emailList.trim() == undefined || !validateEmailsList(emailList)){
            $("#errorMessage").html("Please enter valid email ids with comma sepearated");
            showMessage("Please enter valid email ids with comma sepearated", "error");
            $("#internetAddressToArray").focus();
        return false;
        }           
        return true;
    }
    
    function validateEmailsList(emailList) {
        var emails = emailList.replace(/s/g,'').split(",");
        var valid = true;
        const emailExpression = /[a-z0-9._%+-]+@[a-z0-9.-]+.[a-z]{2,3}$/;
        for (var i = 0; i < emails.length; i++) {
            if( emails[i] == "" || !emailExpression.test(emails[i])){
                valid = false;
            }
        }
        return valid;
    }
  
  function backToPreviousPage() {
    location.href = contextPath+"/cf/pml"
  }
  
  function authenticationChecked(t){
  
  if (t.is(":checked")) {
        $(".RemoveData").removeAttr("disabled", "disabled"); 
        $("#userName").attr("placeholder", "Username"); 
        $("#password").attr("placeholder", "Password"); 
        $("#userName").focus();
    } else {
        $(".RemoveData").attr("placeholder", ""); 
        $(".RemoveData").val("");    
        $(".RemoveData").attr("disabled", "disabled");    
      }
  }
  
    function mailFooterReuired(t){
       
        $("#mailFooterId").attr("placeholder", "Footer text will be appended to all outgoing mail"); 
        $("#mailFooterId").focus();        
       
    }
    
    function disableEanbleTextBoxes(){	
        if ($("#replyToEmailDropdown").val()=="NoReply"){
            $("#noReplyToMailId").removeAttr("disabled", "disabled"); 
            $("#noReplyToMailId").attr("placeholder", "EMail");
            $("#noReplyToMailId").focus();
            $("#noReplyToMailId").select();
			
			$("#replyToDifferentEmailId").val("");
            $("#replyToDifferentEmailId").attr("placeholder", "");
            $("#replyToDifferentEmailId").attr("disabled", "disabled");	
        }else if ($("#replyToEmailDropdown").val()=="Different"){
            $("#replyToDifferentEmailId").removeAttr("disabled", "disabled"); 
            $("#replyToDifferentEmailId").attr("placeholder", "EMail");
            $("#replyToDifferentEmailId").focus();
            $("#replyToDifferentEmailId").select();
			
			$("#noReplyToMailId").val("");
            $("#noReplyToMailId").attr("placeholder", "");
            $("#noReplyToMailId").attr("disabled", "disabled");
        }else if($("#replyToEmailDropdown").val()=="Same"){
            $("#replyToDifferentEmailId").val("");
            $("#replyToDifferentEmailId").attr("placeholder", "");
            $("#replyToDifferentEmailId").attr("disabled", "disabled");	
			
			$("#noReplyToMailId").val("");
            $("#noReplyToMailId").attr("placeholder", "");
            $("#noReplyToMailId").attr("disabled", "disabled");
        }
    }
  
    $("#replyToEmailDropdown").change(function() {
            disableEanbleTextBoxes();
    });
   
  $(function() {  
      $( ".txtWrapper i" ).click(function() {
            let elem = $(this).prev().get()[0];
            if (elem.requestFullscreen) {
                elem.requestFullscreen();
            } else if (elem.webkitRequestFullscreen) { /* Safari */
                elem.webkitRequestFullscreen();
            } else if (elem.msRequestFullscreen) { /* IE11 */
                elem.msRequestFullscreen();
            }    
            $(this).prev().focus();
        });
         <#if (resultSet)??>
          <#list resultSet as resultSetList>
            $("#totalFailedMails").val('${resultSetList?api.get("totalFailedMails")}');   
          </#list>
        </#if>
        
        if($("#mailConfigJson").val() !="" ){
        var jsonObject = JSON.parse($("#mailConfigJson").val());
        $("#smtpHostId").val(jsonObject.smtpHost); 
        $("#smtpPortId").val(jsonObject.smtpPort);
        $("#mailFrom").val(jsonObject.mailFrom);
        $("#fromNameId").val(jsonObject.mailFromName);    
        $("#internetAddressToArray").val(jsonObject.internetAddressToArray);  
        $("#replyToDifferentEmailId").val(jsonObject.replyToDifferentMailId);
        
        if(jsonObject.isReplyToDifferentMail == true){
            $("#replyToEmailDropdown").val("Different");  
        }else{
            if(jsonObject.replyToDifferentMailId == jsonObject.mailFrom){
                $("#replyToEmailDropdown").val("Same");  
            }else{
                $("#replyToEmailDropdown").val("NoReply"); 
            }
        }
        
    $("#smtpSecurityProtocalId").val(jsonObject.smtpSecurityProtocal);
        $("#smtpSecurityProtocalId").val(jsonObject.smtpSecurityProtocal);
        $("#noOfFailedMails").val(jsonObject.failedMailCounter);
        $("#failedMailsSliderSpan").html(jsonObject.failedMailCounter);
        if(jsonObject.isAuthenticated ==true){
            $("#isSmtpAutheticatedId").prop("checked", true);
            $("#userName").val(jsonObject.userName);
      $("#password").val(jsonObject.password);
        }else{
            $(".RemoveData").attr("placeholder", ""); 
            $(".RemoveData").val("");
            $(".RemoveData").attr("disabled", "disabled");
            $("#isSmtpAutheticatedId").prop("checked", false);
        }
        $("#mailFooterId").val(jsonObject.mailFooter);
      } else {
            $("#smtpHostId").val("localhost"); 
            $("#smtpPortId").val("25");
            $("#mailFrom").val("admin@jquiver.io");
            $("#fromNameId").val("Admin");
            $("#internetAddressToArray").val("admin@jquiver.io");
            $("#noOfFailedMailsValue").html("50");
            $(".RemoveData").attr("placeholder", ""); 
            $(".RemoveData").val("");    
            $(".RemoveData").attr("disabled", "disabled");
            $("#mailFooterId").attr("placeholder", ""); 
            $("#mailFooterId").val("");    
     }
      
        let edit = 0;
        <#if (resultSet)?? && resultSet?has_content>
          edit = 1;
        </#if>
        
        initializeFailedMaillider();
        disableEanbleTextBoxes();
          var colM = [
			{ dataIndx: "failed_mail_id",hidden: true },
			{ title: "Sent To", maxWidth: 730, dataIndx: "mail_sent_to", align: "left", 
			filter: { type: "textbox", condition: "contain",  listeners: ["change"] }},
			{ title: "Time", maxWidth: 250, dataIndx: "mail_failed_time" , align: "left", 
			filter: { type: "textbox", condition: "contain",  listeners: ["change"] }},
			{ title:"", maxWidth: 150, dataIndx: "action", align: "center",  render: downloadEmail}
       ];
  
  	let dataModel = {
       	url: contextPath+"/cf/pq-grid-data",
       	sortIndx: "mail_failed_time",
        sortDir: "down",
    };
    var grid = $("#failedMailsListingGrid").grid({
      gridId: "failedMailsGrid",
      colModel: colM,
      dataModel: dataModel
    }); 
               
  });

  function deleteFileById(fileId) {
      dropZone.deleteFileById(fileId)
  }

    function downloadEmail(uiObject) {
        return '<span  onclick=\'downloadFile('+JSON.stringify(uiObject.rowData.eml_file_path)+')\' ><i class="fa fa-download"  title="Download Email"></i></span>'.toString();
  }
  
    function downloadFile(uiObject){
    	let xhr = new XMLHttpRequest();
    	//window.open( contextPath+"/api/downloadEmails/"+escape(uiObject), "_blank");
	    let fileId = uuidv4();
		xhr.open("GET", contextPath+"/api/downloadEmails?emlFilePath="+escape(uiObject));
		xhr.responseType = "blob";
		xhr.send();
	
		xhr.onload = function(event) {
			if (this.status == 200) {
				let xhrObj = event.currentTarget;
		    	let fileName = xhrObj.getResponseHeader("Content-Disposition").split("filename=")[1].split(";")[0];
		        let blob = new Blob([this.response], {type: "application/pdf"});
		        let downloadDocHrefElem = document.createElement("a");
		        downloadDocHrefElem.style = "display: none";
		        document.body.appendChild(downloadDocHrefElem);
		        downloadDocHrefElem.setAttribute("id", fileId);
		        let url = window.URL.createObjectURL(blob);
		        downloadDocHrefElem.href = url;
		        downloadDocHrefElem.download = fileName.replaceAll("\"", "");
		        downloadDocHrefElem.click();
		        window.URL.revokeObjectURL(url);
		        $("#"+fileId).remove(); 
			}else{
				showMessage("Error occurred while downloading", "error");
		    }
		};
    }
/** Added for File Bin*/
     $(function () {
        //please change the name of the component if you are using default UI
        //as per the declaration
        dropZone.getSelectedFiles();
    });

    /*
     * This is for showing the flie listing. This also can be used for 
     * adding any custom button in the listing as per the business need
     */
    function fileConfigRenderer(fileObj) {
        let fileUploadId = fileObj["id"];
        let fileUploadTempId = fileObj["fileUploadTempId"];
        let fileName = fileObj["name"];
        let copyImgMsg = "${messageSource.getMessage('jws.copyImagePath')}";
        let actionElem = "";
        if (getCookie("fileBinDetails") != "" && getCookie("fileBinDetails") != undefined) {
			let fileBinJsonLocalArr = JSON.parse(getCookie("fileBinDetails"));
			let tempFileBinJsonArr = [];  
            actionElem = "<div class='fileicons'><span id='div_"+fileUploadTempId+"' class='iconcovercls' title='"+copyImgMsg+"'><i class='fileupload-actions fa fa-copy float-right'  onclick=\"copyFilePath('"+fileName+"')\"></i></span>" +
                    "<div class='fileicons'><span class='iconcovercls' title='Delete'><i class='fileupload-actions fa fa-trash float-right' onclick=\"deleteFileById('"+fileUploadId+"')\"></i></span></div>";    	       
			// iterate over fileBinJsonArr cookie array values
			if (fileBinJsonLocalArr.length > 0) {
				$.each(fileBinJsonLocalArr, function(key, data) {
				  if (data.id == fileUploadId) {
					actionElem = "<div class='fileicons'><span id='div_"+data.fileUploadTempId+"' style='visibility:hidden' class='iconcovercls' title='"+copyImgMsg+"'><i class='fileupload-actions fa fa-copy float-right'  onclick=\"copyFilePath('"+fileName+"')\"></i></span>" +
                    "<div class='fileicons'><span class='iconcovercls' title='Delete'><i class='fileupload-actions fa fa-trash float-right' onclick=\"deleteFileById('"+fileUploadId+"')\"></i></span></div>";    	
                   }        
                });           
            } 
             return actionElem; 
        }   
    }

    /*
     * In case of custom UI, this method will be called.
     */
    function fileListing(fileObj){
        let input = $("<input id='"+fileObj["id"]+"' value='"+fileObj["id"]+"' type='text'>");
    //    input.insertAfter($("#fileIdDiv"));
    }

    /*
     * This is just for demo purpose, to show sample function from the button
     */
    function fileName(a_fileName){
        showMessage("File Name: " + a_fileName, "success");
    }

    /*
     * This is just for demo purpose, to show sample function from the button
     */
    function copyFilePath(fileName){
        let input = $("<input>");
        $("body").append(input); 
        let imgTag = '<img src =\"cid:';
        let endimgTag = '\" />';
        input.val(imgTag + fileName + endimgTag).select();
        document.execCommand("copy");
        input.remove();
        showMessage("Image Path copied successfully", "success");
    }
    function checkFileUploadTempIdCookie() {
        var returnStatement = false;
		if (getCookie("fileBinDetails") != "" && getCookie("fileBinDetails") != undefined) {
			let fileBinJsonLocalArr = JSON.parse(getCookie("fileBinDetails"));
			let tempFileBinJsonArr = [];
			// iterate over fileBinJsonArr cookie array values
			if (fileBinJsonLocalArr.length > 0) {
				$.each(fileBinJsonLocalArr, function(key, data) {
					if (data.fileBinId == "mailAttachment") {
					    showMessage("Please save the configuration before sending.","warn");
                        returnStatement = true;
                        return false;         
					}             
				});			
				let fileBinJsonArr1 = JSON.parse(getCookie("fileBinDetails"));
			}
        }
    return returnStatement  ;    
}

    /**Ends Here*/
</script>