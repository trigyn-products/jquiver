<head>
<link rel="stylesheet" href="${(contextPath)!''}/webjars/font-awesome/4.7.0/css/font-awesome.min.css" />
<link rel="stylesheet" href="${(contextPath)!''}/webjars/bootstrap/css/bootstrap.css" />
<link rel="stylesheet" href="${(contextPath)!''}/webjars/jquery-ui/1.12.1/jquery-ui.css" />
<link rel="stylesheet" href="${(contextPath)!''}/webjars/jquery-ui/1.12.1/jquery-ui.theme.css" />
<script src="${(contextPath)!''}/webjars/jquery/3.5.1/jquery.min.js"></script>
<script src="${(contextPath)!''}/webjars/jquery-ui/1.12.1/jquery-ui.min.js">
</script><script src="${(contextPath)!''}/webjars/1.0/pqGrid/pqgrid.min.js"></script>          
<script src="${(contextPath)!''}/webjars/1.0/gridutils/gridutils.js"></script> 
<link rel="stylesheet" href="${(contextPath)!''}/webjars/1.0/pqGrid/pqgrid.min.css" />
<link rel="stylesheet" href="${(contextPath)!''}/webjars/1.0/css/starter.style.css" />
<link rel="stylesheet" href="${(contextPath)!''}/webjars/1.0/importExport/export.css" />
<script src="${(contextPath)!''}/webjars/1.0/importExport/export.js"></script> 
<link rel="stylesheet" type="text/css" href="${contextPath!''}/webjars/1.0/JSCal2/css/jscal2.css" />
<link rel="stylesheet" type="text/css" href="${contextPath!''}/webjars/1.0/JSCal2/css/border-radius.css" />
<link rel="stylesheet" type="text/css" href="${contextPath!''}/webjars/1.0/JSCal2/css/steel/steel.css" />
<script type="text/javascript" src="${contextPath!''}/webjars/1.0/JSCal2/js/jscal2.js"></script>
<script type="text/javascript" src="${contextPath!''}/webjars/1.0/JSCal2/js/lang/en.js"></script>


<style>
    .flexcls{
        display:flex;
    }
    </style>


</head>

<div class="pg-export-config">

<div class="container">
    <div class="cm-card">
	<div class="topband cm-card-header">
		<h2 class="title-cls-name float-left" style="margin-top: 5px;">${messageSource.getMessage('jws.exportconfiguration')}</h2>
        <div class="float-right flexcls">
            <div class="flexblock">
            <div id="expHeader" class="flexblock">
                ${messageSource.getMessage('jws.show')}<select id="typeSelect" class="typeSelectDropDown" onchange="changeType()">   
                    <option value="0">${messageSource.getMessage('jws.all')}</option>                   
                    <option value="1" selected>${messageSource.getMessage('jws.custom')}</option>                   
                    <option value="2">${messageSource.getMessage('jws.system')}</option>                 
                </select>
                <span class="calndercutom">
                     <label for="chkDatePicker" style="cursor:pointer">${messageSource.getMessage('jws.modifiedafter')} </label>
                    <input type="checkbox" id="chkDatePicker" onchange="selectAsperDate()" >
                    <input disabled id="modifiedAfter" data-type="varchar" class="custtexbox" name="modifiedAfter" placeholder="Modified After" autocomplete="off"/>
                         <button disabled id="modifiedAfter-trigger" class="calender_icon">
                        <i class="fa fa-calendar" aria-hidden="true"></i>
                        </button>
                </span>
            </div>
            
            </div>

            <div id="mainTabBtn">
		        <input id="nextBtn" class="btn btn-primary" style="float:right;padding: 6px 12px;    margin: 0 6px;" 
			            name="nextBtn" value="Next" type="button" onclick="gotoNextPage()">
                <div class="jws-deselect-btn btn btn-primary">
                    <input type="checkbox" id="deselectAllChkBx" name="deselectAllChkBx"
                        onchange="deselectAll();" style="float:left;">
                    <label for="deselectAllChkBx">${messageSource.getMessage('jws.deselectall')}</label> 
                </div>
		    </div>

            <div id="nextTabBtn" style="display: none;">
                <button id="download" class="btn btn-primary" style="float: right; margin: 0 9px;" name="downloadBtn"
                    type="button" onclick="downloadAll()">Export to Folder <i class="fa fa-download" aria-hidden="true"></i></button>
            
                <button id="exportBtn" class="btn btn-primary" style="float: right;    margin: 0 0 0 9px;" name="exportBtn"
                    type="button" onclick="exportData()">
                    Export Zip
                </button>
                <input id="prevBtn" class="btn btn-primary" style="float: right;" name="prevBtn"
                    value="Previous" type="button" onclick="gotoPrevPage()">
            </div>

            <span onclick="backToPreviousPage();" >
                <input id="backBtn" class="btn btn-secondary" name="backBtn" value="Back" type="button">
            </span>	

        </div>
        
		<div id="exportFormDiv" style = "display:none"></div>


		   
	</div>
	

    <div class="cm-card-body">
    <div class="cm-boxwrapper"  id="mainTab">
    <div class="cm-boxleft cm-scrollbar export-cm-boxleft">
          
                <div class="tab" style="height: 100%;">
                 <#if (moduleVOList)??> 
                 <#list moduleVOList as moduleVO> 
                        <#if moduleVO.moduleType?? && moduleVO.moduleType == "Grid"> 
                            <button class="tablinks active" id= "${moduleVO.moduleId}" 
                            	onclick="openTab(event, '${moduleVO.gridDetailsId}', '${moduleVO.moduleType}')">
                            	${(moduleVO.moduleName)}  <div class="jws-count-wrap">	
                                    Selected:	
                                <span id="selectedCount_${moduleVO.moduleType}"></span> / <span id="totalCount_${moduleVO.moduleType}"></span>	
                                <img src="${(contextPath)!''}/webjars/1.0/images/s-information1.svg">	
                                </div>	
                            </button>
                        <#else>
                            <button class="tablinks" id= "${moduleVO.moduleId}" 
                            	onclick="openTab(event, '${moduleVO.gridDetailsId!""}', '${moduleVO.moduleType!""}')">
                            	${(moduleVO.moduleName)} <div class="jws-count-wrap">	
                                    Selected:	
                                <span id="selectedCount_${moduleVO.moduleType!''}"></span> / <span id="totalCount_${moduleVO.moduleType!''}" ></span>	
                                <img src="${(contextPath)!''}/webjars/1.0/images/s-information1.svg">	
                                </div>	
                            	</button>
                        </#if>
                                	
                            </#list>
                        </#if>
	            </div>

    </div>

    <div class="cm-boxright cm-boxright-export cm-scrollbar">
         <#if (moduleVOList)??> 
                    <#list moduleVOList as moduleVO> 
                        <#if moduleVO.moduleType?? && moduleVO.moduleType == "Grid"> 
                            <div id="${moduleVO.moduleType}" class="tabcontent">
                            </div>
                        <#else>
                            <div id="${moduleVO.moduleType!''}" class="tabcontent" style="display:none;">
                            </div>
                        </#if>
                    </#list>
		        </#if>
        
    </div>
    </div>

        <div>
        </div>

        	<div id="nextTab" style="display: none;">
		<div class="cm-scrollbar" id="divHtmlTable">
			<table class="table table-striped" id="htmlTable">
				<thead class="thead-light">
					<tr>
						<th>${messageSource.getMessage('jws.moduletype')}</th>
						<th>${messageSource.getMessage('jws.entityid')}</th>
						<th>${messageSource.getMessage('jws.entityname')}</th>
						<th>${messageSource.getMessage('jws.version')}</th>
					</tr>
				</thead>
				<tbody class="cm-scrollbar">
				</tbody>
			</table>
		</div>
	</div>

    </div>

     
</div>
</div>
<script>
document.title = "Export Configuration Module";
let isDeselectedAll = false;
let selectedType = 1;
contextPath = "${contextPath}";
var isSelectAsPerDate = false;
var selectedDate;
let selectDateCal;
let profile;

function selectAsperDate() {
    $("#modifiedAfter").prop("disabled", !$("#chkDatePicker")[0].checked);
	$("#modifiedAfter-trigger").prop("disabled", !$("#chkDatePicker")[0].checked);

    if($("#chkDatePicker")[0].checked) {
        isSelectAsPerDate = true;
        if($("#modifiedAfter").val() != null && $("#modifiedAfter").val() != "") {
            isSelectAsPerDate = true;
            selectedDate = $("#modifiedAfter").val();
            changeType();
        }
        
    } else {
        isSelectAsPerDate = false;
        selectedDate = "";
    }
}

$(function () {
    <#list systemProperties as key, value>
                <#if key.propertyName == "profile">
                    profile = "${value}".trim();
                </#if>
            </#list>
    if(profile=="dev") {
        $("#divExportToLocal").show();
    } else {
        $("#divExportToLocal").hide();  
    }
    selectDateCal = Calendar.setup({
			trigger    : "modifiedAfter-trigger",
			inputField : "modifiedAfter",
			dateFormat : "%d-%b-%Y",
			weekNumbers: true,
            showTime: false,
			onSelect   : function() { 
				let selectedDate = this.selection.get();
				let date = Calendar.intToDate(selectedDate);
				date = Calendar.printDate(date, "%d-%b-%Y");
				$("#"+this.inputField.id).val(date);
				this.hide();
                if(isSelectAsPerDate == true) {
                    isSelectAsPerDate = true;
                    selectedDate = date;
                    changeType();
                }
			},
		});

	    localStorage.removeItem("imporatableData");
	    localStorage.removeItem("importedIdList");


	    <#if (customEntityCount)??> 
	    	<#list customEntityCount as entity> 
				<#list entity?keys as key>
					${key} = '${(entity[key])!""}' ;
				</#list> 
				$('#selectedCount_'+enityType).text(count);
			</#list>
	    </#if>
	    <#if (allEntityCount)??> 
	    	<#list allEntityCount as entity> 
				<#list entity?keys as key>
					${key} = '${(entity[key])!""}' ;
				</#list> 
				$('#totalCount_'+enityType).text(totalCount);
			</#list>
	    </#if>

	<#if (customEntities)??> 
		let exportableData;
		let exportableDataListMapNew;
		let exportObjNew;
		let systemConfigIncludeListNew=[];
		let customConfigExcludeListNew=[];
		<#list customEntities as entity> 
			<#list entity?keys as key> 
				<#outputformat "HTML">
		    		${key} = '${(entity[key])!""}' ;
		    	</#outputformat>
			</#list> 
			if(id != null && id != "") {
				exportableData = new ExportableData(enityType, id, name, versionID, 1);
				if(map.get(enityType) == null) {
					exportableDataListMapNew = new Map();
					exportObjNew = new ImportExportConfig(systemConfigIncludeListNew, customConfigExcludeListNew, null, null, enityType, 					exportableDataListMapNew);					
					map.set(enityType, exportObjNew);
					defaultMap.set(enityType, exportObjNew);
				}
				map.get(enityType).getExportableDataListMap().set(id, exportableData);
				defaultMap.get(enityType).getExportableDataListMap().set(id, exportableData);
			}
		</#list>
	</#if>
	var exportObj;
	let moduleName;
	let moduleID;
	let gridID;
	let colM;
	let moduleType;
	let systemConfigIncludeList=[];
	let customConfigExcludeList=[];
	let exportableDataListMap;
	<#if (moduleVOList)??> 
		<#list moduleVOList as moduleVO> 
			 moduleName="${moduleVO.moduleName}";
			 moduleID="${moduleVO.moduleId}";
			 gridID="${moduleVO.gridDetailsId!''}";
			 
			 moduleType = "${moduleVO.moduleType!''}";
			
			exportObj = map.get(moduleType);
			exportableDataListMap = new Map();
			if(exportObj == null || (exportObj != null && exportObj.getColM() == null)) {
				if(exportObj != null) {
					systemConfigIncludeList=exportObj.getSystemConfigIncludeList();
					if(systemConfigIncludeList == null) {
						systemConfigIncludeList=[];
					}

					customConfigExcludeList=exportObj.getCustomConfigExcludeList();
					if(customConfigExcludeList == null) {
						customConfigExcludeList=[];
					}

					exportableDataListMap = exportObj.getExportableDataListMap();
					if(exportableDataListMap == null) {
						exportableDataListMap = new Map();
					}
					
				}
				if(moduleType == "Grid") {
					openTab(event, gridID, moduleType);
				}
			}
    		
      	</#list>
	</#if>
});

</script>