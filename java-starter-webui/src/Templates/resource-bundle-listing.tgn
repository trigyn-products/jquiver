<head>
<link rel="stylesheet" href="${(contextPath)!''}/webjars/font-awesome/4.7.0/css/font-awesome.min.css" />
<link rel="stylesheet" href="${(contextPath)!''}/webjars/bootstrap/css/bootstrap.css" />
<link rel="stylesheet" href="${(contextPath)!''}/webjars/jquery-ui/1.12.1/jquery-ui.css"/>
<link rel="stylesheet" href="${(contextPath)!''}/webjars/jquery-ui/1.12.1/jquery-ui.theme.css" />
<script src="${(contextPath)!''}/webjars/jquery/3.5.1/jquery.min.js"></script>
<script src="${(contextPath)!''}/webjars/jquery-ui/1.12.1/jquery-ui.min.js"></script>
<script src="${(contextPath)!''}/webjars/1.0/pqGrid/pqgrid.min.js"></script>
<script src="${(contextPath)!''}/webjars/1.0/gridutils/gridutils.js"></script>      
<link rel="stylesheet" href="${(contextPath)!''}/webjars/1.0/pqGrid/pqgrid.min.css" />
<link rel="stylesheet" href="${(contextPath)!''}/webjars/1.0/css/starter.style.css" />
</head>

<div class="container">
        <div class="topband">
        <h2 class="title-cls-name float-left">${messageSource.getMessage('jws.multilingual')}</h2> 
        <div class="float-right">
		    ${messageSource.getMessage('jws.show')}<select id="typeSelect" class="typeSelectDropDown" onchange="changeType()" >   
                <option value="0">${messageSource.getMessage('jws.all')}</option>                   
                <option value="1" selected>${messageSource.getMessage('jws.custom')}</option>                   
                <option value="2">${messageSource.getMessage('jws.system')}</option>                 
            </select>
       
       <select id="languageOptions" onchange="changeLanguage()">
          <#list languageVOList as languageVO>
            <#if languageVO??>
              <#if (languageVO?api.getLanguageId())?? && languageVO?api.getLanguageId() == 1>
                <option value="${(languageVO?api.getLocaleId())!''}" selected>${languageVO?api.getLanguageName()}</option>
              <#else>
                <option value="${(languageVO?api.getLocaleId())!''}">${languageVO?api.getLanguageName()}</option>
              </#if>
            </#if>
          </#list>
        </select>
             <input name="addResourceBundle" class="btn btn-primary" value="${messageSource.getMessage('jws.addResourceBundle')}" type="button" onclick="submitForm(this)">
         <span onclick="backToWelcomePage();">
              <input id="backBtn" class="btn btn-secondary" name="backBtn" value="${messageSource.getMessage('jws.back')}" type="button">
         </span>    
        </div>
        
        <div class="clearfix"></div>        
        </div>
        
        <div id="divdbResourceBundleGrid"></div>

</div>


<form action="${(contextPath)!''}/cf/aerb" method="POST" id="formRbRedirect">
	<input type="hidden" id="resource-key" name="resource-key">
</form>
<form action="${(contextPath)!''}/cf/cmv" method="POST" id="revisionForm">
	<input type="hidden" id="entityName" name="entityName" value="jq_resource_bundle">
    <input type="hidden" id="entityId" name="entityId">
	<input type="hidden" id="moduleName" name="moduleName">
	<input type="hidden" id="moduleType" name="moduleType" value="resourceBundle">
	<input type="hidden" id="saveUrl" name="saveUrl" value="/cf/srbv">
	<input type="hidden" id="previousPageUrl" name="previousPageUrl" value="/cf/rb">
</form>

<script>
	contextPath = "${(contextPath)!''}";
	
	$(function () {
		$("#typeSelect").each(function () {
	        $(this).val($(this).find("option[selected]").val());
	    });
		let formElement = $("#formRbRedirect")[0].outerHTML;
		let formDataJson = JSON.stringify(formElement);
		sessionStorage.setItem("resource-bundle-manage-details", formDataJson);
		
	    let colM = [
	        { title: "${messageSource.getMessage('jws.resourceKey')}", width: 130, dataIndx: "resourceKey", align: "left", halign: "center", 
	        filter: { type: "textbox", condition: "contain", listeners: ["change"]} },
	        { title: "${messageSource.getMessage('jws.languageName')}", width: 100, dataIndx: "languageName", align: "left", halign: "center", 
	        filter: { type: "textbox", condition: "contain", listeners: ["change"]}  },
	        { title: "${messageSource.getMessage('jws.text')}", width: 160, dataIndx: "resourceBundleText", align: "left", halign: "center", 
	        filter: { type: "textbox", condition: "contain", listeners: ["change"]} },
	        { title: "${messageSource.getMessage('jws.action')}", maxWidth: 145, dataIndx: "action", align: "center", halign: "center", render: editDBResource, sortable: false}
	    ];
	    
	    let dataModel = {
        	url: contextPath+"/cf/pq-grid-data",
        	sortIndx: "resourceKey",
        	sortDir: "up",
    	};
	    let grid = $("#divdbResourceBundleGrid").grid({
	      gridId: "customResourceBundleListingGrid",
	      colModel: colM,
          dataModel: dataModel
	  	});
  	});
  	
	function changeType() {
        var type = $("#typeSelect").val();   
        let postData;
        if(type == 0) {
            postData = {gridId:"resourceBundleListingGrid"}
        } else if(type == 1){
            postData = {gridId:"customResourceBundleListingGrid"}
        } else {
            let typeCondition = "str_jws";       
   
            postData = {gridId:"resourceBundleListingGrid"
                    ,"cr_resourceKey":typeCondition
                    }
        }
        
        let gridNew = $( "#divdbResourceBundleGrid" ).pqGrid();
        gridNew.pqGrid( "option", "dataModel.postData", postData);
        gridNew.pqGrid( "refreshDataAndView" );  
    }
      
	function editDBResource(uiObject) {
		const resourceKey = uiObject.rowData.resourceKey;
		const revisionCount = uiObject.rowData.revisionCount;
		
		let actionElement;
		actionElement = '<span id="'+resourceKey+'" onclick="submitForm(this)" class= "grid_action_icons" title="${messageSource.getMessage('jws.editResourceBundle')}"><i class="fa fa-pencil" title=""></i></span>';
		if(revisionCount > 1){
			actionElement = actionElement + '<span id="'+resourceKey+'_entity" name="'+resourceKey+'" onclick="submitRevisionForm(this)" class= "grid_action_icons"><i class="fa fa-history"></i></span>'.toString();
		}else{
			actionElement = actionElement + '<span class= "grid_action_icons disable_cls"><i class="fa fa-history"></i></span>'.toString();
		}
		return actionElement;
	}
	
	function submitForm(element) {
	  $("#resource-key").val(element.id);
	  $("#formRbRedirect").submit();
	}
	
	function submitRevisionForm(sourceElement) {
		let selectedId = sourceElement.id.split("_")[0];
		let moduleName = $("#"+sourceElement.id).attr("name")
      	$("#entityId").val(selectedId);
		$("#moduleName").val(moduleName);
      	$("#revisionForm").submit();
    }
	
	let selectedLanguageId = getCookie("locale");
	if(selectedLanguageId !== ""){
		$("#languageOptions option[value="+selectedLanguageId+"]").prop("selected","selected");
	}
  
	function backToWelcomePage() {
        location.href = contextPath+"/cf/home";
	}
</script>