<head>
    <script src="${(contextPath)!''}/webjars/1.0/rich-autocomplete/jquery.richAutocomplete.min.js"></script>
    <script src="${(contextPath)!''}/webjars/1.0/typeahead/typeahead.js"></script>
    <link rel="stylesheet" href="${(contextPath)!''}/webjars/1.0/rich-autocomplete/richAutocomplete.min.css" />
</head>
<form action="${(contextPath)!''}/cf/sat" method="POST" id="userManagement" name="userManagement">
    <div class="container">
        <div class="cm-card">
            <div class="topband cm-card-header">
                <h2 class="title-cls-name float-left">User Management</h2>
                <div class="float-right">
                    <div class="addonbtnblock">
                    <button type="button" id="btnManagePermission" class="actionimgbtn lefrightspace">  <img src="${(contextPath)!''}/webjars/1.0/images/managepermision.svg" title="Manage Permissions"></button>

                  <button type="button" id="btnManageRoles" class="actionimgbtn lefrightspace">  <img src="${(contextPath)!''}/webjars/1.0/images/rolemangement.svg" title="Manage Roles"></button>

                   <button type="button" id="btnManageUser" class="actionimgbtn lefrightspace" ">  <img src="${(contextPath)!''}/webjars/1.0/images/usermanagment.svg" title="Manage Users"></button>

                    <button type="button" id="btnRestartServer" class="lefrightspace btn btn-primary">Restart Server</button>
                </div>
                </div>
                <div class="clearfix"></div>
            </div>
            <div class="col-3 float-left col-inner-form full-form-fields" id="authenticationHeader-0">
                <label for="isAuthenticationEnabled"><span class="asteriskmark">*</span>Authentication</label>
                <div class="onoffswitch">
                    <input type="checkbox" name="isAuthenticationEnabled" class="onoffswitch-checkbox" id="isAuthenticationEnabled" onchange="showAuthTypeDropDown(this);" />
                    <label class="onoffswitch-label" for="isAuthenticationEnabled">
                        <span class="onoffswitch-inner"></span>
                        <span class="onoffswitch-switch"></span>
                    </label>
                </div>
            </div>
            <!-- Modal -->
		  <div class="modal fade" id="adminModalDialog" role="dialog" tabindex="-1">
		    <div class="modal-dialog">
		
		      <!-- Modal content-->
		      <div class="modal-content">
		        <div class="modal-header">
		           <h5 class="ui-dialog-titlebar">${messageSource.getMessage('jws.addUser')}</h5>
		        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
		          <span aria-hidden="true">&times;</span>
		        </button>
		        </div>
		        <div class="modal-body">
		          <form role="form">
				  <div class="form-group">
		              <label for="firstName"> ${messageSource.getMessage('jws.firstName')} <span class="asteriskmark">*</span></label>
		              <input type="text" class="form-control" id="firstName" placeholder="${messageSource.getMessage('jws.firstName')}">
		            </div>
					 <div class="form-group">
		              <label for="lastName"> ${messageSource.getMessage('jws.lastName')}<span class="asteriskmark">*</span></label>
		              <input type="text" class="form-control" id="lastName" placeholder="${messageSource.getMessage('jws.lastName')}">
		            </div>
		            <div class="form-group">
		              <label for="email">${messageSource.getMessage('jws.email')} <span class="asteriskmark">*</span></label>
		              <input type="text" class="form-control" id="email" placeholder="${messageSource.getMessage('jws.email')}">
		            </div>            
		            
		          </form>
		        </div>
		       <div class="modal-footer">
		        <button type="button" class="btn btn-primary" onclick="saveUserDetails();">Save</button>
		        <button type="button" id="modalCloseBtn" onclick="closeModalBtn();" class="btn btn-secondary" data-dismiss="modal">Close</button>
		      </div>
		      </div>
		    </div>
		  </div>
		  <!-- Modal -->
            <div class="cm-card-body" id="authTypeDiv-1"></div>
            <div class="cm-card-footer">
                <div id="note" class="margin-t-10 clearfix">
                    <span class="pull-left"><i>Kindly restart your server to get your configuration working.</i></span>
                    <div class="btn-icons nomargin-right-cls pull-right">
                        <button id="btnAddSection" class="add_section btn btn-primary" type="button" onclick="addAuthenticationType('-1')" style=<#if isAuthenticationEnabled?? && !isAuthenticationEnabled>"display:none"</#if> class="add_section btn btn-primary"><i class="fa fa-plus"></i> Add </button>
                        <input type="submit" value="Save" class="btn btn-primary" />
                        <span onclick="backToHomePage();">
                            <input id="backBtn" class="btn btn-secondary" name="backBtn" value="Cancel" type="button" />
                        </span>
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>   
<script>
document.title = "User Management Configuration";
contextPath 	= "${contextPath}";
let oAuthClientDetails 	= [];
let selectedValues = [];
var onLoad = false;
var isAdminEmailExist = false;
$(document).ready(function () {

	selectedValues = [];
	onLoad = true;
	$("#isAuthenticationEnabled").attr("checked",${isAuthenticationEnabled?c});
	if(${isAuthenticationEnabled?c}){	
		<#if (activAuthDetails)?? && activAuthDetails?has_content>			
			<#list activAuthDetails as authType>			
				addAuthenticationType(${authType?api.getId()});
			</#list>		
		</#if>		
	}
	
	$(document).on("click", ".rem_section", function(e){	
		
		e.preventDefault();	
		let deleleteElement = $('<div id="deleteConfirmation"></div>');	
		var thisObj = $(this);
		var lastIndex = $(this).attr('id').split("-").pop();
		$("body").append(deleleteElement);	
		$("#deleteConfirmation").html("Are you sure you want to delete the changes ?");	
		$("#deleteConfirmation").dialog({	
			bgiframe		: true,	
			autoOpen		: true, 	
			modal		 	: true,	
			closeOnEscape 	: true,	
			draggable	 	: true,	
			resizable	 	: false,	
			title		 	: "Delete",	
			"class": 'btn btn-primary',
			position: {
				my: "center", at: "center"
			},
			buttons		 	: [{	
					text	: "Delete",
					"class": 'btn btn-primary',
					click	: function(){					
						$("#authTypeDiv-"+lastIndex).remove();
						$(this).dialog("destroy");	
						$(this).remove();	
					}	
	           	},{	
					text :"Cancel",
					"class":"btn btn-secondary",
					click: function() { 	
						$(this).dialog("destroy");	
						$(this).remove();	
					},	
				},	
					
	       ],	
	       open		: function( event, ui ) {	    		
		   	   $(".ui-dialog-titlebar")	
		   	    .find("button").removeClass("ui-dialog-titlebar-close").addClass("ui-button ui-corner-all ui-widget ui-button-icon-only ui-dialog-titlebar-close")	
		       .prepend('<span class="ui-button-icon ui-icon ui-icon-closethick"></span>').append('<span class="ui-button-icon-space"></span>');	
		   }		
		
		});
        	
    });
		
	$('#userManagement').submit(function(e) {       

		e.preventDefault();	
		var form 				= 	this;
		var formData 			= 	{};
		var authProperties		=	[];
		let errorFlag 		=	validateFormSubmit();		
		if(errorFlag == false){
			$.each(this, function(i, v){
				var input 			= $(v);
				var type 			= input.attr("type");
				var attrId 			= input.attr("id");
				var authTypes 		= 	[];
				if (typeof attrId != "undefined") {
					var val = '';
					switch (type) { 
					case 'checkbox': 
						val = $("input[name=" + attrId + "]").is(":checked");
						if(input.attr("name")=='isAuthenticationEnabled'){	
							formData[input.attr("name")] = val;
						}
						break;					
					default:						
						val = input.val();	
						
						var firstIndex = attrId.split("-");
						var index = firstIndex[1];
						if (typeof attrId === "undefined") {
							index = "";
						}	
						
						if(firstIndex[0]==='authType'){
							//console.log(val+' = attrId ='+attrId);
							let authPropsData = new Object();					
							let authProps = updateAuthenticationProperties(attrId, val);						
							authTypes.push(authProps);
							authPropsData.authTypes = authTypes;						
							authProperties.push(authPropsData);									
						}											
					}												
				}			
			});
			formData.authProperties	= authProperties;		
			var formJsonData = JSON.stringify(formData);
			//console.log('Form Data : '+formJsonData);
			$.ajax({
				type : "POST",				
				url : contextPath+"/cf/sat",
				dataType : 'json',
				data : formJsonData,
				contentType: "application/json",				
				success: function(data) {
					window.location.reload();
					selectedVerificationType = $("#verificationStep").val();
					showMessage("Information saved successfully", "success");
				}
			});		
		}		
				
	});	
	
	$('input[name="testLdapAuth"]').click(function(e){		
		e.preventDefault(); 
		testLdapAuth(this);
	});
	
	$('#adminModalDialog').on(".modal", function() {
        if(isAdminEmailExist == false) {
            $("#isAuthenticationEnabled").prop("checked",false).trigger("change");
        }else{
            $("#isAuthenticationEnabled").prop("checked",true).trigger("change");
        }
        
    });
	
	$('#btnRestartServer').on('click', function(e){
		e.preventDefault();	
		$.ajax({
			type : "GET",
			url : contextPath+"/cf/restart",
			data : { 
				
			},
			success: function(data) {
					location.href = contextPath+"/cf/home";
					var millisecondsToWait = 2000;
					setTimeout(function() {
						showMessage("Server is restarting.", "warn");
					}, millisecondsToWait);  
			},
			error: function(xhr, data){
				showMessage("Error while restarting the server.", "error");
			} 
        });
	});
	
	$('#btnManagePermission').on('click', function(){
		let enabled = checkAuthenticatedEnabled();	
         if(enabled){	
            location.href=contextPath+"/cf/mp";	
        }else{	
            showMessage("Not Authorized ", "error");	
        }
	});
	
	$('#btnManageRoles').on('click', function(){
		let enabled = checkAuthenticatedEnabled();	
        if(enabled){	
            location.href=contextPath+"/cf/rl";	
        }else{	
            showMessage("Not Authorized ", "error");	
        }
	});
	
	$('#btnManageUser').on('click', function(){
		let enabled = checkAuthenticatedEnabled();	
         if(enabled){	
            location.href=contextPath+"/cf/ul";	
        }else{	
            showMessage("Not Authorized ", "error");	
        }
	});
	
	$('#adminModalDialog').on("hide.bs.modal", function() {
        if(isAdminEmailExist == false) {
            $("#isAuthenticationEnabled").prop("checked",false).trigger("change");
        }else{
            $("#isAuthenticationEnabled").prop("checked",true).trigger("change");
        }
        
    });
		
	onLoad = false;
	selectedValues = [];
	// End of document ready
	
	if( $("input[name='enableDynamicForm']").length ){
		$("input[name='enableDynamicForm']").prop("checked",$("input[name='enableDynamicForm']").is(":checked")).trigger("change");
	}
});

function validateFormSubmit(){
	var errorFlag = false;		
	
	let isAuthChecked = $('#isAuthenticationEnabled').is(':checked');
	if($(".dividesection").length==0 && isAuthChecked){
		showMessage("No authentication is added !", "error");
		errorFlag = true;
		return errorFlag;
	}
	$('.asteriskmark').next('input').each(function(e){	
		if ($(this).val() === '' && $(this).is(":visible") == true) {				
			showMessage("Please fill all fields!", "error");
			$(this).focus();
			errorFlag = true;
			return errorFlag;			
		}
	});	
	if ($('input[name = regexPattern]').length) {
	let regexPattern = $('input[name = regexPattern]').val();
		try {
			new RegExp(regexPattern);
			 
		} catch (exeception) {
			showMessage("Invalid regular expression!", "error");
			$('input[name = regexPattern]').focus();
			errorFlag = true;
			return errorFlag;
		}
	}
	//Validate for -1 selected type.
	$('.asteriskmark').next('select').each(function(e){			
		if ($(this).val() === '' || $(this).val() === '-1') {				
			showMessage("Please select all fields!", "error");
			$(this).focus();
			errorFlag = true;
			return errorFlag;
		}
	});	
	if ($("#errors").length) {
		showMessage($("#errors").val()+" !", "error");
		$(this).focus();
		errorFlag = true;
		return errorFlag;
	}
	
	let validateRegisrations = [];
	if( $("input[name='registration-id']").length ){		
		const oAuthRegElements = document.querySelectorAll(`input[name="registration-id"]`);	
		oAuthRegElements.forEach(element => {			
			var oAuthRegClientVal = $("#"+element.id).val();			 
			var oAuthRegValArry = jQuery.inArray(oAuthRegClientVal, validateRegisrations);		 
			if (oAuthRegValArry == -1) {				
				validateRegisrations.push(oAuthRegClientVal);			
			}else{				
				var errorMessage = oAuthRegClientVal+" already exist."
				showMessage(errorMessage, "error");	
				errorFlag = true;
				return errorFlag;
			}			  		  
		});
	}	
	return errorFlag;
}

function isValidJSONString(str) {
    try {
        JSON.parse(str);
    } catch (e) {
        return false;
    }
    return errorFlag;
}

function getParsedJSONProperties(properties) {
    let parsedProperties = null;
	var isPropertyEncoded = false;
	if(properties!= undefined && properties != ""){	
		parsedProperties 	= JSON.parse(decodeURIComponent(properties));
	}

	parsedProperties = JSON.parse(parsedProperties);
	return parsedProperties;
}

function updatePropertyValue(val, authTypeId, elementId){	
	var lastIndex = authTypeId.split("-").pop();
	//console.log(authTypeId);
	let selectedValue 	= "";
	
	var element  = val;		
	if(val.type=="boolean"){	
		element.value = ($("#"+elementId).is(":checked")).toString();
	}
	//console.log(val.type+' Element ID = '+elementId);
	if(val.type=="select"){		
		selectedValue = $("#"+elementId).val();
		element.value = selectedValue;			
	}
	if(val.type=="text" || val.type=="hidden" || val.type=="password"){
		element.value = $("#"+elementId).val();			
	}			
	//console.log(' selectedValue '+selectedValue);				
	if(val.type=="multiselect"){	
		$.each(val, function(configKeys, configVals){						
			if(typeof configKeys != 'undefined' && typeof configVals != 'undefined' && configKeys=='dropDownData'){
				selectedValue = $("#"+elementId).val();
				$.each(configVals, function(dropDownDataKey, dropDownDataVal){					
					if(dropDownDataVal.value== selectedValue){
						dropDownDataVal.selected = "true";
						if(typeof dropDownDataKey != 'undefined' && typeof dropDownDataVal != 'undefined' ){
							$.each(dropDownDataVal.additionalDetails.additionalProperties, function(addPropKeys, addPropVals) {
								if(typeof addPropKeys != 'undefined' && typeof addPropVals != 'undefined' ){
									$.each(addPropVals, function(propertyKey, propertyValue) {
										if(typeof propertyKey != 'undefined' && typeof propertyValue != 'undefined' ){
											if(propertyValue.type=="text" || propertyValue.type=="hidden"){	
												var addPropEleId = propertyValue.name+'-'+addPropKeys+'-'+lastIndex;					
												propertyValue.value =$("#"+addPropEleId).val();											
											}										
										}										
									});								
								}								
							});
						}						
					}else{
						dropDownDataVal.selected = "false";
					}
				});									
			}						
		});
	}
	return element;
}

function updateAuthenticationProperties(attrId, authType) {			
	let properties = $("#"+attrId+" option[value="+$('#'+attrId).val()+"]").attr("properties");
	let parsedProperties = null;	
	if(properties!= undefined && properties != ""){
	  parsedProperties = getParsedJSONProperties(properties);
	}
	var lastIndex = attrId.split("-").pop();	
	if(typeof parsedProperties != 'undefined' && parsedProperties != null ){		
		$.each(parsedProperties, function(key,val){			
			var elementId = "";			
			if(typeof key != 'undefined' && key == 'authenticationType' && typeof val != 'undefined' && typeof attrId != 'undefined' && typeof val.name != 'undefined'){		
				elementId = val.name+'-'+lastIndex;
				//console.log('key = '+key);
				val.value = "true";
				val = updatePropertyValue(val, attrId, elementId);
			}
			if(typeof key != 'undefined' && key == 'authenticationDetail' 
				&& val.authenticationDetail != 'undefined'){				
				$.each(val, function(authDetailsKey, authDetailsVal){						
					if(typeof authDetailsKey != 'undefined' && authDetailsKey=='configurations'){						
						if(typeof authDetailsVal != 'undefined' ){						
							$.each(authDetailsVal, function(configKeys, configVals){								
								if(typeof configKeys != 'undefined' && typeof configVals != 'undefined' ){
									$.each(configVals, function(configKey, configVal){										
										if(typeof configKey != 'undefined' && typeof configVal != 'undefined' ){
											
											if(configVal.name=='oauth-client')
												elementId = configVal.name+'-'+lastIndex;	
											else
												elementId = configVal.name+'-'+configKeys+'-'+lastIndex;
											
											configVal = updatePropertyValue(configVal, attrId, elementId);								
											$.each(configVal.additionalDetails, function(addPropKeys, addPropVals) {
												if(typeof addPropKeys != 'undefined' && typeof addPropVals != 'undefined'){				
													$.each(addPropVals, function(addPropKey, addPropVal){
														if(typeof addPropKey != 'undefined' && typeof addPropVal != 'undefined'){
															$.each(addPropVal, function(propKey, propVal){
																if(typeof propKey != 'undefined' && typeof propVal != 'undefined'){
																	elementId = propVal.name+'-'+configKeys+'-'+lastIndex;
																	propVal = updatePropertyValue(propVal, attrId, elementId);	
																	
																}
															
															});
															
														}
														
													});	

												}
												
											});	
											
										}
									});	
																											
								}
							});							
						
						}
						
					}
					
				});
				
			}
					
		});	
		
		$("#"+attrId+" option[value="+$('#'+attrId).val()+"]").attr("properties", encodeURIComponent(JSON.stringify(parsedProperties)));        
		return parsedProperties;
	}	
}

function changeAuthentication(thisObj){	
	
	let authTypeId = thisObj.id;	
	
	let authTypeVal = $("#"+authTypeId).val();
	if(typeof thisObj == 'undefined' && thisObj == null && authTypeVal == '-1' 
	&& typeof authTypeId == 'undefined'){
		return false;
	}		
	var authTypeParentDivId = $(thisObj).closest('div').closest('.cm-card-body').attr('id');		
	var lastIndex = authTypeParentDivId.split("-").pop();		
	let props = $("#props-"+lastIndex);
	let authType = "authType-";
	let propertyElem = '';
	let parsedProperties = '';
	if(typeof thisObj != 'undefined' && thisObj != null ){
		authType = authTypeId;		
		props.html("");						
	}			
	var properties = $('option:selected', thisObj).attr('properties');
	if(properties!= undefined && properties != ""){
	  parsedProperties = getParsedJSONProperties(properties);
	}	
    if(authTypeVal==2){
        propertyElem += '<div  class="divDatabaseAuth">';
    }   

    if(authTypeVal==4){
        propertyElem += '<div  class="OutheAuth">';
    }
	if(onLoad == false){
		selectedValues = [];
	}
	if(typeof parsedProperties != 'undefined' && parsedProperties != null ){	
		
		$.each(parsedProperties, function(key,val){			
			if(typeof val != 'undefined' || val != null ){
				var elementId = lastIndex;
				if(typeof key != 'undefined'){
					if(typeof key != 'undefined' && key == 'authenticationType'){					
						if(typeof val != 'undefined'){
								
							var configurationType = val.configurationType;						
							if(configurationType=='single')	{	
									
								var isExist = validateSingleAuthType(val, authTypeId);							
								if(isExist){								
									var errorMessage = val.textValue+" already exist."
									showMessage(errorMessage, "error");	
									propertyElem += '<input id="errors" type="hidden" name="errors" value= "'+errorMessage+'">';		
									return false;
								}
							}										
							propertyElem += addInputFields(val, authTypeId, elementId);					
						}					
					}
				}				
				if(typeof key != 'undefined' && key == 'authenticationDetail'){					
					$.each(val, function(configKeys, configVals){
					
						$.each(configVals, function(idx, configurationVal) {
						
							if(typeof idx != 'undefined'){	
								
								elementId = idx+'-'+lastIndex;
								if(authTypeVal==3){								
									propertyElem += '<div  class="LDAPeAuth" id="divLdapPreAuth-'+elementId+'">';						
									propertyElem +='<button class="addldapbtn btn btn-primary" type="button" id="addLdapConnection-'+elementId+'" id="addLdapConnection" name="addLdapConnection" onclick="addLdapAuth(this)">Add LDAP</button>'
								}							
								if(authTypeVal==4){								
									propertyElem +='<button class="addldapbtn btn btn-primary" type="button" id="add-tenatnt-'+elementId+'" name="add-tenatnt" onclick="addOfficeTenant(this)" style="display:none;">Add Tenant</button>'	
								}
								if(typeof configurationVal != 'undefined'){						
									$.each(configurationVal, function(idxConf, configuration) {										
										 if(authTypeVal==3){
											propertyElem += '<div  class="'+configuration.name+'">';	
										 }else{
											 propertyElem += '<div  class="'+configuration.name+' blockdivcls row col-inner-form full-form-fields">';
										 }
											
										propertyElem = propertyElem + addInputFields(configuration, authTypeId, elementId);				
										if(typeof configuration.additionalDetails != 'undefined' && typeof configuration.additionalDetails.additionalProperties != 'undefined'){							$.each(configuration.additionalDetails.additionalProperties, function(additionalPropKeys, additionalPropVals){	
										
											$.each(additionalPropVals, function(additionalPropKey, additionalPropVal){					
												propertyElem += '<div class="childElement col-inner-form full-form-fields">';			
												if(typeof additionalPropVal != 'undefined'){											
													propertyElem = propertyElem + addInputFields(additionalPropVal, authTypeId, elementId);
												}
												propertyElem += '</div>';
											});
												
										});														
									}										
									propertyElem += '</div>';	

								});	
								}
								if(authTypeVal==3 || authTypeVal==4){	
									propertyElem += '</div>';
								}
								 
							}
						});						
					});						
				}												
			}		
		});
	}
	if(authTypeVal==2){
		propertyElem += '</div>';
	}
        
	$("#props-"+lastIndex).append(propertyElem);
	
	if( $("input[name='enableDynamicForm']").length ){
		$("input[name='enableDynamicForm']").prop("checked",$("input[name='enableDynamicForm']").is(":checked")).trigger("change");
	}
	if(!jQuery.isEmptyObject(selectedValues)){		
		$.each(selectedValues, function(key, val) {			
			if (typeof key != "undefined" && typeof val != "undefined") {
				if (typeof selectedValues[key].selval != "undefined") {					
				$("#"+selectedValues[key].id).val(selectedValues[key].selval).
				trigger("change");
				}			
			}		
		});
	}
}

function validateSingleAuthType(verifyVal, authTypeId){
	var returnResult = false;
	let validateValues = [];	
	const authTypes = document.querySelectorAll(`select[id^="authType-"]`);	
	authTypes.forEach(element => {		
		var authSelVal = $("#"+element.id).val();
		var properties = $("#"+element.id).find('option:selected').attr("properties");		
		let parsedProperties = '';
		if(properties!= undefined && properties != ""){
		  parsedProperties = getParsedJSONProperties(properties);
		}	
		$.each(parsedProperties, function(key,val){
			if(typeof val != 'undefined' || val != null ){					
				if(typeof key != 'undefined' && key == 'verificationType'){	
					if(typeof val != 'undefined'){
						var configurationType = val.configurationType;						
						if(configurationType=='single')	{
							var isExist = checkAuthValueExist(validateValues, authSelVal);				
							if(isExist){			
								returnResult = true;
								return false;
							}else{
								validateValues.push({id: element.id, selectedValue: authSelVal});	
							}
						}
					}
				}
			}
		});							
	});	
	return false;
}

function checkAuthValueExist(validateValues, selectedVal){ 
	var keyExist = false;	
	$.each(validateValues, function(key, val) {	
		if (typeof key != "undefined" && validateValues[key].selectedValue == selectedVal) {
			keyExist = true;			
			return false;
		}		
	});
	
	return keyExist;
}

function changeOauthClient(thisObj){
	var returnResult = false;
	let oauthClientId = thisObj.id;	
	let oAuthTypeVal = $("#"+oauthClientId).val();
	
	let oauthClientElement = '';
	let parsedProperties = '';
	if(typeof thisObj == 'undefined' || thisObj == null || oAuthTypeVal == '-1' 
	|| typeof oauthClientId == 'undefined'){
		return false;
	}		
	let props = $("#"+oauthClientId);
	let authType = "authType-";
	if(typeof thisObj != 'undefined' && thisObj != null ){
		authType = oauthClientId;		
		$(props).nextAll().remove();		
	}
	var lastIndex = authType.split("-").pop();
	var tempOAuthClientId = oauthClientId;
	var isExist = validateOAuthClients(oauthClientId, oAuthTypeVal);
	if(isExist && onLoad == false){
		let oAuthTypeName = $("#"+oauthClientId).find('option:selected').text();
		var errorMessage = oAuthTypeName+" already Exist";
		showMessage(errorMessage, "error");	
		oauthClientElement +='<input id="errors" type="hidden" name="errors" value="'+errorMessage+'">';								
		returnResult = true;			
	}else{
		
		var properties = $('option:selected', thisObj).attr('properties');
		if(properties!= undefined && properties != ""){
		  parsedProperties = getParsedJSONProperties(properties);
		}	
		let oauthClientGroupId = '';				
		if(typeof parsedProperties != 'undefined' && parsedProperties != null ){			
			$.each(parsedProperties, function(additionalkey, additionalVal){				
				if(typeof additionalVal != 'undefined' || additionalVal != null ){					
					if(typeof additionalkey != 'undefined' && typeof additionalVal != 'undefined'){
						var	num = additionalkey;
						var elementId = num+'-'+lastIndex;
						oauthClientElement +='<div class="oauthClientGroup" id="oauthClientGroup-'+elementId+'">';
						$.each(additionalVal, function(addPropkey, addPropVal){
							if(typeof addPropkey != 'undefined' && typeof addPropVal != 'undefined'){								
								oauthClientElement += addInputFields(addPropVal, authType, elementId);
							}								
						});
						oauthClientElement +='</div>';											
					}															
				}		
			});
			
		}
	}	
	if(oAuthTypeVal==2){
		$("#add-tenatnt-"+'0-'+lastIndex).css("display","block");
	}else{
		$("#add-tenatnt-"+'0-'+lastIndex).css("display","none");
	}
	
	var $target = $("#"+oauthClientId);
	$(oauthClientElement).insertAfter($target);	
	return returnResult;
}

function validateOAuthClients(oauthClientId, oAuthTypeVal){
	
	var keyExist = false;
	const oAuthElements = document.querySelectorAll(`select[id^="oauth-client-"]`);
	var oAuthSelectedClients = [];
	oAuthSelectedClients.push(oAuthTypeVal);
	oAuthElements.forEach(element => {
		if(element.id != oauthClientId){
			var oAuthSelClientVal = $("#"+element.id).val();
			var oAuthSelClientId = element.id;		 
			var oAuthValArry = jQuery.inArray(oAuthSelClientVal, oAuthSelectedClients);		 
			if (oAuthValArry == -1) {			
				oAuthSelectedClients.push(oAuthSelClientVal);			
			}else{
				keyExist = true;
				return false;
			}
		}	  		  
	});
	return keyExist;
}

function addAuthenticationType(selectedElement){	
	const lastElement = Array.from(document.querySelectorAll('.cm-card-body')).pop();	
	var lastIndex = lastElement.id.split("-").pop();	
	var ele_len = parseInt(lastIndex) + 1;
	var dropdown = '<div class="col-12 cm-card-body dividesection" id="authTypeDiv-'+ele_len+'"><div for="authType-'+ele_len+'"><div class="dropvalueblock"><span class="asteriskmark">*</span> <strong>Authentication Type </strong><select class="form-control" id="authType-'+ele_len+'" name="authType" onchange="changeAuthentication(this);" selected="'+selectedElement+'"><option value="-1">--Select--</option> ';	
	<#if (authenticationTypes)?? && authenticationTypes?has_content>
		<#list authenticationTypes as authType>			
		var jsonProperties ='${authType?api.getAuthenticationProperties()}';
		dropdown+='<option properties="'+encodeURIComponent(JSON.stringify(jsonProperties))+'" value="'+${authType?api.getId()}+'">${authType?api.getAuthenticationName()}</option>';	
		</#list>
	</#if>		
	dropdown += '</div></select><button class="removebtncls btn btn-danger rem_section" id="delAuthRow-'+ele_len+'"><i class="fa fa-trash-o" aria-hidden="true"></i></button></div><div class="row col-inner-form full-form-fields"><div id="props-'+ele_len+'" class="margin-t-25" style="width:100%;"></div></div></div>';
	var $target = $(".cm-card-body:last");
	$(dropdown).insertAfter($target);
	if(selectedElement != "-1"){
		$("#authType-"+ele_len).val(selectedElement).trigger("change");
	}
}

function addInputFields(propVal, authTypeId, elementId){ 
	let propertyElem = '';
	if(typeof propVal != 'undefined'){
		var lastIndex = authTypeId.split("-").pop();		
		elementId  = propVal.name+"-"+elementId;
		if(propVal.type == "boolean"){			
			
			var method = '';	
			if(propVal.name != 'enableCaptcha'){			
				method = 'changeChildElementStatus(this);';				
			}			
			
			if(propVal.value == "true"){						
				propertyElem = '<div class=" col-inner-form full-form-fields "><label for="' +propVal.name+'">'+propVal.textValue+'</label><div class="onoffswitch"><input type="checkbox" id="' +elementId+'" checked name="' +propVal.name+'" class="onoffswitch-checkbox"onchange="' +method+'"><label class="onoffswitch-label" for="' +elementId+'"><span class="onoffswitch-inner"></span><span class="onoffswitch-switch"></span></label></div></div>';
				
			}else{
				propertyElem = '<div class="marginright col-inner-form full-form-fields"><label for="' +propVal.name+'">'+propVal.textValue+'</label><div class="onoffswitch"><input type="checkbox" id="' +elementId+'" name="' +propVal.name+'" class="onoffswitch-checkbox"onchange="' +method+'"><label class="onoffswitch-label" for="' +elementId+'"><span class="onoffswitch-inner"></span><span class="onoffswitch-switch"></span></label></div></div>';				
			}
			
		}
		if(propVal.type == "select" ){
			var selectedValue = propVal.defaultValue;
			if(onLoad){
				selectedValue = propVal.value;
			}
			var strMethod = 'change-'+propVal.name;
			var method = $.camelCase(strMethod);			
			var dropdown = '<select class="form-control" id="'+elementId+'" name="'+propVal.name+'" onchange="'+method+'(this);" selected="'+selectedValue+'"><option value="-1">--Select--</option>';
			$.each(propVal.dropDownData, function(index, data) {	
				dropdown+='<option value="'+data.value+'">'+data.name+'</option>';
			});
			dropdown+='</select>'; 
			var label = '<label for="'+propVal.name+'">'
			if(propVal.required == true){
				label += '<span class="asteriskmark">*</span>';
			}        
			label += propVal.textValue;
			var br = '<br>';
			propertyElem += label+dropdown+'</label>';			
			if(typeof selectedValue != 'undefined' && selectedValue != "-1"){						
				selectedValues.push({id: elementId, name: propVal.name, selval: selectedValue});				
			}					
		}
		if(propVal.type == "multiselect" ){
		
			var selectedValue = propVal.defaultValue;			
			var strMethod = 'change-'+propVal.name;
			//var strClickMethod = 'click-'+propVal.name;
			var isAdded = false;
			
			var method = $.camelCase(strMethod);
				var additionalElements =	'';	
			var lastIndex = authTypeId.split("-").pop();
			elementId  = propVal.name+"-"+lastIndex;			
			var options = '<option value="-1">--Select--</option>';			
			$.each(propVal.dropDownData, function(index, data) {							
				if(onLoad && data.selected && typeof data.value != 'undefined' 
				&& isAdded == false){					
					var inQuery = checkSelectedValue(data.name, data.value);
					if(inQuery == false){
						selectedValue = data.value;
						selectedValues.push({id: elementId, name: data.name, selval: data.value});
						isAdded	= true;
					}										
				}
				if(typeof data.value != 'undefined' && onLoad == false && data.value != "-1"){
					selectedValues.push({id: elementId, name: data.name, selval: selectedValue});
				}
				var additionalDetails = [];
								
				$.each(data.additionalDetails.additionalProperties, function(idx, addDetailsData) {
					var addProperties = [];
					if(typeof addDetailsData != 'undefined'){						
						$.each(addDetailsData, function(idx, addionalData) {
							if(typeof addionalData != 'undefined'){								
								addProperties.push(addionalData);
							}
						});						
					}
					additionalDetails.push(addProperties);
				});				
				var jsonProperties= JSON.stringify(additionalDetails);				
				options+='<option properties="'+encodeURIComponent(JSON.stringify(jsonProperties))+'" value="'+data.value+'">'+data.name+'</option>';
			
			});			
			
			var dropdown = '<select class="form-control" id="'+elementId+'" name="'+propVal.name+'" onchange="'+method+'(this);" selected="'+selectedValue+'">'+options;
			dropdown+='</select>'; 
			var label = '<label for="'+propVal.name+'">'
			if(propVal.required == true){
				label += '<span class="asteriskmark">*</span>';
			}        
			label += propVal.textValue;
			var br = '<br>';			
			propertyElem += label+dropdown+'</label>';	
			
								
		}
		if(propVal.type == "text"){		
			var propertyValue = propVal.value;		
			var strName = propVal.name;			
			if(propVal.name == 'regexPattern'){				
				if(typeof propertyValue == 'undefined' || propertyValue == ""){
					propertyValue = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@#$%^&+=])[A-Za-z\\d@#$%^&+=]{6,20}$";					
				}
				propertyElem += ' <div  style="margin-left:10px;" class="blockdivcls row col-inner-form full-form-fields"><label for="' +elementId+'" style="white-space:nowrap"><span class="asteriskmark">*</span>' +propVal.textValue+'<input class="form-control" type="text" id="' +elementId +'" name="' +strName+'" value= "' +propertyValue+'"></label></div>';
			}else{

			propertyElem += ' <div  class="blockdivcls row col-inner-form full-form-fields"><label for="' +elementId+'" style="white-space:nowrap"><span class="asteriskmark">*</span>' +propVal.textValue+'<input class="form-control" type="text" id="' +elementId +'" name="' +strName+'" value= "' +propertyValue+'"></label></div>';
			}
		}
		if(propVal.type == "password"){			
			propertyElem += '<div class="blockdivcls row col-inner-form full-form-fields"><label for="' +elementId+'" style="white-space:nowrap"><span class="asteriskmark">*</span>' +propVal.textValue+'<input class="form-control" type="password" id="' +elementId +'" name="' +propVal.name+'" value= "' +propVal.value+'"></label></div>';
		}
		if(propVal.type == "button"){
			var clickMethod = $.camelCase(propVal.name);	
			if(propVal.name=='removeLdapAuth' || propVal.name=='remove-office-tenant'){				
				propertyElem +='<div class="blockdivcls row col-inner-form full-form-fields"><button type="button" id="' +elementId +'" class="btn btn-primary removeiconclsc" onclick="'+clickMethod+'(this);"><i class="fa fa-trash-o" aria-hidden="true"></i></button></div>'
			}else{
			propertyElem +='<div class="blockdivcls row col-inner-form full-form-fields"><button type="button" id="' +elementId +'" class="btn btn-primary" onclick="'+clickMethod+'(this);">' +propVal.textValue+'</button></div>'	
			}
		}
		if(propVal.type == "hidden"){			
			propertyElem += '<input class="form-control" type="hidden" id="'+elementId+'" name="' +propVal.name+'" value= "' +propVal.value+'">';			
		}
		if(propVal.type == "formAutocomplete"){			
			propertyElem += '<div id="dynamicFormDiv"><label for="dynamicFormName" style="white-space:nowrap"><span class="asteriskmark">*</span>Form Name</label><div class="search-cover"><input type="text" id="dynamicFormName" class="form-control"><i class="fa fa-search" aria-hidden="true"></i></div><input type="hidden" id="formName" value= "" name="formName"><input type="hidden" id="formId" value= "" name="formId" ></div>';
			if(propVal.formId !== undefined){
				$("#formId").val(data.formId);
				$("#formName").val(data.formName);
				$("#dynamicFormName").val(data.formName);
				initFormAutocomplete(propVal);
			}
			
			
		}
		if(propVal.type == "templateAutocomplete"){			
			propertyElem += '<div id="templateDiv"><label for="templateNameAC" style="white-space:nowrap"><span class="asteriskmark">*</span>Template Name</label><div class="search-cover"><input type="text" id="templateNameAC" class="form-control"><i class="fa fa-search" aria-hidden="true"></i></div><input type="hidden" id="templateName" value= "" name="templateName"><input type="hidden" id="templateId" value= "" name="templateId" ></div>';
			var inputId = "user-profile-template-details";
			$.ajax({
				type : "GET",
				url : contextPath+"/cf/gif",
				data : { 
					inputId:inputId,
				},
				success: function(templateData) {
					if(templateData.templateId !== undefined){
						$("#templateId").val(templateData.templateId);
						$("#templateName").val(templateData.templateName);
						$("#templateNameAC").val(templateData.templateName);
					}
					initTemplateAutocomplete(templateData);
				}
			});
			let isChecked = $('#enableDynamicForm').is(':checked');
			if(isChecked){			
				$("#dynamicFormDiv").closest('div.row').find('.childElement').show();
				$("#dynamicFormDiv").show();
				$("#templateDiv").show();
			}else{					
				$("#dynamicFormDiv").hide();
				$("#templateDiv").hide();
			}
		}
	}	
	return propertyElem;
}

function checkSelectedValue(elementName, selectedVal){ 
	var keyExist = false;	
	$.each(selectedValues, function(key, val) {		
		if (typeof key != "undefined" && selectedValues[key].name == elementName && selectedValues[key].selval == selectedVal) {
			keyExist = true;
			
		}		
	});
	return keyExist;
}

function changeVerificationType(thisObj){
	let verificationType = $("#"+thisObj.id).val();
	var lastIndex = thisObj.id.split("-").pop();
	var elementLastIndex = '-0-'+lastIndex;
	if(onLoad == true){
		if($("#enableRegex"+elementLastIndex).is(":checked")){ 
			$("#enableRegex"+elementLastIndex).prop("checked",true).trigger("change");
			$("#passwordExpiry"+elementLastIndex).closest('.childElement').show();
		}else{
			$("#enableRegex"+elementLastIndex).prop("checked",false).trigger("change");			
			$("#passwordExpiry"+elementLastIndex).closest('.childElement').hide();
		}
	}else{
		if(verificationType == 2 || verificationType == 0){		
			$("#enableRegex"+elementLastIndex).prop("checked",false).trigger("change");
			$("#enableRegex"+elementLastIndex).prop("disabled",true);			
			$("#passwordExpiry"+elementLastIndex).closest('.childElement').hide();
		}else{		
			$("#enableRegex"+elementLastIndex).prop("checked",true).trigger("change");
			$("#enableRegex"+elementLastIndex).prop("disabled",false); 
			$("#passwordExpiry"+elementLastIndex).closest('.childElement').show();
		}
	}
	
}

function changeChildElementStatus(thisObj){
	if($(thisObj).is(":checked")){
		$(thisObj).closest('div.row').find('.childElement').show();	
	}
	else{		
		$(thisObj).closest('div.row').find('.childElement').hide();		
	}		
}

function backToHomePage(){ 
 location.href = contextPath+"/cf/home";
}

function showAuthTypeDropDown (thisObj){
	if($(thisObj).is(":checked")) {
		var showAuthDropDown = false;
		var emailExist = checkAdminEmailExistInPm();
		if(emailExist == undefined || emailExist === '') {
			$("#adminModalDialog").modal({
                keyboard: false
            });
		}else{
			showAuthDropDown = true;
		}
		if(showAuthDropDown){
			addAuthenticationType('-1');
			$("#btnAddSection").show();
		}
		
	}
	else {
		$('div[class*=cm-card-body]').each(function(seq, element){
			if(element.id != 'authTypeDiv-1'){
				$(this).remove();
			}		  
		});
		$("#btnAddSection").hide();		
	}
}

function initFormAutocomplete(formDetails){
	let savedForm = new Object();
	savedForm.targetTypeId = formDetails.formId;
	savedForm.targetTypeName = formDetails.formName;
	autocomplete = $('#dynamicFormName').autocomplete({
		autocompleteId: "dynamicForms",
		render: function(item) {
			var renderStr ='';
			if(item.emptyMsg == undefined || item.emptyMsg === '')
			{
				renderStr = '<p>'+item.targetTypeName+'</p>';
			}
			else
			{
				renderStr = item.emptyMsg;	
			}	    				        
			return renderStr;
		},
		additionalParamaters: {languageId: 1},
		extractText: function(item) {
			return item.targetTypeName;
		},
		select: function(item) {
			$("#dynamicFormName").blur();
			$("#formId").val(item.targetTypeId);
			$("#formName").val(item.targetTypeName);
		}, 	
	}, savedForm);

}
  
function initTemplateAutocomplete(templateDetails){
	let savedTemplate = new Object();
	savedTemplate.targetTypeId = templateDetails.templateId;
	savedTemplate.targetTypeName = templateDetails.templateName;
	autocomplete = $('#templateNameAC').autocomplete({
		autocompleteId: "templateListing",
		render: function(item) {
			var renderStr ='';
			if(item.emptyMsg == undefined || item.emptyMsg === '')
			{
				renderStr = '<p>'+item.targetTypeName+'</p>';
			}
			else
			{
				renderStr = item.emptyMsg;	
			}	    				        
			return renderStr;
		},
		additionalParamaters: {languageId: 1},
		extractText: function(item) {
			return item.targetTypeName;
		},
		select: function(item) {
			$("#templateNameAC").blur();
			$("#templateId").val(item.targetTypeId);
			$("#templateName").val(item.targetTypeName);
		}, 	
	}, savedTemplate);

}

function checkAuthenticatedEnabled(){	
	let enabled = false;	
	$.ajax({	
		type : "GET",	
		url : contextPath+"/cf/cae",	
		 async: false,	
		data : { 	
				
		},	
		success: function(data) {	
			enabled = data;               	
		}	
	});	
	return enabled;  	
}



function addOfficeTenant(thisObj){	

	let oauthClientId = '';	
	var buttonId = thisObj.id;
	var authTypeId = buttonId.split("-").pop();			
	var	num = $("#authTypeDiv-"+authTypeId+' div.oauthClientGroup').length;
	var authType = 	"authType-"+authTypeId;
	let oAuthTypeVal = $("#oauth-client-"+authTypeId).val();
	let oauthClientElement = '';
	let parsedProperties = '';
	let addionalProperties = '';
	var properties = $("#oauth-client-"+authTypeId).find('option:selected').attr('properties');
	
	if(properties!= undefined && properties != ""){
	  parsedProperties = getParsedJSONProperties(properties);
	}	
	let additionalProperties = [];	
	if(typeof parsedProperties != 'undefined' && parsedProperties != null ){		
		elementId = num+'-'+authTypeId;		
		oauthClientElement ='<div class="oauthClientGroup" id="oauthClientGroup-' +elementId +'">';	
		$.each(parsedProperties, function(key, val){										
			if(typeof key != 'undefined' && typeof val != 'undefined'){
				let addProperties = [];
				$.each(val, function(addPropKey, addPropVal){
					if(typeof addPropKey != 'undefined' && typeof addPropVal != 'undefined'){						
						addProperties.push(addPropVal);						
						oauthClientElement += addInputFields(addPropVal, authType, elementId);	
					}
				});
				additionalProperties.push(addProperties);
				return false;			
			}		
		});						
	}
	
	oauthClientElement +='</div>';
	var prevEleIdx = num-1;
	var inserAfterElementId = "oauthClientGroup-"+prevEleIdx+'-'+authTypeId;
	var $target = $("#"+inserAfterElementId);
	$(oauthClientElement).insertAfter($target);	

	var jsonAdditionalDetailsProperties = updateOfficeTenantProperties(parsedProperties, additionalProperties);	
	let oAuthParsedProperties = '';

	var oAuthProperties = $("#authType-"+authTypeId).find('option:selected').attr('properties');
	if(oAuthProperties!= undefined && oAuthProperties != ""){
	  oAuthParsedProperties = getParsedJSONProperties(oAuthProperties);
	}

	if(typeof oAuthParsedProperties != 'undefined' && oAuthParsedProperties != null ){	
		$.each(oAuthParsedProperties, function(key,val){			
			$.each(val.configurations, function(authDetailsKey, authDetailsVal){				
				if(typeof authDetailsVal != 'undefined'){					
					$.each(authDetailsVal, function(dropDataKey, dropDataVal){
						
						if(typeof dropDataVal != 'undefined'){							
							$.each(dropDataVal.dropDownData, function(addPropsKey, addPropsVal){								
								if(typeof addPropsKey != 'undefined' && typeof addPropsVal != 'undefined' && addPropsVal.type=="office365"){
								addPropsVal.additionalDetails.additionalProperties= jsonAdditionalDetailsProperties;					
								}								
							});							
						}						
					});																
				}
			});
		});	
	}	
	var jsonProperties= JSON.stringify(oAuthParsedProperties);
	var oAuthClntId = "authType-"+authTypeId;
	$("#"+oAuthClntId+" option[value="+$('#'+oAuthClntId).val()+"]").attr("properties", encodeURIComponent(JSON.stringify(jsonProperties)));
				
}

function updateOfficeTenantProperties(parsedProperties, additionalProperties){
				
	if(typeof parsedProperties != 'undefined' && parsedProperties != null ){	
		$.each(parsedProperties, function(key, val){			
			if(typeof key != 'undefined' && typeof val != 'undefined'){	
				let addProperties = [];
				$.each(val, function(addPropKey, addPropVal){
					if(typeof addPropKey != 'undefined' && typeof addPropVal != 'undefined'){						
						addProperties.push(addPropVal);
					}
				});
				additionalProperties.push(addProperties);
			}						
		});
	}
	return additionalProperties;

}

function removeOfficeTenant(thisObj){	
	var buttonId = thisObj.id;
	let deleleteElement = $('<div id="deleteConfirmation"></div>');	
	var thisObj = $(this);
	$("body").append(deleleteElement);	
	$("#deleteConfirmation").html("Are you sure you want to delete the changes ?");	
	$("#deleteConfirmation").dialog({	
		bgiframe		: true,	
		autoOpen		: true, 	
		modal		 	: true,
			
		closeOnEscape 	: true,	
		draggable	 : true,	
		resizable	 : false,	
		title		 : "Delete",
		dialogClass	: "popup-center",
		position: {
				my: "center", at: "center"
		},
		buttons		 : [{	
				text	: "Delete",	
				"class": 'btn btn-primary',
				click	: function(){						
					$("#"+buttonId).closest('.oauthClientGroup').remove();												
					$(this).dialog("destroy");	
					$(this).remove();
				}	
			},{	
				text :"Cancel",
				"class":"btn btn-secondary",
				click: function() { 	
					$(this).dialog("destroy");	
					$(this).remove();	
				},	
			},	
	   ],	
	   open		: function( event, ui ) {	    		
		   $(".ui-dialog-titlebar")	
			.find("button").removeClass("ui-dialog-titlebar-close").addClass("ui-button ui-corner-all ui-widget ui-button-icon-only ui-dialog-titlebar-close")	
		   .prepend('<span class="ui-button-icon ui-icon ui-icon-closethick"></span>').append('<span class="ui-button-icon-space"></span>');	
	   }		
	
	});
}
function testLdapAuth(thisObj){

	const str = thisObj.id;
    const [first, ...rest] = str.split('-');
    const lastIndex = rest.join('-');
	let formObj = new Object();	
	formObj["ldapAddress"] = $("#ldapAddress-"+lastIndex).val();
	formObj["ldapPort"] = $("#ldapPort-"+lastIndex).val();
	formObj["ldapSecurityType"] = $("#ldapSecurityType-"+lastIndex).val();
	formObj["basedn"] = $("#basedn-"+lastIndex).val();
	formObj["userdn"] = $("#userdn-"+lastIndex).val();
	formObj["adminUserName"] = $("#adminUserName-"+lastIndex).val();
	formObj["adminPassword"] = $("#adminPassword-"+lastIndex).val();
	formObj["loginAttribute"] = $("#loginAttribute-"+lastIndex).val();
	$.ajax({
		type : "POST",
		url : contextPath+"/cf/checkLdapConnection",
		data : formObj,
		success: function(data) {
			if(data !== undefined){				
				if(data == false){					
					showMessage("Connection refused. Please contact administrator!", "error");
				}else{
					showMessage("Connection is successful!", "success");
				}				
				return false;
			}			
		}
	});
	return true;	
}

function addLdapAuth(thisObj){ 
	
	var lastIndex = thisObj.id.split("-").pop();
	var authTypeId = "authType-"+lastIndex;
	var	num = $("#props-"+lastIndex+' div.LDAPeAuth').length;
	var elementId = num+'-'+lastIndex;
	var propertyElem  = '<div  class="LDAPeAuth" id="divLdapPreAuth-'+elementId+'">';	 
	var properties = $("#"+authTypeId).find('option:selected').attr('properties');
	let addLdapConfigurations = [];	
	let newLdapConfigurations = [];	
	if(properties!= undefined && properties != ""){		
	  parsedProperties = getParsedJSONProperties(properties);
	}
	
	if(typeof parsedProperties != 'undefined' && parsedProperties != null ){		
		$.each(parsedProperties, function(key,val){	
			
			if(typeof val != 'undefined' || val != null ){					
				if(typeof key != 'undefined' && key == 'authenticationType'){	
					if(typeof val != 'undefined'){
						var configurationType = val.configurationType;						
						if(configurationType=='single')	{							
							var isExist = validateSingleAuthType(val, authTypeId);							
							if(isExist){
								var errorMessage = val.textValue+" already exist."
								showMessage(errorMessage, "error");	
								propertyElem += '<input id="errors" type="hidden" name="errors" value= "'+errorMessage+'">';						
								return false;
							}
						}
						if(val.type=='text' || val.type=='password'){
							val.value = ''
						}
						//var ldapElementId = val.name+'-'+elementId;
						propertyElem += addInputFields(val, authTypeId, elementId);					
					}					
				}					
				if(typeof key != 'undefined' && key == 'authenticationDetail'){	
					
					$.each(val, function(configKeys, configVals){
						if(typeof configKeys != 'undefined' && typeof configVals != 'undefined'){
							
														
							$.each(configVals, function(idx, configurationVal) {		
								if(typeof configurationVal != 'undefined'){
									$.each(configurationVal, function(idx, configuration) {							
										propertyElem += '<div  class="'+configuration.name+'selectdivc ">';
										if(configuration.type=='text' || configuration.type=='password'){
											configuration.value = ''
										}
										//elementId = configKeys+'-'+lastIndex;
										propertyElem = propertyElem + addInputFields(configuration, authTypeId, elementId);						
										if(typeof configuration.additionalDetails != 'undefined' && typeof configuration.additionalDetails.additionalProperties != 'undefined'){				$.each(configuration.additionalDetails.additionalProperties, function(additionalPropKeys, additionalPropVals){	
												$.each(additionalPropVals, function(additionalPropKey, additionalPropVal){	
													//elementId = additionalPropKey+'-'+lastIndex;
													propertyElem += '<div class="childElement col-inner-form full-form-fields">';				
													if(typeof additionalPropVal != 'undefined'){
														if(additionalPropVal.type=='text' || additionalPropVal.type=='password'){
															additionalPropVal.value = ''
														}
														propertyElem = propertyElem + addInputFields(additionalPropVal, authTypeId, elementId);
													}
													propertyElem += '</div>';
												});											
											});														
										}										
										propertyElem += '</div>';										
									});									
								}								
								addLdapConfigurations.push(configurationVal);
								return false;
							});
						}												
					});						
				}												
			}		
		});
	}
	
	propertyElem += '</div>';
	var prevEleId = num-1;
	var inserAfterElementId = "divLdapPreAuth-"+prevEleId+'-'+lastIndex;
	var $target = $("#"+inserAfterElementId);
	$(propertyElem).insertAfter($target);
	
	if(typeof parsedProperties != 'undefined' && parsedProperties != null ){
		$.each(parsedProperties, function(key,val){	
			if(typeof key != 'undefined' && key == 'authenticationDetail'){
				$.each(val, function(configKeys, configVals){
					if(typeof configKeys != 'undefined' && typeof configVals != 'undefined'){
						$.each(configVals, function(idx, configurationVal) {
							if(typeof configurationVal != 'undefined'){
								if(typeof configurationVal != 'undefined'){
									addLdapConfigurations.push(configurationVal);
								}
							}
						});
						
					}
				});
			}
		});
	}
	
	//var newConfigurations = JSON.stringify(addLdapConfigurations);
	//console.log('NEW LDAP Data : '+newConfigurations);
	
	if(typeof parsedProperties != 'undefined' && parsedProperties != null ){
		$.each(parsedProperties, function(key,val){	
			if(typeof key != 'undefined' && key == 'authenticationDetail'){
				val.configurations = addLdapConfigurations;
			}
		});
	}
		
	var jsonProperties= JSON.stringify(parsedProperties);
	
	$("#"+authTypeId+" option[value="+$('#'+authTypeId).val()+"]").attr("properties", encodeURIComponent(JSON.stringify(jsonProperties)));

}

function removeLdapAuth (thisObj){ 
	
		let deleleteElement = $('<div id="deleteLdapConfirmation"></div>');		
		$("body").append(deleleteElement);	
		$("#deleteLdapConfirmation").html("Are you sure you want to delete the changes ?");	
		$("#deleteLdapConfirmation").dialog({	
			bgiframe		: true,	
			autoOpen		: true, 	
			modal		 	: true,	
			closeOnEscape 	: true,	
			draggable	 	: true,	
			resizable	 	: false,	
			title		 	: "Delete",	
			dialogClass		: "popup-center",
			position: {
				my: "center", at: "center"
			},
			buttons		 	: [{	
					text	: "Delete",
					"class": 'btn btn-primary',
					click	: function(){
						const [first, ...rest] = thisObj.id.split('-');
						const remainderLastIdx = rest.join('-');					
						var remDivId = "divLdapPreAuth-"+remainderLastIdx;						
						$("#"+remDivId).remove(); 					
						$(this).dialog("destroy");	
						$(this).remove();	
					}	
	           	},{	
					text :"Cancel",	
					"class":"btn btn-secondary",
					click: function() { 	
						$(this).dialog("destroy");	
						$(this).remove();	
					},	
				},	
					
	       ],	
	       open		: function( event, ui ) {	    		
		   	   $(".ui-dialog-titlebar")	
		   	    .find("button").removeClass("ui-dialog-titlebar-close").addClass("ui-button ui-corner-all ui-widget ui-button-icon-only ui-dialog-titlebar-close")	
		       .prepend('<span class="ui-button-icon ui-icon ui-icon-closethick"></span>').append('<span class="ui-button-icon-space"></span>');	
		   }		
		
		});

}


function changeLdapSearchScope (thisObj){ 

}

function changePasswordExpiry(thisObj){	
}

function changeLdapSecurityType(thisObj){
	
}

function closeModalBtn(thisObj){
	var emailExist = checkAdminEmailExistInPm();
	if(emailExist == undefined || emailExist === '') {
		$("#isAuthenticationEnabled").prop("checked",false).trigger("change");
	}	
}

function validateUserDetails(){
	let specials = /[A-Za-z 0-9]/g;
	
	var firstName = $("#firstName").val().trim();
	if(firstName==''){
		showMessage("First name is required.", "warn");
		$("#firstName").focus();
		return false;
	}
	var lastName = $("#lastName").val().trim();
	if(lastName==''){
		showMessage("Last name is required.", "warn");
		$("#lastName").focus();
		return false;
	}
	var email  = $("#email").val().trim();
	if(email==''){
		showMessage("Email is required.", "warn");
		$("#email").focus();
		return false;
	}
	
	if(specials.test(firstName)){
		showMessage("Invalid First Name", "warn");
    	$("#firstName").focus();
    	return false;
	}
	
	if(specials.test(lastName)){
		showMessage("Invalid Last Name", "warn");
    	$("#lastName").focus();
    	return false;
	}
	
	return true;
}

function saveUserDetails(){ 
	var isFormValid = validateUserDetails();
	if(isFormValid){
		let userData = new Object();
	userData.firstName = $("#firstName").val().trim();
	userData.lastName = $("#lastName").val().trim();
	userData.email = $("#email").val().trim();
	userData.userId = '';
	userData.roleIds = ['2ace542e-0c63-11eb-9cf5-f48e38ab9348','ae6465b3-097f-11eb-9a16-f48e38ab9348'];
	userData.forcePasswordChange = 1;
	userData.isProfilePage = false;
	userData.isSendMail = false;
	userData.isActive = 1;	
	let isEdit = 1;
	saveAdminData();		
	userData.userId = checkEmailIdExist();
	
	$.ajax({
	  type: "POST",
	  url: contextPath + "/cf/surap",
	  data : {
		 userData : JSON.stringify(userData),
		 isEdit : isEdit
	   },
	  success: function(data) {
		updatePropertyDetails();
		showMessage("Information saved successfully", "success");
		isAdminEmailExist = true;
		$('#adminModalDialog').modal('hide');
	  },
	  error: function(data) {
		showMessage("Error occurred while saving details", "error");
	  }, 
	});
	}
	
}
	
function saveAdminData (){

	let userId = checkEmailIdExist();
	if(userId != "") {
		showMessage("User email id already exists", "error");
		return;
	}
	let userData = new Object();
	
	userData.email = $("#email").val();
	userData.userId = "";
	userData.firstName =  $("#firstName").val().trim();
	userData.lastName =  $("#lastName").val().trim(); 
	userData.isProfilePage = false;	
	userData.roleIds = ['2ace542e-0c63-11eb-9cf5-f48e38ab9348'];
	userData.forcePasswordChange = 1;
	userData.isSendMail = false;
	userData.isActive = 1;
	let serializedForm = $("#addEditUser").serializeArray();   
	userData.formData = JSON.stringify(serializedForm.formatSerializedArray());
	$.ajax({
		type : "POST",
		contentType : "application/json",
		async: false,
		url : contextPath+"/cf/sud",			
		data : JSON.stringify(userData),
		success: function(data) {
			return true;
		},
		error: function(data) {
			showMessage("Error occurred while saving details", "error");
			return false;
		},
	});
	return true;

}
	
function checkEmailIdExist(){
	var userId = "";
	$.ajax({
			type : "GET",
			async: false,
			url : contextPath+"/api/validate-user-email-get-user-id",
			data : {
				email:  $("#email").val().trim()
			},
			success : function(data) {					
				userId = data[0].userId;                                        
			}
		});

	return userId;
}
	
function checkAdminEmailExistInPm(){
	var adminEmail = "";
	$.ajax({
			type : "GET",
			async: false,
			url : contextPath+"/api/checkAdminEmailExist",
			success : function(data) {
				if (data && data.length != 0) {
					adminEmail = data[0].adminEmail;
				}
														
			}
		});

	return adminEmail;
}
	
function updatePropertyDetails(){
	let  propertyName = "adminEmailId";
	let  propertyValue = "";
	if($("#email").val().trim() != "") {
	$.ajax({
			type : "GET",
			async: false,
			url : contextPath+"/cf/spm",
			data : {
				propertyValue:  $("#email").val().trim(),
				propertyName:propertyName,
				ownerId:"system",
				ownerType:"system"
			},
			success : function(data) {
				return true;
			},
			error: function(data) {
				showMessage("Error occurred while saving details", "error");
				return false;
			}
		});
	}
  return true; 
}
</script>