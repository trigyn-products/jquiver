<head>
<script src="${(contextPath)!''}/webjars/1.0/rich-autocomplete/jquery.richAutocomplete.min.js"></script>
<script src="${(contextPath)!''}/webjars/1.0/typeahead/typeahead.js"></script>
<link rel="stylesheet" href="${(contextPath)!''}/webjars/1.0/rich-autocomplete/richAutocomplete.min.css" />

</head>
        <div class="row"> 
            <div class="col-2">
                <div class="fav-image" data-hover="&#9733" onclick="addRemoveFav()">&#9734;</div>         
            </div>

            <div class="col-3"> 
                ${messageSource.getMessage('jws.show')}:<select id="typeSelect" class="typeSelectDropDown" onchange="changeType()">   
                <option value="0">${messageSource.getMessage('jws.all')}</option>                   
                <option value="1" selected>${messageSource.getMessage('jws.custom')}</option>                   
                <option value="2">${messageSource.getMessage('jws.system')}</option>
                <option value="3">${messageSource.getMessage('jws.favourite')}</option>                 
            </select>
         </div>

             <div class="col-4 float-right" style="width:300px;">
                <div class="col-inner-form full-form-fields" >
                    <div class="search-cover">
                    	<input class="form-control" id="quickJumpAutocomplete" type="text" >
                    	<i class="fa fa-search" aria-hidden="true"></i>
                    </div>
                </div>
            </div> 
       
        </div>
<script>
contextPath = "${(contextPath)!''}";	


	$(function () {
        //for implementing QuickJump Autocomplete..
        autocompleteQJ = $( "#quickJumpAutocomplete" ).autocomplete({
        autocompleteId: "quickJumpAutocomplete",
        prefetch : true,
        enableClearText: true,
        additionalParamaters: {type_id: $('#typeSelect').val()},
        render: function(item) {
            var renderStr = "";
            imageName = getImageNameByType(item.entityType);
            /**Written for preventing Cross Site Scripting*/
            var entityName = item.entityName;
            var encodedName = $('<div />').text(entityName).html();
            /**Ends Here*/
        if(item.emptyMsg == undefined || item.emptyMsg === ""){
            renderStr = '<div class="user-favorite-img-cls"><img src="${(contextPath)!''}/webjars/1.0/images/'+imageName+'.svg"><p>'+encodedName+'</p></div>';
        } else {
            renderStr = item.emptyMsg;	
            }
            return renderStr;
            },
            extractText: function(item) {
                return item.entityName;
            },
        select: function(item) {
            submitForm(item);
            $("#quickJumpAutocomplete").blur();
            /**Added for clearing the Autocomplete Value after selecting*/
            $('#quickJumpAutocomplete').val('');
        }, 
                
            });
    });
    
    function addRemoveFav(){
	    $(".fav-image").toggleClass("fav-imageFill");
        let isChecked = $(".fav-image").hasClass("fav-imageFill");
        let entityIdVar = "${innerTemplateObj.entityId}";
        let entityNameVar = "${innerTemplateObj.entityName}";
        $.ajax({
			url:contextPath+"/api/user-favorite-entity",
			type:"POST",
	        data:{
                entityType: "${innerTemplateObj.entityType}",
                entityId: $("#"+entityIdVar).val().trim(),
                entityName: $("#"+entityNameVar).val().trim(),
                isChecked: isChecked,
	        }, 
			success : function(data) {
				autocompleteQJ.resetAutocomplete();
				showMessage("Successfully updated favorite", "success");
			},
			error : function(xhr, error){
				showMessage("Error occurred while updating favorite", "error");
			}, 
	    }); 
	}

    function getSavedEntity(){
        let entityIdVar = "${innerTemplateObj.entityId}";
        let entityNameVar = "${innerTemplateObj.entityName}";
        $.ajax({
			url:contextPath+"/api/user-favorite-entity-by-type",
			type:"POST",
	        data:{
                entityType: "${innerTemplateObj.entityType}",
                entityId: $("#"+entityIdVar).val().trim(),
                entityName: $("#"+entityNameVar).val().trim(),
	        }, 
			success : function(isFavorite) {
                if(isFavorite.trim() == 1){
                    $(".fav-image").addClass("fav-imageFill");
                   }
			},
			error : function(xhr, error){
			  showMessage("Error occurred while updating favorite", "error");
			}, 
	    }); 
    }
    function changeType() {
	var type_id = $("#typeSelect").val();
	if (type_id == '3') {
		autocompleteQJ.options["autocompleteId"] = "user-favorite-entity-autocomplete";
		autocompleteQJ.resetAutocomplete();
	} else {
		if (autocompleteQJ.options["autocompleteId"] == "user-favorite-entity-autocomplete") {
			autocompleteQJ.options["autocompleteId"] = "quickJumpAutocomplete";
		}
		autocompleteQJ.options["additionalParamaters"]["type_id"] = type_id;
		autocompleteQJ.resetAutocomplete();
	}
}
    
</script>