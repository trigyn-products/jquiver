<#if selectedTab == "htmlContent">
```HTML
<#noparse>
<!-- HTML Header -->
<head>
    <link rel="stylesheet" type="text/css" href="${(contextPath)!''}/webjars/1.0/dropzone/dist/dropzone.css" />
    <script type="text/javascript" src="${(contextPath)!''}/webjars/1.0/dropzone/dist/dropzone.js"></script>
    <script type="text/javascript" src="${(contextPath)!''}/webjars/1.0/fileupload/fileupload.js"></script>
    <script type="text/javascript" src="${(contextPath)!''}/webjars/1.0/dynamicform/addEditDynamicForm.js"></script>
</head>
<!-- HTML Body -->

	<!-- use this if you are using custom component rather than default UI, else delete this div -->
	<div id="fileIdDiv"></div>    
       
       
    <!-- this is for copy the filepath in clipboard / memory -->   
    <input type="text" id="copyFilePathInput" name="copyFilePathInput" style="display:none">
    <div class="clearfix"></div>        

	<!-- use this if you are using default file bin UI -->
	<div class="col-12">
        <div id="fileUploadMaster" class="col-8 fileupload dropzone"></div>
    </div>
</#noparse>
```

<#elseif selectedTab == "jsContent">
```JavaScript
<#noparse>
	document.title = "Manage File Bin Configuration";
	let contextPath = "${(contextPath)!''}";

    let dropZone = $(".fileupload").fileUpload({
        fileBinId : "yourFileBinId",
        fileAssociationId: "yourFileBinId",
        createFileBin : true,
        renderer: fileConfigRenderer,
    });

	/*
	 * This is mainly for when we want to use the filebin but
	 * don't want to show the listing of default UI and show
	 * custom listing, then use this block of code rather than 
	 * the upper block of code
	 */
	let dropZone = $.fn.fileUpload({
        fileBinId : "yourFileBinId",
        fileAssociationId: "yourFileBinId",
        createFileBinUI components  : false,
        renderer: fileListing
    });
    
    $(function () {
    	//please change the name of the component if you are using default UI
    	//as per the declaration
        dropZone.getSelectedFiles();
    });

	/*
	 * This is for showing the flie listing. This also can be used for 
	 * adding any custom button in the listing as per the business need
	 */
    function fileConfigRenderer(fileObj) {
		let fileUploadId = fileObj["id"];
		let fileName = fileObj["name"];
		let btnTxt = resourceBundleData("jws.copyFilePath,jws.fileName");
		
		let actionElem = "<div class='fileicons'><span class='iconcovercls' title='"+btnTxt["jws.copyFilePath"]+"'><i class='fileupload-actions fa fa-copy float-right'  onclick=\"copyFilePath('"+fileUploadId+"')\"></i></span>" +
		"<div class='fileicons'><span class='iconcovercls' title='"+btnTxt["jws.fileName"]+"'><i class='fileupload-actions fa fa-info float-right' onclick=\"fileName('"+fileName+"')\"></i></span>"+ 
		"<div class='fileicons'><span class='iconcovercls' title='Delete'><i class='fileupload-actions fa fa-trash float-right' onclick=\"deleteFileById('"+fileUploadId+"')\"></i></span></div>";		
		return actionElem;
	}
	
	/*
	 * In case of custom UI, this method will be called.
	 */
	function fileListing(fileObj){
        let input = $("<input id='"+fileObj["id"]+"' value='"+fileObj["id"]+"' type='text'>");
    //    input.insertAfter($("#fileIdDiv"));
    }
    
    /*
     * This is just for demo purpose, to show sample function from the button
     */
	function fileName(a_fileName){
        showMessage("File Name: " + a_fileName, "success");
    }

	/*
     * This is just for demo purpose, to show sample function from the button
     */
    function copyFilePath(a_fileUploadId){
        let input = $("<input>");
        $("body").append(input);
        input.val(window.location.origin + contextPath+"/cf/files/" + a_fileUploadId).select();
        document.execCommand("copy");
        input.remove();
        showMessage("File path copied successfully", "success");
    }
</#noparse>
```
</#if>