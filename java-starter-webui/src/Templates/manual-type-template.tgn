<head>
<link rel="stylesheet" href="${(contextPath)!''}/webjars/font-awesome/4.7.0/css/font-awesome.min.css" />
<link rel="stylesheet" href="${(contextPath)!''}/webjars/bootstrap/css/bootstrap.css" />
<link rel="stylesheet" href="${(contextPath)!''}/webjars/jquery-ui/1.12.1/jquery-ui.css"/>
<link rel="stylesheet" href="${(contextPath)!''}/webjars/jquery-ui/1.12.1/jquery-ui.theme.css" />
<script src="${(contextPath)!''}/webjars/jquery/3.5.1/jquery.min.js"></script>
<script src="${(contextPath)!''}/webjars/jquery-ui/1.12.1/jquery-ui.min.js"></script>
<script src="${(contextPath)!''}/webjars/1.0/pqGrid/pqgrid.min.js"></script>          
<script src="${(contextPath)!''}/webjars/1.0/gridutils/gridutils.js"></script> 
<link rel="stylesheet" href="${(contextPath)!''}/webjars/1.0/pqGrid/pqgrid.min.css" />
<link rel="stylesheet" href="${(contextPath)!''}/webjars/1.0/css/starter.style.css" />
<script src="${(contextPath)!''}/webjars/1.0/jquery-modal/jquery.modal.min.js"></script> 
<link rel="stylesheet" href="${(contextPath)!''}/webjars/1.0/jquery-modal/jquery.modal.min.css" />
</head>

<div class="container">
    <div class="topband">
        <h2 class="title-cls-name float-left">${messageSource.getMessage('jws.manualtypelisting')}</h2> 
        <div class="float-right">
        ${messageSource.getMessage('jws.show')}<select id="typeSelect" class="typeSelectDropDown" onchange="changeType()" style="width:100px; height: 32px;">   
                <option value="0">${messageSource.getMessage('jws.all')}</option>                   
                <option value="1" selected>${messageSource.getMessage('jws.custom')}</option>                   
                <option value="2">${messageSource.getMessage('jws.system')}</option>                 
            </select>
            <#if loggedInUserRoleList?? && loggedInUserRoleList?size gt 0>
        		<#list loggedInUserRoleList as loggedInUserRole>
            		<#if (loggedInUserRole == "ADMIN" || loggedInUserRole == "AUTHENTICATED")>  
            			<button type="submit" class="btn btn-primary" onclick="createNew()"> ${messageSource.getMessage('jws.createnewmanual')} </button>
						<#break>
        			</#if>
        		</#list>
    		</#if>
					
            <span onclick="backToWelcomePage();">
                <input id="backBtn" class="btn btn-secondary" name="backBtn" value="${messageSource.getMessage('jws.back')}" type="button">
            </span> 
        </div>
        
        <div class="clearfix"></div>        
    </div>
        
    <div id="manual-typeGrid"></div>

    <div id="snackbar"></div>
</div>

<form id="manual-add-edit" class="modal addeditmodal">
    <div class="topband">
        <h2 class="title-cls-name float-left">${messageSource.getMessage('jws.manualdetails')}</h2> 
        <div class="clearfix"></div>        
    </div>
    <div class="row">
        <div class="col-12">
            <input type="hidden" id="manualId" name="manualId"  value="" maxlength="10" class="form-control">
            <div class="col-inner-form full-form-fields">
                <label for="name" style="white-space:nowrap"><span class="asteriskmark">*</span>
                    ${messageSource.getMessage('jws.name')}
                </label>
                <input type="text" id="manualName" name="name"  value="" maxlength="50" class="form-control">
            </div>
            <input type="hidden" id="issystemmanual" name="issystemmanual" value="0">
        </div>
    </div>
    
    <input id="moduleId" value="fcd0df1f-783f-11eb-94ed-f48e38ab8cd7" name="moduleId"  type="hidden">
    <@templateWithoutParams "role-autocomplete"/>
    
    <div class="row">
        <div class="col-12">
            <div class="float-right">
                <input id="saveBtn" class="btn btn-primary" name="saveBtn" onclick="saveData()" value="${messageSource.getMessage('jws.save')}" type="button">
                <input id="backBtn" class="btn btn-secondary" name="backBtn" onclick="cancelForm()" value="${messageSource.getMessage('jws.cancel')}" type="button">
            </div>
        </div>
    </div>
</form>


     
<form id="viewManualForm" action="${(contextPath)!''}/cf/manual" method="get" target="_blank">
  <input id="manualType" name="mt" type="hidden">
</form>


    <form id="viewManualEntry" action="${(contextPath)!''}/cf/ehme" method="post">
    	<input type="hidden" name="mt" id="manualTypeListing" />
		<input type="hidden" name="mn" id="manualNameListing" />
    </form>

<script>
	document.title = "Manual Type Module List";
    contextPath = "${(contextPath)!''}";
    let isEdit;
    $(function () {
		$("#typeSelect").each(function () {
	        $(this).val($(this).find("option[selected]").val());
	    });
    	//Add all columns that needs to be displayed in the grid
        let colM = [
            { title: "${messageSource.getMessage('jws.name')}", dataIndx: "name", width: 800, align: "left", align: "left", halign: "center",
                filter: { type: "textbox", condition: "contain", listeners: ["change"]}  },
            { title: "${messageSource.getMessage('jws.action')}", minWidth: 115, dataIndx: "action", align: "center", halign: "center", render: manageRecord, sortable: false}
        ];
    
    let dataModel = {
       	url: contextPath+"/cf/pq-grid-data",
       	sortIndx: "name",
        sortDir: "up"
    };
    //System will fecth grid data based on gridId
        let grid = $("#manual-typeGrid").grid({
          gridId: "manual-typeGrid",
          colModel: colM,
          dataModel: dataModel,
          additionalParameters: {"cr_is_system_manual":"str_1"}
        });
    
    });
    
	function changeType() {
        var type = $("#typeSelect").val();   
        let postData;
        if(type == 0) {
            postData = {gridId:"manual-typeGrid"}
        } else {
            let typeCondition = "str_"+type;       
   
            postData = {gridId:"manual-typeGrid"
                    ,"cr_is_system_manual":typeCondition
                    }
        }
        
        let gridNew = $( "#manual-typeGrid" ).pqGrid();
        gridNew.pqGrid( "option", "dataModel.postData", postData);
        gridNew.pqGrid( "refreshDataAndView" );  
    }
      
    //Customize grid action column. You can add buttons to perform various operations on records like add, edit, delete etc.
    
    function manageRecord(uiObject) {
        let rowIndx = uiObject.rowIndx;
    	<#if loggedInUserRoleList?? && loggedInUserRoleList?size gt 0>
        	<#list loggedInUserRoleList as loggedInUserRole>
            	<#if (loggedInUserRole == "ADMIN" || loggedInUserRole == "AUTHENTICATED")>    
        			return '<span id="'+rowIndx+'" onclick="createNew(this)" class= "grid_action_icons"><i class="fa fa-pencil"></i></span><span id="'+rowIndx+'" onclick="editEntityManual(this)" class= "grid_action_icons"><i class="fa fa-edit"></i></span><span id="'+rowIndx+'" onclick="viewManual(this)" class= "grid_action_icons"><i class="fa fa-eye"></i></span>'.toString();
        		<#break>
        		<#else>
        			return '<span id="'+rowIndx+'" onclick="viewManual(this)" class= "grid_action_icons"><i class="fa fa-eye"></i></span>'.toString();
        		</#if>
        	</#list>
        </#if>
    }
    
    //Add logic to navigate to create new record
    <#if loggedInUserRoleList?? && loggedInUserRoleList?size gt 0>
	    <#list loggedInUserRoleList as loggedInUserRole>
        	<#if (loggedInUserRole == "ADMIN" || loggedInUserRole == "AUTHENTICATED")>   
			    function createNew(element) {
			        multiselect.removeAll();
			    	if(element === undefined){ 
			    		isEdit = 0;
			    		$("#manualId").val("");
				        $("#manualName").val("");
			    		$("#manual-add-edit").modal();
						let defaultAdminRole= {"roleId":"ae6465b3-097f-11eb-9a16-f48e38ab9348","roleName":"ADMIN"};
			        	multiselect.setSelectedObject(defaultAdminRole);
			    	}else{
				        isEdit = 1;
				        const id = Number.parseInt(element.id);
				        let rowData = $( "#manual-typeGrid" ).pqGrid("getRowData", {rowIndxPage: id});
				        $("#manualId").val(rowData["manual_id"]);
				        $("#manualName").val(rowData["name"]);
				        $("#issystemmanual").val(rowData["is_system_manual"]);
						$("#manual-add-edit").modal();
						getEntityRoles();
					}
			    }
			
			    function editEntityManual(element) {
			    	const id = Number.parseInt(element.id);
			    	let rowData = $( "#manual-typeGrid" ).pqGrid("getRowData", {rowIndxPage: id});
			    	$("#manualTypeListing").val(rowData["manual_id"]);
			    	$("#manualNameListing").val(rowData["name"]);
			        $("#viewManualEntry").submit();
			    }
        		<#break>
        	</#if>
        </#list>
    </#if>
    
    function viewManual(element) {
        const id = Number.parseInt(element.id);
        let rowData = $( "#manual-typeGrid" ).pqGrid("getRowData", {rowIndxPage: id});
        $("#manualType").val(rowData["manual_id"]);
        $("#viewManualForm").submit();
    }

    function saveData() {
        // save function
        $.ajax({
            type: "POST",
            url: contextPath+"/cf/shmt",
            data: {
                mt: $("#manualId").val(),
                ie: isEdit,
                name: $("#manualName").val(),
            },
            success: function(data) {
            	$("#manualId").val(data);
                saveEntityRoleAssociation();
                $.modal.close();
                showMessage("Information saved successfully", "success");
                $("#manual-typeGrid").pqGrid("refreshDataAndView")
            },
            error: function(xhr, data) {
                showMessage("You do not have enough privilege", "error");
                $.modal.close();
            }
        })
    }

	function saveEntityRoleAssociation(){
		let roleIds =[];
		let entityRoles = new Object();
		entityRoles.entityName = $("#manualName").val().trim();
		entityRoles.moduleId=$("#moduleId").val();
		entityRoles.entityId= $("#manualId").val().trim();
		 $.each($("#rolesMultiselect_selectedOptions_ul span.ml-selected-item"), function(key,val){
			 roleIds.push(val.id);
         	
         });
		
		entityRoles.roleIds=roleIds;
		
		$.ajax({
            async : false,
            type : "POST",
            contentType : "application/json",
            url : contextPath+"/cf/ser", 
            data : JSON.stringify(entityRoles),
            success : function(data) {
		    }
        });
	}
	
	function getEntityRoles(){
		$.ajax({
            async : false,
            type : "GET",
            url : contextPath+"/cf/ler", 
            data : {
            	entityId:$("#manualId").val(),
            	moduleId:$("#moduleId").val(),
            },
            success : function(data) {
                $.each(data, function(key,val){
                	multiselect.setSelectedObject(val);
                	
                });
		    }
        });
	}
	
    function cancelForm() {
        $.modal.close();
    }

    //Code go back to previous page
	function backToWelcomePage() {
        location.href = contextPath+"/cf/home";
	}
</script>