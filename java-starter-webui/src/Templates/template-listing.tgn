<head>
<link rel="stylesheet" href="${(contextPath)!''}/webjars/font-awesome/4.7.0/css/font-awesome.min.css" />
<link rel="stylesheet" href="${(contextPath)!''}/webjars/bootstrap/css/bootstrap.min.css" />
<link rel="stylesheet" href="${(contextPath)!''}/webjars/1.0/pqGrid/pqgrid.min.css" /> 
<link rel="stylesheet" href="${(contextPath)!''}/webjars/1.0/css/starter.style.css" />
<link rel="stylesheet" href="${(contextPath)!''}/webjars/jquery-ui/1.12.1/jquery-ui.css"/>
<link rel="stylesheet" href="${(contextPath)!''}/webjars/jquery-ui/1.12.1/jquery-ui.theme.css" />
<script src="${(contextPath)!''}/webjars/jquery/3.5.1/jquery.min.js"></script>
<script src="${(contextPath)!''}/webjars/jquery-ui/1.12.1/jquery-ui.min.js"></script>
<script src="${(contextPath)!''}/webjars/1.0/pqGrid/pqgrid.min.js"></script>   
<script src="${(contextPath)!''}/webjars/1.0/gridutils/gridutils.js"></script>   
<script type="text/javascript" src="${contextPath!''}/webjars/1.0/JSCal2/js/jscal2.js"></script>
<script type="text/javascript" src="${contextPath!''}/webjars/1.0/JSCal2/js/lang/en.js"></script> 
<script src="${(contextPath)!''}/webjars/1.0/common/jQuiverCommon.js"></script>
</head>
<script>

 

</script>
<div class="container">
  
        <div class="topband">
        <h2 class="title-cls-name float-left">${messageSource.getMessage('jws.templating')}</h2> 
        <div class="float-right"> 
        	${messageSource.getMessage('jws.show')}:<select id="typeSelect" class="typeSelectDropDown" onchange="changeType()">   
                <option value="0">${messageSource.getMessage('jws.all')}</option>                   
                <option value="1" selected>${messageSource.getMessage('jws.custom')}</option>                   
                <option value="2">${messageSource.getMessage('jws.system')}</option>                 
            </select>
            <#if environment == "dev">
                <input id="downloadTemplate" class="btn btn-primary" onclick= "downloadTemplate();" name="downloadTemplate" value="${messageSource.getMessage('jws.downloadtemplate')}" type="button">
                <input id="uploadTemplate" class="btn btn-primary" onclick= "uploadTemplate();" name="uploadTemplate" value="${messageSource.getMessage('jws.uploadTemplate')}" type="button">
            </#if>
            <input id="addFreemarkerTemplate" onclick="submitForm()" class="btn btn-primary" name="addFreemarkerTemplate" value="${messageSource.getMessage('jws.addtemp')}" type="button">
            <span onclick="backToWelcomePage();">
            <input id="backBtn" class="btn btn-secondary" name="backBtn" value="${messageSource.getMessage('jws.back')}" type="button">
           </span>    
        </div>
        
        <div class="clearfix"></div>        
        </div>
        
		<div id="deleteHeader"></div>
        <div id="divTemplateGrid"></table>

   

</div>


<form action="${(contextPath)!''}/cf/aet" method="GET" id="formFMRedirect">
    <input type="hidden" id="vmMasterId" name="vmMasterId">

</form>
<form action="${(contextPath)!''}/cf/cmv" method="POST" id="revisionForm">
	<input type="hidden" id="entityName" name="entityName" value="jq_template_master">
    <input type="hidden" id="entityId" name="entityId">
	<input type="hidden" id="moduleName" name="moduleName">
	<input type="hidden" id="moduleType" name="moduleType" value="template">
	<input type="hidden" id="saveUrl" name="saveUrl" value="/cf/stdv">
	<input type="hidden" id="previousPageUrl" name="previousPageUrl" value="/cf/te">
</form>
<script>
    contextPath = "${(contextPath)!''}";
	function backToWelcomePage() {
        location.href = contextPath+"/cf/home";
	}
    $(function () {
		$("#typeSelect").each(function () {
	        $(this).val($(this).find("option[selected]").val());
	    });
    	let formElement = $("#formFMRedirect")[0].outerHTML;
		let formDataJson = JSON.stringify(formElement);
		sessionStorage.setItem("template-manage-details", formDataJson);
		
        let colM = [
            { title: "", hidden: true, sortable : false, dataIndx: "templateId" },
            { title: "${messageSource.getMessage('jws.templatename')}", width: 190, align: "center", sortable : true, dataIndx: "templateName", align: "left", halign: "center",render: formatTemplateName,
            	filter: { type: "textbox", condition: "contain", listeners: ["change"]} },
            { title: "${messageSource.getMessage('jws.createdBy')}", width: 100, align: "center", hidden: true,  sortable : true, dataIndx: "createdBy", align: "left", halign: "center",
            	filter: { type: "textbox", condition: "contain", listeners: ["change"]} },
            { title: "${messageSource.getMessage('jws.updatedBy')}", width: 100, align: "center", hidden: false, sortable : true, dataIndx: "updatedBy", align: "left", halign: "center",
            	filter: { type: "textbox", condition: "contain", listeners: ["change"]} },
            { title: "${messageSource.getMessage('jws.lastUpdatedDate')}", width: 100, align: "center", sortable : true, dataIndx: "updatedDate", align: "left", halign: "center", render: formatLastUpdatedDate},
            { title: "${messageSource.getMessage('jws.action')}", width: 50, maxWidth: 145, align: "left", render: editTemplate, dataIndx: "action", sortable: false }
        ];
       
        let dataModel = {
        	url: contextPath+"/cf/pq-grid-data",
        	sortIndx: "updatedDate",
        	sortDir: "down",
        };
        
     let grid = $("#divTemplateGrid").grid({
          gridId: "templateListingGrid",
          colModel: colM,
          dataModel: dataModel,
          additionalParameters: {"cr_templateTypeId":"str_1"}
      });
    });
    
	function templateType(uiObject){
		const templateTypeId = uiObject.rowData.templateTypeId;
		if(templateTypeId === 1){
			return "Default";
		}else{
			return "System";
		}
	}
	
	function formatLastUpdatedDate(uiObject){
        const lastUpdatedTs = uiObject.rowData.updatedDate;
        return formatDate(lastUpdatedTs);
    }
    /*Written for preventing Cross Site Scripting*/
    function formatTemplateName(uiObject){   
        const templatename = uiObject.rowData.templateName;
        var encodedName = $('<div />').text(templatename).html();
        return encodedName;             
    }
    /**Ends Here*/
    
    function editTemplate(uiObject) {
       
        const templateId = uiObject.rowData.templateId;
		const templateName = uiObject.rowData.templateName;
		const updatedDate = uiObject.rowData.updatedDate;
		const revisionCount = uiObject.rowData.revisionCount;
        
            <#if environment == "dev">
                 let element = "<span id='"+templateId+"'  class= 'grid_action_icons'><i class='fa fa-pencil'></i></span>";
                 element = element + "<span id='"+templateId+"' class= 'grid_action_icons' onclick='downloadTemplateById(this)'><i class='fa fa-download'></i></span>";
				 element = element + "<span id='"+templateId+"_upload' name='"+templateName+"' class= 'grid_action_icons' onclick='uploadTemplateById(this)'><i class='fa fa-upload'></i></span>";
                 return element;
            <#else>
                let actionElement;
				actionElement = '<span id="'+templateId+'" onclick="submitForm(this)" class= "grid_action_icons"><i class="fa fa-pencil"></i></span>';
				if(revisionCount > 1){
					actionElement = actionElement + '<span id="'+templateId+'_entity" name="'+escape(templateName)+'" onclick="submitRevisionForm(this)" class= "grid_action_icons"><i class="fa fa-history"></i></span>'.toString();
				}else{
					actionElement = actionElement + '<span class= "grid_action_icons disable_cls"><i class="fa fa-history"></i></span>'.toString();
				}
            		if(uiObject.rowData.templateTypeId == 1) {
		        <#if loggedInUserRoleList?? && loggedInUserRoleList?size gt 0>
		        	<#list loggedInUserRoleList as loggedInUserRole>
		            	<#if (loggedInUserRole == "ADMIN")>    
		        			actionElement += '<span onclick=\'openDeletConfirmation("divTemplateGrid","'+templateId+'","1b0a2e40-098d-11eb-9a16-f48e38ab9348","'+templateName+'","'+updatedDate+'")\' class= "grid_action_icons" title="Delete"><i class="fa fa-trash "></i></span>'.toString();
		        			<#break>
		        		</#if>
		        	</#list>
		        </#if>
		        }
				return actionElement;
            </#if>
    }
    
    function downloadTemplateById(thisObj){
	  	let templateId = thisObj.id;
	  	$.ajax({
			url:contextPath+"/cf/dtbi",
			type:"POST",
	        data:{
	        	templateId : templateId,
	        },
			success : function(data) {
			  showMessage("Template downloaded successfully", "success");
			},
			error : function(xhr, error){
			  showMessage("Error occurred while downloading template", "error");
			},
	    });  
  	}
    
	function uploadTemplateById(thisObj){
	  	let templateId = thisObj.id;
		let templateName = $("#"+templateId).attr("name");
	  	$.ajax({
			url:contextPath+"/cf/utdbi",
			type:"POST",
	        data:{
	        	templateName : templateName,
	        },
			success : function(data) {
			  showMessage("Template uploaded successfully", "success");
			},
			error : function(xhr, error){
			  showMessage("Error occurred while uploading template", "error");
			},
	    });  
  	}
	
    function submitForm(sourceElement) {
		let moduleId = "";
		
		if(sourceElement !== undefined){
			moduleId = sourceElement.id
		}
      	$("#vmMasterId").val(moduleId);
      	
      	$("#formFMRedirect").submit();
    }
	
	function submitRevisionForm(sourceElement) {  
		let selectedId = sourceElement.id.split("_")[0];
		let moduleName = $("#"+sourceElement.id).attr("name")
      	$("#entityId").val(selectedId);
		$("#moduleName").val(unescape(moduleName));
      	$("#revisionForm").submit();
    }
    
    function changeType() {
        var type = $("#typeSelect").val();   
        let postData;
        if(type == 0) {
            postData = {gridId:"templateListingGrid"}
        } else {
            let typeCondition = "str_"+type;       
   
            postData = {gridId:"templateListingGrid"
                    ,"cr_templateTypeId":typeCondition
                    }
        }
        
        let gridNew = $( "#divTemplateGrid" ).pqGrid();
        gridNew.pqGrid( "option", "dataModel.postData", postData);
        gridNew.pqGrid( "refreshDataAndView" );  
    }
        
    <#if environment == "dev">
        function downloadTemplate(){
            $.ajax({
                url:contextPath+"/cf/dtl",
                type:"POST",
                success : function(data) {
				  showMessage("Templates downloaded successfully", "success");
				},
				error : function(xhr, error){
				  showMessage("Error occurred while downloading templates", "error");
				},
                
            });
        }
        function uploadTemplate(){
            $.ajax({
                url:contextPath+"/cf/utd",
                type:"POST",
                success : function(data) {
				  showMessage("Template uploaded successfully", "success");
				},
				error : function(xhr, error){
				  showMessage("Error occurred while uploading template", "error");
				},
                
            });
        }
    </#if>
</script>