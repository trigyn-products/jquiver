<head>
<script src="${(contextPath)!''}/webjars/1.0/rich-autocomplete/jquery.richAutocomplete.min.js"></script>
<script src="${(contextPath)!''}/webjars/1.0/typeahead/typeahead.js"></script>
<link rel="stylesheet" href="${(contextPath)!''}/webjars/1.0/rich-autocomplete/richAutocomplete.min.css" />
</head>

			<div class="col-inner-form full-form-fields">
				<label for="rolesMultiselect" style="white-space:nowrap">${messageSource.getMessage('jws.roles')}</label>
				<div class="search-cover">
					<input class="form-control" id="rolesMultiselect" type="text">
					<i class="fa fa-search" aria-hidden="true"></i>
            	</div>
 			</div>
		

<script>
contextPath = "${(contextPath)!''}";	
let multiselect;
$(function () {	
	multiselect = $("#rolesMultiselect").multiselect({
        autocompleteId: "rolesAutocomplete",
        enableClearAll: false,
        render: function(item) {
        	var renderStr ="";
        	if(item.emptyMsg == undefined || item.emptyMsg === "")
    		{
        		renderStr = "<p>"+item.roleName+"</p>";
    		}
        	else
    		{
        		renderStr = item.emptyMsg;	
    		}	    				        
            return renderStr;
        },
        additionalParamaters: {languageId: 1},
        extractText: function(item) {
            return item.roleName;
        },
        selectedItemRender: function(item){
            return item.roleName;
        },
        select: function(item) {
            $("#rolesMultiselect").blur();
            multiselect.setSelectedObject(item);
        },
       
    }
    );
	
    multiselect.createElementForMultiselect =  function(context, multiselectId, itemData) {
        if(context.options.duplicateCheckRule(context.selectedObjects, itemData) == false) {
        	context.selectedObject.push(itemData);
            const element = context.options.selectedItemRender(itemData);
            let listsElement = $("<li></li>");
            let itemSpan = $('<span class="ml-selected-item" id="'+itemData.roleId+'">'+element+'</span>');
            listsElement.append(itemSpan);
            let deleteItemContext = $('<span class="float-right closeicon"><i class="fa fa-times-circle-o" aria-hidden="true"></i></span>');
            if(itemData.roleName != "ADMIN"){
                    deleteItemContext.data("selected-item", itemData);
                listsElement.append(deleteItemContext);
            }
            $(".ml-selected-items-list").append(listsElement);
            if(itemData.roleName != "ADMIN"){
                var deleteItem = function(event) {
                    var data = $(deleteItemContext).data("selected-item");
                    context.deleteItem.apply(deleteItemContext, [multiselectId, data, context]);
                    
                };
                deleteItemContext.click(deleteItem);
            }
            let noOfElements = parseInt($("#"+multiselectId+"_count > span").text());
    		$("#"+multiselectId+"_count > span").text(noOfElements+1);
    		$("#"+multiselectId+"_count").removeClass("disable_cls");
    		$("#"+multiselectId+"_count > span" ).css("pointer-events","auto");
            context.selectedObjects.push(itemData);
        }else{
        	showMessage("Data already present in the list", "info")
        }

        $(context.element).val("");
        
    }

    multiselect.setSelectedObject = function (item){ 
        multiselect.createElementForMultiselect(this, this.element[0].id, item);
        	return this.selectedObject;
    }
    multiselect.options.duplicateCheckRule = function(list, obj) {
        var iCounter;
        for (iCounter = 0; iCounter < list.length; iCounter++) {
            if (list[iCounter].roleId === obj.roleId) {
                return true;
            }
        }
        return false;
       }
    
	});
    
</script>