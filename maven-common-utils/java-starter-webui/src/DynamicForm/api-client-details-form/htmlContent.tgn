<head>
	<link rel="stylesheet" href="${(contextPath)!''}/webjars/font-awesome/4.7.0/css/font-awesome.min.css" />
	<link rel="stylesheet" href="${(contextPath)!''}/webjars/bootstrap/css/bootstrap.css" />
	<link rel="stylesheet" href="${(contextPath)!''}/webjars/jquery-ui/1.12.1/jquery-ui.css" />
	<link rel="stylesheet" href="${(contextPath)!''}/webjars/jquery-ui/1.12.1/jquery-ui.theme.css" />
	<script src="${(contextPath)!''}/webjars/jquery/3.5.1/jquery.min.js"></script>
	<script src="${(contextPath)!''}/webjars/jquery-ui/1.12.1/jquery-ui.min.js"></script>
	<link rel="stylesheet" href="${(contextPath)!''}/webjars/1.0/css/starter.style.css" />
	<script src="${(contextPath)!''}/webjars/1.0/rich-autocomplete/jquery.richAutocomplete.js"></script>
	<script src="${(contextPath)!''}/webjars/1.0/rich-autocomplete/jquery.richAutocomplete.min.js"></script>
	<script src="${(contextPath)!''}/webjars/1.0/typeahead/typeahead.js"></script>
	<link rel="stylesheet" href="${(contextPath)!''}/webjars/1.0/rich-autocomplete/richAutocomplete.min.css" />

</head>

<div class="container">
	<div class="topband">
		<h2 class="title-cls-name float-left">${messageSource.getMessage('jws.addeditdetails')}</h2>
		<div class="clearfix"></div>
	</div>
	<form method="post" name="addEditForm" id="addEditForm">
		<div id="errorMessage" class="alert errorsms alert-danger alert-dismissable" style="display:none"></div>

		<div class="row">
			<input type="hidden" data-type="varchar" id="clientid" name="clientid"  value="${(resultSetObject.client_id)!""}" >
			<div class="col-4">
				<div class="col-inner-form full-form-fields">
					<label for="clientname" style="white-space:nowrap"><span class="asteriskmark">*</span>
						            	${messageSource.getMessage('jws.clientname')}
						            </label>
					<input type="text" data-type="varchar" id="clientname" name="clientname"  value="${(resultSetObject.client_name)!""}" maxlength="100" placeholder="Client Name" class="form-control">
					</div>
				</div>
				<div class="col-2">
					<div class="col-inner-form full-form-fields">
						<label for="algoAutocomplete" style="white-space:nowrap"><span class="asteriskmark">*</span>
                            ${messageSource.getMessage('jws.encryptionalgorithm')}</label>
						<div class="search-cover">
							<select class="form-control" id="algoAutocomplete" name="algoAutocomplete">
							<option value="-1">Select</option>
							</select>
						</div>
					</div>
				</div>
                <div class="col-2">
					<div class="col-inner-form full-form-fields">
						<label for="algoAutocomplete" style="white-space:nowrap"><span class="asteriskmark">*</span>
                            ${messageSource.getMessage('jws.encalgmode')}</label>
						<div class="search-cover">
							<select class="form-control" id="algoAutoModes" name="algoAutoModes">      
							<option value="-1">Select</option> 
														
							</select>
						</div>
					</div>
				</div>
                <div class="col-2">
					<div class="col-inner-form full-form-fields">
						<label for="algoAutocomplete" style="white-space:nowrap"><span class="asteriskmark">*</span>
                           ${messageSource.getMessage('jws.encalgpadding')}</label>
						<div class="search-cover">
							<select class="form-control" id="algoPadding" name="algoPadding">     
                                  <option value="-1">Select</option>                               
							</select>
						</div>
					</div>
				</div>
				<div class="col-2">
					<div class="col-inner-form full-form-fields">
							<label for="outputText" style="white-space:nowrap"><span class="asteriskmark">*</span>
						      	${messageSource.getMessage('jws.enckeylength')}
						    </label>							
							<select class="form-control" id="keyLength" name="keyLength">      
							<option value="-1">Select</option> 
														
							</select>
					</div>
				</div>
				<div class="col-12">
					<div class="col-inner-form full-form-fields">
						<label for="clientkey" style="white-space:nowrap"><span class="asteriskmark">*</span>
						     	${messageSource.getMessage('jws.clientkey')}
						</label>
						<div class="input-group">
							<input type="text" data-type="varchar" id="clientkey" name="clientkey"  value="${(resultSetObject.client_key)!""}"
                                    maxlength="100" placeholder="Client Key" class="form-control" readonly style="margin-right: 10px;">
							<input id="clientkeyCopyBtn" class="btn btn-secondary" name="clientkeyCopyBtn" value="${messageSource.getMessage('jws.copy')}" type="button" onclick="copyToClipboard('clientkey','clientkeyCopyBtn')">
                        </div>
						</div>
					</div>
					<div id="publicKeyDiv" class="col-12" style="display:none;">
						<div class="col-inner-form full-form-fields">
							<label id="lblPublicKey" for="publicKey" style="white-space:nowrap;"><span id="astr_1" class="asteriskmark">*</span>
			            	${messageSource.getMessage('jws.publickey')}
			            </label>
							<div class="input-group">
								<textarea rows="3" data-type="varchar" id="publicKey" name="publicKey"  maxlength="1000" placeholder="Public Key"  style="margin-right: 5px;" class="form-control">${(resultSetObject.client_public_key)!""}</textarea>

								<input id="publicKeyCopyBtn" class="btn btn-secondary" name="publicKeyCopyBtn" value="${messageSource.getMessage('jws.copy')}" type="button" onclick="copyToClipboard('publicKey','publicKeyCopyBtn')">
                        </div>
							</div>
						</div>
						<div class="col-12">
							<div class="col-inner-form full-form-fields">

								<label id="lblClientSecret" for="clientsecret" style="white-space:nowrap"><span id="astr_2" class="asteriskmark">*</span>
						      	${messageSource.getMessage('jws.clientsecret')}
						    </label>
								<div class="input-group">
									<textarea rows="3" data-type="varchar" id="clientsecret" name="clientsecret" maxlength="1000" placeholder="Client Secret" style="margin-right: 5px;" class="form-control">${(resultSetObject.client_secret)!""}</textarea>

									<input id="clientsecretCopyBtn" class="btn btn-secondary" name="clientsecretCopyBtn" value="${messageSource.getMessage('jws.copy')}" type="button" onclick="copyToClipboard('clientsecret','clientsecretCopyBtn')">
                        </div>
								</div>
							</div>
							
							<div class="col-6">
								<div class="col-inner-form full-form-fields">
									<label for="inputText" style="white-space:nowrap">
						      	${messageSource.getMessage('jws.testinput')}
						    </label>
									<div class="input-group">
										<textarea rows="3" data-type="varchar" id="inputText" name="inputText" style="margin-right: 10px;" maxlength="1000" placeholder="Test Input" class="form-control"></textarea>
										<div class="btn-group-vertical">
											<input id="encryptBtn" class="btn btn-secondary" style="margin-bottom: 10px;" name="encryptBtn" value="${messageSource.getMessage('jws.encrypt')}" type="button" onclick="encrypt();">
											<input id="decryptBtn" class="btn btn-secondary" name="decryptBtn" value="${messageSource.getMessage('jws.decrypt')}" type="button" onclick="decrypt();">
                        </div>
										</div>
									</div>
								</div>
								<div class="col-6">
									<div class="col-inner-form full-form-fields">
										<label for="outputText" style="white-space:nowrap">
						      	${messageSource.getMessage('jws.testoutput')}
						    </label>
										<textarea rows="3" data-type="varchar" id="outputText" name="outputText" maxlength="1000" placeholder="Test Output" class="form-control"></textarea>

									</div>
								</div>

								<input type="hidden" data-type="varchar" id="updatedby" name="updatedby"  value="${(resultSetObject.updated_by)!""}" >
								<input type="hidden" data-type="varchar" id="createdby" name="createdby"  value="${(resultSetObject.created_by)!""}" >
								<input type="hidden" data-type="timestamp" id="updateddate" name="updateddate"  value="${(resultSetObject.updated_date)!""}" >
    	</div>

	</form>
	<div class="row">
		<div class="col-12">
			<div class="float-right">
				<div class="btn-group dropup custom-grp-btn">
					<div id="keyPairGeneratorDiv" style="display:none;">
						<input id="keyPairGeneratorBtn" style="margin-right:2.5px;" onclick="generateKeyPair();" class="btn btn-primary" name="keyPairGeneratorBtn" value="Generate Key Pair" type="button">
                    </div>
						<div id="savedAction">
							<button type="button" id="saveAndReturn" class="btn btn-primary" onclick="typeOfActionWithIsEdit('${formId}', this, isEdit);">${messageSource.getMessage("jws.saveAndReturn")}</button>
						</div>
						<button id="actionDropdownBtn" type="button" class="btn btn-primary dropdown-toggle panel-collapsed" onclick="actionOptions();"></button>
						<div class="dropdown-menu action-cls" id="actionDiv">
							<ul class="dropdownmenu">
								<li id="saveAndCreateNew" onclick="typeOfActionWithIsEdit('${formId}', this, isEdit);">
									${messageSource.getMessage("jws.saveAndCreateNew")}</li>
								<li id="saveAndEdit" onclick="typeOfActionWithIsEdit('${formId}', this, isEdit);">
									${messageSource.getMessage("jws.saveAndEdit")}</li>
							</ul>
						</div>
					</div>
					<span onclick="backToPreviousPage();">
					<input id="backBtn" class="btn btn-secondary" name="backBtn" value="${messageSource.getMessage('jws.cancel')}" type="button">
				</span>
				</div>
			</div>
		</div>
	</div>
	<script>
	document.title = "Manage API Client Details";
	let formId = "${formId}";
	contextPath = "${contextPath}";
	let isEdit = 0;
	let autocomplete;
	let selectedAlgo;
	let keyLength = 0;
	let encLookup ;

  $(function(){
      let obj;
	  encLookup = new Array();
    // setting value on edit.
      <#if (resultSet)??>
      	<#list resultSet as resultSetList>
          obj = new Object();
          obj["encryptionAlgoName"] = '${resultSetList?api.get("encryptionAlgoName")!""}';
          obj["encryptionAlgoId"] = '${resultSetList?api.get("encryptionAlgoId")!""}';
		  obj["modeId"] = '${resultSetList?api.get("modeId")!""}';
		  obj["paddingId"] = '${resultSetList?api.get("paddingId")!""}';
		  obj["keyLength"] = '${resultSetList?api.get("keyLengthId")!""}';
		  selectedAlgo = obj["encryptionAlgoId"];
		  obj["clientId"] = '${resultSetList?api.get("clientId")!""}';		  
      	</#list>
      </#if>
    
      <#if (resultSet)?? && resultSet?has_content>
      	isEdit = 1;			
      </#if>	
      if(obj != null && obj["encryptionAlgoName"] == "RSA") {
        $("#publicKeyDiv").show();
        $("#lblClientSecret").html("<span class='asteriskmark'>*</span> Private Key");
        $("#clientsecret").attr("placeholder", "Private Key");
        $("#keyPairGeneratorDiv").show();
      }

      if(isEdit == 0) {
        const clientid = uuidv4();
		$("#clientid").val(clientid);
		$("#primaryKey").val(clientid);
        const clientkey = uuidv4();
		$("#clientkey").val(clientkey);
        obj = new Object();
        obj["encryptionAlgoName"] = 'NA';
        obj["encryptionAlgoId"] = '0';
      }

	if(obj != null && obj["encryptionAlgoName"] == "NA") {
	    handleNAElements();
	} else  {
	    handleNonNAElements();
	}
    
    getAlgoAutocomplete(obj["encryptionAlgoId"]);
	toggleTextField(obj["encryptionAlgoName"]);	
	savedAction(formId, isEdit);	
	getAlgoModes(obj["encryptionAlgoId"], obj["modeId"], obj["paddingId"], obj["keyLength"]);		
	hideShowActionButtons();
	
	
  });

	$('#algoAutocomplete').on('change', function(){
		changeEncAlgorithm();
	});
	
	
	function generateKeyPair() {
      
		$.ajax({
		  type : "GET",
		  async: false,
		  url : contextPath+"/cf/grsakp",
          success : function(data) {
              $("#publicKey").text(data.publicKey);
              $("#clientsecret").text(data.privateKey);              
		  },
	      error : function(xhr, error){
			showMessage("Error occurred while saving", "error");
	      },
		});
	}

	function encrypt() {
      if(validateTestEncDec($("#clientsecret").val())) {
		var secretKey = $("#clientsecret").val();
        $.ajax({
            type : "GET",
            async: false,
            url : contextPath+"/cf/enc",
            data: {
                inputData: $("#inputText").val(),
                algo: $("#algoAutocomplete").find('option:selected').text(),
				mode: $("#algoAutoModes").find('option:selected').text(),
				padding: $("#algoPadding").find('option:selected').text(),
                pk: secretKey,
				keyLength: $("#keyLength").find('option:selected').text()				
            },
            success : function(data) {
                $("#outputText").val(data);         
            },
            error : function(xhr, error){	
                showMessage(xhr.responseText, "error");
            },
		});
      }
  }


  function decrypt() {
      let secretKey;
      let selectedAlgText = $("#algoAutocomplete").find('option:selected').text();
      if(selectedAlgText == "RSA") {
          secretKey = $("#publicKey").val();
      } else {
          secretKey = $("#clientsecret").val();
      }
      if(validateTestEncDec(secretKey)) {
        $.ajax({
            type : "GET",
            async: false,
            url : contextPath+"/cf/dec",
            data: {
                inputData: $("#inputText").val(),
                algo: selectedAlgText,
				mode: $("#algoAutoModes").find('option:selected').text(),
				padding: $("#algoPadding").find('option:selected').text(),
                pk: secretKey,
				keyLength: $("#keyLength").find('option:selected').text()
            },
            success : function(data) {
                $("#outputText").val(data);          
            },
            error : function(xhr, error){
                showMessage("Error occurred while decryption. Invalid input/secret key.", "error");
            },
        });
      }
  }

  function validateTestEncDec(secretKey) {
      let selectedAlgText = $("#algoAutocomplete").find('option:selected').val();
	  let algMode = $("#algoAutoModes").find('option:selected').val();
	  let algPadding = $("#algoPadding").find('option:selected').val();	  	
	  if(selectedAlgText == "-1") {
            showMessage("No algorithm is selected", "error");
            return false;   
      } else if(algPadding == "-1") {
            showMessage("No padding is selected", "error");
            return false;   
      } else if(algMode == "-1") {
            showMessage("No mode is selected", "error");
            return false;   
      }  else if($("#inputText").val() == null || $("#inputText").val() == undefined || $("#inputText").val() == "") {
            showMessage("Test input is empty.", "error");
            return false;
      } else if(secretKey == null || secretKey == undefined || secretKey == "") {
            showMessage("Client secret key is required to test", "error");
            return false;
      } else if(selectedAlgText == "DES" && secretKey.length <= 25) {
          	showMessage("Client secret key should be more than 25 characters for DES", "error");
            return false;
      }
	  let keyLength = $("#keyLength").val();
	  if(keyLength <= 0) {
            showMessage("Key Lenght must be greater than zero", "error");
            return false;   
      }
      return true;
  }

  function toggleTextField(item) {
      handleNonNAElements();
      if(item == "RSA") {
        $("#publicKeyDiv").show();
        $("#lblClientSecret").html("<span class='asteriskmark'>*</span> Private Key");
        $("#clientsecret").attr("placeholder", "Private Key");
        $("#keyPairGeneratorDiv").show();
        
      } else {
          $("#publicKeyDiv").hide();
        $("#keyPairGeneratorDiv").hide();
          $("#lblClientSecret").html("<span class='asteriskmark'>*</span> Client Secret");
          $("#clientsecret").attr("placeholder", "Client Secret");

          if(item.encryptionAlgoName == "NA") {
                handleNAElements()
          } 
      }
  }
	
	function handleNAElements() {
      $("#astr_1").hide();
      $("#astr_2").hide();
      $("#astr_3").hide();
	}
  
	function handleNonNAElements() {
	  $("#astr_1").show();
	  $("#astr_2").show();
	  $("#astr_3").show();
	}
  
	function copyToClipboard(textName, btnName) {
	  var copyText = document.getElementById(textName);
	  copyText.select();
	  copyText.setSelectionRange(0, 99999); /* For mobile devices */
	  document.execCommand("copy"); 
	  showMessage("Data copied", "success");
	}
	//Add logic to save form data
	function saveData(){
		let isDataSaved = false;
        let selectedAlgValue = $("#algoAutocomplete").val();
        if(selectedAlgValue == null || selectedAlgValue == undefined) {
            showMessage("All fields are mandatory", "error");
			return false;
        } else {
            selectedAlgo = $("#algoAutocomplete").val();
        }
		let formData = validateData();	
		if(formData === undefined){
			$("#errorMessage").html("All fields are mandatory");
			$("#errorMessage").show();
			return false;
		}
		let algLookupValue = getAlgLookupValue();        
		$("#errorMessage").hide();
		formData.push({"name": "formId", "value": formId, "valueType": "varchar"});
		formData.push({"name": "isEdit", "value": (isEdit + ""), "valueType": "int"});		
        let formIdObj = new Object();
		formIdObj["name"] = "encryptionalgoid";
		formIdObj["value"] = algLookupValue+"";
		formIdObj["valueType"] = "int";
        formData.push(formIdObj);	
		$.ajax({
		  type : "POST",
		  async: false,
		  url : contextPath+"/cf/psdf",
		  data : {
		  	formData: JSON.stringify(formData),
		  	formId: formId
		  },
          success : function(data) {
			isDataSaved = true;
			showMessage("Information saved successfully", "success");
		  },
	      error : function(xhr, error){
			showMessage("Error occurred while saving", "error");
	      },
		});
		return isDataSaved;
	}
	
	//Basic validation for form fields
    function validateData(){
		let serializedForm = $("#addEditForm").serializeArray();
		for(let iCounter =0, length = serializedForm.length;iCounter<length;iCounter++){
			let fieldValue = $.trim(serializedForm[iCounter].value);
			let fieldName = $.trim(serializedForm[iCounter].name);
			let isFieldVisible = $("#"+fieldName).is(":visible");
            if(fieldName != "inputText" && fieldName != "outputText") {
                if(selectedAlgo == "NA" && (fieldName=="clientsecret" || fieldName=="publicKey" || fieldName=="inclusionUrlPattern")) {
                    fieldValue = "";
                } else {
                    if(fieldValue !== ""){
                        serializedForm[iCounter].value = fieldValue;
                    }else if(isFieldVisible === true){
                        return undefined;
                    }  
                }
            }
		}
		serializedForm = serializedForm.formatSerializedArray();
		return serializedForm;
    }
    
	//Code go back to previous page
	function backToPreviousPage() {
			location.href = contextPath+"/cf/acd";
	}
	
	function getAlgoAutocomplete(selectedAlgorithmId){       
		$.ajax({
			type : "GET",
			url : contextPath+"/api/jq_encryption_algorithms_lookup",
			success : function(data) {				
				for (let property in data) {					
					if(data[property].encryptionAlgoName != undefined){
						if(data[property].encryptionAlgoId == selectedAlgorithmId){
							$("#algoAutocomplete").append("<option value="+data[property].encryptionAlgoId+"  selected>"+data[property].encryptionAlgoName+"</option>");
						}else {
							$("#algoAutocomplete").append("<option value="+data[property].encryptionAlgoId+">"+data[property].encryptionAlgoName+"</option>");
						}
					}                	    				
				}
				
			},
			error : function(xhr, error){
				showMessage("Error occurred while fetching encryption algorithms", "error");
			},
		});		
    }
    
    function changeEncAlgorithm(){		
		var item = $("#algoAutocomplete").find('option:selected').text();
		var algId = $("#algoAutocomplete").find('option:selected').val();
		toggleTextField(item);
		getAlgoModes(algId, "-1", "-1", "-1");		
	}
	
	function getAlgoModes(algId, modId, paddingId, keyLength){   
			
		var hasEntry = checkEncLookupDetails(encLookup, algId);
		if (hasEntry == false) {
			$.ajax({
				type : "GET",
				async: false,
				url : contextPath+"/api/jq_enc_alg_mode",
				data: {
					algorithmId: algId
				},
				success : function(data) {					
					appendEncLookupDetails(data, algId);					
				},
				error : function(xhr, error){				
					showMessage("Error occurred while fetching algorithm modes", "error");
				},
			});
		}
		populateEncLookupDetails(encLookup, algId, modId, paddingId, keyLength);
	}
	
	function getAlgLookupValue(){
		let algLookupId;
		let algorithm = $("#algoAutocomplete").val();
		let mode = $("#algoAutoModes").val();
		let padding = $("#algoPadding").val();
		let keyLength = $("#keyLength").val();
		$.ajax({
		  type : "GET",
		  async: false,
		  url : contextPath+"/api/enc_alg_lookup_value",
		  data : {
			algorithmId: algorithm,
		  	mode: mode,
		  	padding: padding,
			keyLength: keyLength
		  },
          success : function(data) {			
			algLookupId = data[0].encLookupId;			
		  },
	      error : function(xhr, error){
			showMessage("Error while saving", "error");
	      },
		});
		return algLookupId;
	}
	
	function checkEncLookupDetails(options, algorithmId) {
		var hasEntry = false;
		for (let optionCounter = 0; optionCounter < options.length; optionCounter++) {
			if (options != undefined && options != null && options[optionCounter].algorithmId == algorithmId ){	
				hasEntry = true;
				break;
			}
		}		
		return hasEntry;
	}
	
	function  appendEncLookupDetails(options, algorithmId) {
		if (encLookup != undefined && encLookup != null) {	
			for (let property in options) {
				encLookup.push( { "algorithmId": algorithmId, "modeId": options[property].modeId, "modeName": options[property].modeName, "paddingId": options[property].paddingId, "paddingName": options[property].paddingName , "keyLengthId": options[property].keyLengthId, "keyLength": options[property].keyLength });
			}			
		}
	}
	
	function populateEncLookupDetails(options, algorithmId, modeId, paddingId, keyLength) {	
		var addModes = [];
		var addPaddings = [];
		var addKeyLengths = [];
		$("#keyLength option").remove();
		$("#algoAutoModes option").remove();
		$("#algoPadding option").remove();
		$("#keyLength").append('<option value="-1" >Select</option>');
		$("#algoAutoModes").append('<option value="-1" >Select</option>');
		$("#algoPadding").append('<option value="-1" >Select</option>');
		for (let property in options) {
			if(options[property].algorithmId != undefined  && options[property].algorithmId == algorithmId){
				var modesArry = jQuery.inArray(options[property].modeId, addModes);			
				if(options[property].modeId != undefined && modesArry == -1){
					addModes.push(options[property].modeId);
					if(options[property].modeId == modeId){
						$("#algoAutoModes").append("<option value="+options[property].modeId+" selected>"+options[property].modeName+"</option>");
					} else {
						$("#algoAutoModes").append("<option value="+options[property].modeId+">"+options[property].modeName+"</option>");
					}
																		
				} 
				var paddArry = jQuery.inArray(options[property].paddingId, addPaddings);
				if(options[property].paddingId != undefined && paddArry == -1){	
					addPaddings.push(options[property].paddingId);
					if(options[property].paddingId == paddingId){
						$("#algoPadding").append("<option value="+options[property].paddingId+" selected>"+options[property].paddingName+"</option>");
					} else {
						$("#algoPadding").append("<option value="+options[property].paddingId+">"+options[property].paddingName+"</option>");
					}
									
				}
				var keyLengthArry = jQuery.inArray(options[property].keyLength, addKeyLengths);
				if(options[property].keyLength != undefined && keyLengthArry == -1){
					addKeyLengths.push(options[property].keyLength);
					if(options[property].keyLengthId == keyLength){
						$("#keyLength").append("<option value="+options[property].keyLengthId+" selected>"+options[property].keyLength+"</option>");
					} else {
						$("#keyLength").append("<option value="+options[property].keyLengthId+">"+options[property].keyLength+"</option>");
					}
										
				}
			}
		}
	}
	
	</script>