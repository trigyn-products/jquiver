<head>
	<link rel="stylesheet" href="${(contextPath)!''}/webjars/1.0/pqGrid/pqgrid.min.css" />
    <script src="${(contextPath)!''}/webjars/1.0/pqGrid/pqgrid.min.js"></script>    
    <script src="${(contextPath)!''}/webjars/1.0/gridutils/gridutils.js"></script>
</head>
<style>
.select_btn_new{
    border:none;
    background:none;
    }
.selectallcls{
    border:1px solid var(--bluebgcolor);
    padding:3px;
    border-radius: 3px;
    cursor:pointer;    color:var(--bluebgcolor);
    }
.deslectcls{
    border:1px solid var(--bluebgcolor);
    padding:3px;
    border-radius: 3px;
    cursor:pointer;    color:var(--bluebgcolor);
    }
</style>    
<div class="container">
    <div class="topband">
         
        <h2 class="title-cls-name float-left"> ${messageSource.getMessage('jws.managepermissions')} </h2>
       
       
        <div class="float-right">
            <select class="typeSelectDropDown" id="typeRole" onchange="changeType()">
                <#if roles ??>
                    <#list roles as role>
                        <option value="${role?api.getRoleId()}">${role?api.getRoleName()}</option>
                    </#list>
                </#if>
            </select>
            <span onclick="backToPreviousPage();">
                <input id="backBtn" class="btn btn-secondary" name="backBtn" value="${messageSource.getMessage('jws.back')}" type="button">
            </span>
                
        </div>
          
           <div class="pull-right">
        ${messageSource.getMessage('jws.show')}:<select id="typeSelect" class="typeSelectDropDown" onchange="changeType()">   
                <option value="0">${messageSource.getMessage('jws.all')}</option>                   
                <option value="1" selected>${messageSource.getMessage('jws.custom')}</option>                   
                <option value="2">${messageSource.getMessage('jws.system')}</option>               
            </select>
           </div>
          

        <div class="clearfix"></div>
    </div>
    <div id="divManageEntityRoleGrid"></div>
</div>

<script>
document.title = "Manage Permissions";
contextPath = "${contextPath}";

$(function () {

    let roleName = $("#typeRole option:selected").text();
	let roleId = $("#typeRole").val();
    $("#typeSelect").each(function () {
        $(this).val($(this).find("option[selected]").val());
    });
    let inputField =  "<button type='button' class='select_btn_new'  name='"+roleName+"' attr='"+roleId+"'  value='Select All' onclick='checkAllBoxes(this);'><i class='fa fa-check-square selectallcls' ></i></button> <button type='button' class='select_btn_new'  name='"+roleName+"' attr='"+roleId+"'  value='Deselect All' onclick='checkAllBoxes(this);'><i class='fa fa-window-close deslectcls' ></i></button>"
	let colM = [
		 { title: "${messageSource.getMessage('jws.moduleName')}", width: 120, align: "center",  dataIndx: "moduleId", align: "left", halign: "center",render: moduleTypes,
        filter: { type: "select", condition: "eq",options : moduleType, listeners: ["change"]} },
        { title: "${messageSource.getMessage('jws.entityname')}", width: 400, align: "center", dataIndx: "entityname", align: "left", halign: "center",
        filter: { type: "textbox", condition: "contain", listeners: ["change"]} },
        { title: "${messageSource.getMessage('jws.permission')}", width: 120, render:addCheckBox, align: "center",  dataIndx: "is_active", halign: "center", attr:"role_id", 
         filter: {type: inputField}}
 
	];
   
	let dataModel = {
	   	url: contextPath+"/cf/pq-grid-data",
    };
     grid = $("#divManageEntityRoleGrid").grid({
      gridId: "manageEntityRoleGrid",
      colModel: colM,
      resizable: true,
      freezeCols: 2,
      dataModel: dataModel
  });
 changeType();
});

function backToPreviousPage() {
    location.href = contextPath + "/cf/um";
}

var grid;
var contextPath = "${contextPath}";
var moduleType = [{"": "All"}];
$.ajax({
    type: "GET",
    url: contextPath + "/cf/modules",
    async: false,
    success: function(data) {
        for(let counter = 0; counter < data.length; ++counter) {
            let object = data[counter];
            let details = new Object()
            details[object["moduleId"]] = object["moduleName"];
            moduleType.push(details);
        }
    }
});

function moduleTypes(uiObject) {
    let cellValue = uiObject.rowData.moduleid;
	let moduleTypeName = moduleType.find(el => el[cellValue])[cellValue];	
    return moduleTypeName;
}

function checkAllBoxes(uiObject) {
    let attrChecked = uiObject.value == "Select All" ? true : false;
    let entityDataList = [];
    let roleId = $("#typeRole").val();
    let currentPageRecords = grid.pqGrid("option", "dataModel.data");
    $.each(currentPageRecords, function(key, value) {
        let entityData = new Object();
	        $("#" + value["entityroleid"] + "_" + roleId).prop("checked", attrChecked);
	        entityData.roleId = roleId;
	        entityData.entityName = value["entityname"];
	        entityData.moduleId = value["moduleid"];
	        entityData.entityId = value["entityid"];
	        entityData.entityRoleId = value["entityroleid"];
	        entityData.isActive = attrChecked == true ? 1 : 0 ;
	        entityDataList.push(entityData);
        
    });
    saveEntity(entityDataList);
}

function addCheckBox(uiObject) {
    let rowIndxPage = uiObject.rowIndxPage;
    let attrChecked = uiObject.rowData["is_active"] == null ? false : uiObject.rowData["is_active"] == "0" ? false : true;
    let moduleId = uiObject.rowData.moduleId == null ? "" : uiObject.rowData.moduleId;
    var addChkBoxString = '';
    if(attrChecked) {
    	if(moduleId=='7982cc6a-6bd3-11ed-997d-7c8ae1bb24d8'){
    		addChkBoxString = "<div style='width:100%;'><center><input type='checkbox' checked onchange='saveModuleData(this);' name='isActiveCheckbox' id='" + uiObject.rowData["entityId"] + "_" + uiObject.rowData["role_id"]  + "' rowIndxPage='" + rowIndxPage + "' ></center></div>";
    	}else{
    		addChkBoxString = "<div style='width:100%;'><center><input type='checkbox' id='" + uiObject.rowData["entityroleid"] + "_" + uiObject.rowData["role_id"]  + "' checked onchange='saveEntityRole(this)'  rowIndxPage='" + rowIndxPage + "' ></center></div>";
    	}
        
    } else {
    	if(moduleId=='7982cc6a-6bd3-11ed-997d-7c8ae1bb24d8'){
    		addChkBoxString = "<div style='width:100%;'><center><input type='checkbox' onchange='saveModuleData(this);' name='isActiveCheckbox' id='" + uiObject.rowData["entityId"] + "_" + uiObject.rowData["role_id"]  + "'  rowIndxPage='" + rowIndxPage + "' ></center></div>";
    	}else{
    		addChkBoxString = "<div style='width:100%;'><center><input type='checkbox' id='" + uiObject.rowData["entityroleid"] + "_" + uiObject.rowData["role_id"] + "' onchange='saveEntityRole(this)'  rowIndxPage='" + rowIndxPage + "' ></center></div>";
    	}
        
    }
    return addChkBoxString;
}

function saveEntityRole(thisObj) {
    let entityDataList = [];
    let attrChecked = thisObj.checked == true ? 1 : 0;
    let rowData = grid.pqGrid("getRowData", { rowIndx: thisObj.getAttribute("rowIndxPage") });
    let entityRoleId = rowData["role_id"] == null ? null : rowData["entityroleid"];
    let entityData = new Object();
    entityData.roleId = $("#typeRole").val();
    entityData.entityName = rowData["entityname"];
    entityData.moduleId = rowData["moduleid"];
    entityData.entityId = rowData["entityid"];
    entityData.entityRoleId = rowData["entityroleid"];
    entityData.isActive = attrChecked;
    entityDataList.push(entityData);
    saveEntity(entityDataList);
}

function saveEntity(entityDataList) {
    $.ajax({
        type: "POST",
        contentType: "application/json",
        url: contextPath + "/cf/suer",
        data: JSON.stringify(entityDataList),
        success: function(data) {}
    });
}

 function changeType() {
        var type = $("#typeSelect").val();   
        let postData;
        if(type == 0) {
            postData = {gridId:"manageEntityRoleGrid"
            ,"cr_role_id":"str_"+$("#typeRole").val()}
        } else {
            let typeCondition = "str_"+type;       
   
            postData = {gridId:"manageEntityRoleGrid"
                    ,"cr_role_type_id":typeCondition,
                    "cr_role_id":"str_"+$("#typeRole").val()
                    }
        }
        
        let gridNew = $( "#divManageEntityRoleGrid" ).pqGrid();
        gridNew.pqGrid( "option", "dataModel.postData", postData);
        gridNew.pqGrid( "refreshDataAndView" );  
    }

//Add logic to save form data
function saveModuleData (thisObj){
   
  let roleModule = new Object();
  var roleModuleArray = thisObj.id.split("_")
  roleModule.roleModuleId = thisObj.getAttribute("roleModuleId");
  roleModule.moduleId = roleModuleArray[0];
  roleModule.roleId = roleModuleArray[1];
  roleModule.isActive = ($(thisObj).is(":checked") ? 1 : 0);
	$.ajax({
        type : "POST",
        contentType : "application/json",
        url : contextPath+"/cf/srm",
        data : JSON.stringify(roleModule),
        success: function(data) {
        }
    });
}

</script>