<head>
<link rel="stylesheet" href="${(contextPath)!''}/webjars/font-awesome/4.7.0/css/font-awesome.min.css" />
<link rel="stylesheet" href="${(contextPath)!''}/webjars/bootstrap/css/bootstrap.css" />
<link rel="stylesheet" href="${(contextPath)!''}/webjars/1.0/css/starter.style.css" />
<script src="${(contextPath)!''}/webjars/1.0/monaco/require.js"></script>
<script src="${(contextPath)!''}/webjars/1.0/monaco/min/vs/loader.js"></script>
<script src="${(contextPath)!''}/webjars/1.0/rich-autocomplete/jquery.richAutocomplete.js"></script>
<script src="${(contextPath)!''}/webjars/1.0/typeahead/typeahead.js"></script>
<link rel="stylesheet" href="${(contextPath)!''}/webjars/1.0/rich-autocomplete/richAutocomplete.min.css" />

<style>
    .searchblockrevision {
    display: flex;
    width: 100%;
    align-items: center;
}

.searchrevision {
    background:var(--bluebgcolor);
    padding: 10px;
    margin-left: -1px;
    z-index: 9;
    color: #fff;
        cursor: pointer;
}
    </style>


</head>
<div class="pg-revision-history">
	<div class="container" style="padding-top: 40px">
	     
		 <div class="topband">
			<h2 class="title-cls-name float-left history-label">${messageSource.getMessage("jws.history")}: ${(moduleName)!''}</h2> 
			<div class="float-right">
				<span onclick="backToPreviousPage();">
	  				<input id="backBtn" class="btn btn-secondary" name="backBtn" value="${messageSource.getMessage('jws.back')}" type="button">
	  		 	</span>
			</div>
	
			<div class="clearfix"></div>
		</div>
		
		<div id="errorMessage" class="alert errorsms alert-danger alert-dismissable" style="display:none"></div>
		<div class="row">
			
			<input type="hidden" id="moduleType" name="moduleType" value="${(moduleType)!''}">
			<input type="hidden" id="saveUrl" name="saveUrl" value="${(saveUrl)!''}">
			<input type="hidden" id="previousPageUrl" name="previousPageUrl" value="${(previousPageUrl)!''}">
			<input type="hidden" id="moduleType" name="moduleType" value="${(moduleType)!''}">
			<input type="hidden" id="formId" name="formId" value="${(formId)!''}">
			<input type="hidden" id="dateFormat" name="dateFormat" value="${(dateFormat)!''}">
			
			<input type="hidden" id="moduleVersionId" value="" name="targetTypeNameId" class="form-control">
			<input type="hidden" id="selectedDateTime" value="" name="selectedDateTime" class="form-control">
			
	
		</div>
	
	
		<div class="row margin-t-b">
	
				<div class="col-4">
					<h3 id="diffEditorHeader" class="titlename">${messageSource.getMessage("jws.currentContent")}</h3>
				</div>
				<div class="col-8">

                    <div class="searchblockrevision">
					<#if isImport == "true"> 
						<label  style="    width: 118px;">${messageSource.getMessage('jws.importdata')} </label>
					<#else>
						<label for="revisionAutocomplete" style="    width: 118px;" >${messageSource.getMessage("jws.revisionTime")}: </label>
					</#if>
					<div class="col-inner-form full-form-fields" style="display:flex; width:100%;    align-items: center;">
						<#if isImport == "false"> 
							<div class="search-cover pull-left">
								<input type="text" id="revisionAutocomplete" value= "" name="revisionAutocomplete" class="form-control">
								<i class="fa fa-search" aria-hidden="true"></i>
							</div>
						</#if>
						<span onclick="copyJsonData()" class="searchrevision">
                                <i class="fa fa-clipboard" aria-hidden="true"></i>
 	                    </span>
					</div>
                    </div>
				</div>
		</div>
		<div class="row">		
			<div class="col-12" id="diffEditor_0">
				<div class="html_script">
					<div class="grp_lblinp">
						<div id="jsonContainer_0" class="ace-editor-container">
							<div id="jsonEditor_0" class="ace-editor"></div>
						</div>
					</div>
				</div>	
			</div>
		</div>
	
		<div class="col-12">
			<div class="float-right margin-b-25">
				<div class="btn-group dropup custom-grp-btn">
					<div id="savedAction">
		    	        <button type="button" id="saveAndReturn" class="btn btn-primary" onclick="saveUpdatedJson();">${messageSource.getMessage("jws.save")}</button>
		            </div> 
				</div>
				<span onclick="backToPreviousPage();">
					<input id="backBtn" class="btn btn-secondary" name="backBtn" value="${messageSource.getMessage('jws.cancel')}" type="button">
				</span> 
			</div>
		</div>	
	
		
	</div>
</div>
<script>
contextPath = "${(contextPath)!''}";
const entityId = "${(entityId)!''}";
const cmvEntityName = "${(cmvEntityName)!''}";
let updatedJson;
let compareJsonEditor;
let diffEditorArray = new Array();
let autocomplete;
let isImport;
let importJson;
let isNonVersioningModule;
let nonVersioningFetchURL;
$(function(){
	isImport = "${(isImport)!''}";
	isNonVersioningModule = "${(isNonVersioningModule)!''}";
	
	if(isImport == "false" || isNonVersioningModule == "false") {
		getUpdatedData();
	} else {
		nonVersioningFetchURL = "${(nonVersioningFetchURL)!''}";
		getNonVersioningModuleLatestData();
	}
	
	if(isImport == "true") {
		importJson = JSON.parse(localStorage.getItem("importJson"));
		localStorage.removeItem("importJson");
		setJsonEditorContent();
	} else {
	  setJsonEditorContent();
	  getUpdatedData();
        autocomplete = $('#revisionAutocomplete').autocomplete({
        autocompleteId: 'revisionAutocomplete',
        prefetch : true,
        enableClearText : true,
        render: function(item) {
        	var renderStr ='';
        	if(item.emptyMsg == undefined || item.emptyMsg === '')
    		{
        		renderStr = '<p>'+item.updatedDate+'</p>';
    		}
        	else
    		{
        		renderStr = item.emptyMsg;	
    		}	    		
            return renderStr;
        },
        additionalParamaters: {
			 entityId: entityId
			,cmvEntityName: cmvEntityName
			,dateFormat: $("#dateFormat").val()
		},
        extractText: function(item) {
            return item.updatedDate;
        },
        select: function(item) {
            $("#revisionAutocomplete").blur();
			$("#errorMessage").hide();
			$("#selectedDateTime").val(item.updatedDate);
			$("#moduleVersionId").val(item.moduleVersionId);
			$("#diffEditor_0").nextAll("div").remove();
			diffEditorArray = new Array();
			getUpdatedData();
			getJsonData(item.moduleVersionId);
        },
        resetAutocomplete: function(){ 
        	$("#selectedDateTime").val("");
			$("#moduleVersionId").val("");	
        }, 	
    });
	}

});

function setJsonEditorContent(){
	require.config({ paths: { "vs": "../webjars/1.0/monaco/min/vs" }, waitSeconds: 120});
    	require(["vs/editor/editor.main"], function() {
        compareJsonEditor = monaco.editor.createDiffEditor(document.getElementById("jsonEditor_0"), {
	       	originalEditable: true,
	   		readOnly: true,
			language: "text/plain",
		    roundedSelection: false,
			scrollBeyondLastLine: false,
			theme: "vs-dark",
			wordWrap: 'on',
	    });

	    if(isImport == "true") {
	    	processJSONData(importJson);
	    }
    });
	
}

function getNonVersioningModuleLatestData(){
	$.ajax({
		type : "POST",
		url : contextPath + nonVersioningFetchURL,
		async: false,
		data : {
			entityId : entityId,
		},
		success : function(data) {
			updatedJson = data;
		},
	        
	    error : function(xhr, error){
	    	showMessage("Error occurred while fetching data", "error");
	    },
	        	
	});
}

function getUpdatedData(){
	$.ajax({
		type : "POST",
		url : contextPath+"/cf/uj",
		async: false,
		data : {
			cmvEntityName : cmvEntityName,
			entityId : entityId,
		},
		success : function(data) {
			updatedJson = data;
		},
	        
	    error : function(xhr, error){
	    	showMessage("Error occurred while fetching data", "error");
	    },
	        	
	});
}

function getJsonData(selectedElementId){
	$.ajax({
		type : "POST",
		url : contextPath+"/cf/mj",
		async: false,
		data : {
			moduleVersionId : selectedElementId,
		},
		success : function(selectedVersionData) {
			processJSONData(selectedVersionData);
		},
	        
	    error : function(xhr, error){
	    	showMessage("Error occurred while fetching data", "error");
	    },
	        	
	});
}

function processJSONData(selectedVersionData){
	let selectedVersionObj;
	if(isImport == "true") {
		selectedVersionObj = selectedVersionData;
	} else {
		selectedVersionObj = JSON.parse(selectedVersionData);
	}
	let updatedObj = JSON.parse(updatedJson);
	for (let prop in selectedVersionObj) {
		if (Object.prototype.hasOwnProperty.call(selectedVersionObj, prop)) {
			if(prop === "daoQueryDetails"){
				dynarestDiff(selectedVersionObj, updatedObj);
			}else if(prop === "dynamicFormSaveQueries"){
				formBuilderDiff(selectedVersionObj, updatedObj);
			}else if(prop === "dashletBody"){
				dashletDiff(selectedVersionObj, updatedObj);
			}else if(prop === "template"){
				templateDiff(selectedVersionObj, updatedObj);
			}else if(prop === "autocompleteQuery"){
				autocompleteDiff(selectedVersionObj, updatedObj);
			}
		}
	}

	selectedVersionData = JSON.stringify(selectedVersionObj, null, '	');
	updatedJson = JSON.stringify(updatedObj, null, '	');

	let originalModel = monaco.editor.createModel(updatedJson, "json");
	let modifiedModel = monaco.editor.createModel(selectedVersionData, "json");
					
	compareJsonEditor.setModel({
		original: originalModel,
		modified: modifiedModel
	});
}

function templateDiff(selectedVersionObj, updatedObj){
	let saveTemplate = selectedVersionObj["template"];
	let updatedTemplate = updatedObj["template"];
	
	createDiffEditor(saveTemplate, updatedTemplate, "template", "html");
	
	delete selectedVersionObj["template"];
	delete updatedObj["template"];
}

function autocompleteDiff(selectedVersionObj, updatedObj){
	let saveTemplate = selectedVersionObj["autocompleteQuery"];
	let updatedTemplate = updatedObj["autocompleteQuery"];
	
	createDiffEditor(saveTemplate, updatedTemplate, "autocompleteQuery");
	
	delete selectedVersionObj["autocompleteQuery"];
	delete updatedObj["autocompleteQuery"];
}


function dynarestDiff(selectedVersionObj, updatedObj){
	let daoQueryDetailsArray = JSON.parse(selectedVersionObj["daoQueryDetails"]);
	let updatedDaoQueryDetailsArray = JSON.parse(updatedObj["daoQueryDetails"]);
	
	if(daoQueryDetailsArray.length > updatedDaoQueryDetailsArray.length){
		$.each(daoQueryDetailsArray, function(index, value){
			let saveQueryObj = value;
			let updatedSaveQueryObj = "";
			
			if(updatedDaoQueryDetailsArray[index] !== undefined){
				updatedSaveQueryObj = updatedDaoQueryDetailsArray[index];
			}
			
			createDiffEditor(saveQueryObj, updatedSaveQueryObj, "daoQueryDetails");
		});
	}else{
		$.each(updatedDaoQueryDetailsArray, function(index, value){
			let saveQueryObj = "";
			let updatedSaveQueryObj = value;
			
			if(daoQueryDetailsArray[index] !== undefined){
				saveQueryObj = daoQueryDetailsArray[index];
			}
			createDiffEditor(saveQueryObj, updatedSaveQueryObj, "daoQueryDetails");
		});
	}
	
	delete selectedVersionObj["daoQueryDetails"];
	delete updatedObj["daoQueryDetails"];

}


function formBuilderDiff(selectedVersionObj, updatedObj){
	let saveFormHtml = selectedVersionObj["formBody"];
	let updatedFormHtml = updatedObj["formBody"];
	let saveFormSelectQuery = selectedVersionObj["formSelectQuery"];
	let updatedFormSelectQuery = updatedObj["formSelectQuery"];
	let saveQueries = selectedVersionObj["dynamicFormSaveQueries"];
	let updatedSaveQueries = updatedObj["dynamicFormSaveQueries"];
	
	createDiffEditor(saveFormSelectQuery, updatedFormSelectQuery, "formSelectQuery");
	createDiffEditor(saveFormHtml, updatedFormHtml, "formBody", "html");
	
	if(saveQueries.length > updatedSaveQueries.length){
		$.each(saveQueries, function(index, value){
			let saveQueryObj = value.formSaveQuery;
			let updatedSaveQueryObj = "";
			
			if(updatedSaveQueries[index] !== undefined){
				updatedSaveQueryObj = updatedSaveQueries[index].formSaveQuery;
			}
			createDiffEditor(saveQueryObj, updatedSaveQueryObj, "formSaveQuery");
		});
	}else{
		$.each(updatedSaveQueries, function(index, value){
			let saveQueryObj = "";
			let updatedSaveQueryObj = value.formSaveQuery;
			
			if(saveQueries[index] !== undefined){
				saveQueryObj = saveQueries[index].formSaveQuery;
			}
			createDiffEditor(saveQueryObj, updatedSaveQueryObj, "formSaveQuery");
		});
	}
	
	delete selectedVersionObj["formBody"];
	delete updatedObj["formBody"];
	delete selectedVersionObj["formSelectQuery"];
	delete updatedObj["formSelectQuery"];
	delete selectedVersionObj["dynamicFormSaveQueries"];
	delete updatedObj["dynamicFormSaveQueries"];
}


function dashletDiff(selectedVersionObj, updatedObj){
	let htmlContent = selectedVersionObj["dashletBody"];
	let updatedHtmlContent = updatedObj["dashletBody"];
	
	createDiffEditor(htmlContent, updatedHtmlContent, "dashletBody", "html");
		
	delete selectedVersionObj["dashletBody"];
	delete updatedObj["dashletBody"];
	
	let sqlQuery = selectedVersionObj["dashletQuery"];
	let updatedSqlQuery = updatedObj["dashletQuery"];
	
	createDiffEditor(sqlQuery, updatedSqlQuery, "dashletQuery");
		
	delete selectedVersionObj["dashletQuery"];
	delete updatedObj["dashletQuery"];
}

function createDiffEditor(selectedObj, currentObj, fieldName, a_languageName){
	
	require.config({ paths: { "vs": "../webjars/1.0/monaco/min/vs" }});
	require(["vs/editor/editor.main"], function() {
			
			let diffEditorObj = new Object();
			let diffEditor;
			let index = diffEditorArray.length + 1;
			let diffEditorDiv = $('<div class="col-12 margin-t-b" id="diffEditor_'+index+'"><div class="html_script"><div class="grp_lblinp"><div id="jsonContainer_'+index+'" class="ace-editor-container"><div id="jsonEditor_'+index+'" class="ace-editor"></div></div></div></div></div>');
			diffEditorDiv.insertAfter($("#diffEditor_"+(index -1)));

			let languageName = "sql";
			if(a_languageName){
				languageName = a_languageName;
			}
			
			diffEditor = monaco.editor.createDiffEditor(document.getElementById("jsonEditor_"+index), {
				originalEditable: true,
				readOnly: true,
				language: languageName,
				roundedSelection: false,
				scrollBeyondLastLine: false,
				theme: "vs-dark",
				wordWrap: 'on',
			});
			
			
			let originalModel = monaco.editor.createModel(currentObj, languageName);
			let modifiedModel = monaco.editor.createModel(selectedObj, languageName);
							
			diffEditor.setModel({
				original: originalModel,
				modified: modifiedModel
			});
			
			diffEditorObj.fieldName = fieldName;
			diffEditorObj.editor = diffEditor;
			diffEditorArray.push(diffEditorObj);
	});

}



function copyJsonData(){
	if(isImport == "false") {
		let selectedElementId = $("#moduleVersionId").val().trim();
		if(selectedElementId == ""){
			$("#errorMessage").html("Please select revision time");
			$("#errorMessage").show();
			return false;
		}
	 }
	let modifiedContent = compareJsonEditor.getModifiedEditor().getValue();
	compareJsonEditor.getOriginalEditor().setValue(modifiedContent);

	$.each(diffEditorArray, function(index, value){
		let modifiedContent = diffEditorArray[index].editor.getModifiedEditor().getValue();
		diffEditorArray[index].editor.getOriginalEditor().setValue(modifiedContent);
	})
	showMessage("Content copied successfully", "Success");
	
}

function saveUpdatedJson(){
	let content = compareJsonEditor.getOriginalEditor().getValue();
	let contentJson = JSON.parse(content);
	$.each(contentJson, function(key, value){
	  if(typeof value === "string"){
		 contentJson[key] = value.trim();
	  }
	});
	let isParsable = false;
	$.each(diffEditorArray, function(index, diffEditor){
		let fieldName = diffEditor.fieldName;
		if(contentJson[fieldName] !== undefined){
			let previousValue;
			let propertyArray;
			if(isParsable){
				previousValue = JSON.parse(contentJson[fieldName]);
				propertyArray = previousValue.slice();
			}else{
				previousValue = contentJson[fieldName];
				propertyArray = new Array();
				propertyArray.push(previousValue);
			}
			let currentEditorValue = diffEditor.editor.getOriginalEditor().getValue().trim();
			if(currentEditorValue !== ""){
				propertyArray.push(currentEditorValue);
			}
			contentJson[fieldName] = JSON.stringify(propertyArray);
			isParsable = true;
		}else{
			isParsable = false;
			let fieldVal = diffEditor.editor.getOriginalEditor().getValue().trim();
			if(fieldName === "formSaveQuery" || fieldName === "daoQueryDetails"){
				isParsable = true;
				let propertyArray = new Array();
				propertyArray.push(fieldVal);
				contentJson[fieldName] = JSON.stringify(propertyArray);
			}else{
				contentJson[fieldName] = fieldVal;
			}
		}
	});
	let modifiedContent = JSON.stringify(contentJson);
	let moduleType = $("#moduleType").val();
	let formId = $("#formId").val();
	let saveUrl = $("#saveUrl").val().trim();
	if(saveUrl == ""){
		saveUrl = "/cf/suj";
	}
	
	$.ajax({
		type : "POST",
		url : contextPath+saveUrl,
		async: false,
		data : {
			formId : formId,
			moduleType : moduleType,
			modifiedContent : modifiedContent,
		},
		success : function(data) {
			if(isImport == "true") {
				let idList = new Array();
				let importedIdList = localStorage.getItem("importedIdList");
		    	if(importedIdList != null) {
					idList = JSON.parse(importedIdList);
				}
				if(!idList.includes(moduleType.toLowerCase()+entityId)) {
			    		idList.push(moduleType.toLowerCase()+entityId);
				}
				localStorage.setItem("importedIdList", JSON.stringify(idList));
			}
			showMessage("Information saved successfully", "success");
		},
				
		error : function(xhr, error){
			showMessage("Error occurred while saving data", "error");
		},
	        	
	});

}

function backToPreviousPage(){
	let previousPageUrl = $("#previousPageUrl").val();
	location.href = contextPath+previousPageUrl;
}

</script>