<head>
  <script src="${(contextPath)!''}/webjars/1.0/rich-autocomplete/jquery.richAutocomplete.min.js"></script>
  <script src="${(contextPath)!''}/webjars/1.0/typeahead/typeahead.js"></script>
  <script src="${(contextPath)!''}/webjars/jquery-blockui/2.70/jquery.blockUI.js"></script>
  <link rel="stylesheet" href="${(contextPath)!''}/webjars/1.0/rich-autocomplete/richAutocomplete.min.css" />
  <script src="${(contextPath)!''}/webjars/1.0/usermanagement/userManagement.js"></script>
</head>
<form action="${(contextPath)!''}/cf/sat" method="POST" id="userManagement" name="userManagement">
  <div class="container">
    <div class="cm-card">
      <div class="topband cm-card-header">
        <h2 class="title-cls-name float-left">User Management</h2>
        <div class="float-right">
          <div class="addonbtnblock">
            <span class="iconscover spacingclss">
              <button type="button" title="Manage Permissions" id="btnManagePermission" class="managepermisionicon  actionimgbtn lefrightspace"></button>
            </span>
            <span class="iconscover spacingclss">
              <button type="button" id="btnManageRoles" title="Manage Roles" class="rolemangementicon actionimgbtn lefrightspace"></button>
            </span>
            <span class="iconscover spacingclss">
              <button type="button" id="btnManageUser" title="Manage Users" class="manageusericon actionimgbtn lefrightspace" "></button>
						</span>
					</div>
				</div>
				<div class=" clearfix">
          </div>
        </div>
        <div class="col-3 float-left col-inner-form full-form-fields" id="authenticationHeader-0">
          <label for="isAuthenticationEnabled">
            <span class="asteriskmark">*</span>Authentication </label>
          <div class="onoffswitch">
            <input type="checkbox" name="isAuthenticationEnabled" class="onoffswitch-checkbox" id="isAuthenticationEnabled" onchange="showAuthTypeDropDown(this);" />
            <label class="onoffswitch-label" for="isAuthenticationEnabled">
              <span class="onoffswitch-inner"></span>
              <span class="onoffswitch-switch"></span>
            </label>
          </div>
        </div>
        <!-- Modal -->
        <div class="modal fade" id="adminModalDialog" role="dialog" tabindex="-1">
          <div class="modal-dialog">
            <!-- Modal content-->
            <div class="modal-content">
              <div class="modal-header">
                <h5 class="ui-dialog-titlebar">${messageSource.getMessage('jws.addUser')}</h5>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                  <span aria-hidden="true">&times;</span>
                </button>
              </div>
              <div class="modal-body">
                <form role="form">
                  <div class="form-group">
                    <label for="firstName"> ${messageSource.getMessage('jws.firstName')} <span class="asteriskmark">*</span>
                    </label>
                    <input type="text" class="form-control" id="firstName" name="firstName" placeholder="${messageSource.getMessage('jws.firstName')}">
                  </div>
                  <div class="form-group">
                    <label for="lastName"> ${messageSource.getMessage('jws.lastName')} <span class="asteriskmark">*</span>
                    </label>
                    <input type="text" class="form-control" id="lastName" name="lastName" placeholder="${messageSource.getMessage('jws.lastName')}">
                  </div>
                  <div class="form-group">
                    <label for="email">${messageSource.getMessage('jws.email')} <span class="asteriskmark">*</span>
                    </label>
                    <input type="email" class="form-control" id="email" name="email" placeholder="${messageSource.getMessage('jws.email')}">
                  </div>
                </form>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-primary" onclick="saveUserDetails();">Save</button>
                <button type="button" id="modalCloseBtn" onclick="closeModalBtn();" class="btn btn-secondary" data-dismiss="modal">Close</button>
              </div>
            </div>
          </div>
        </div>
        <!-- Modal -->
        <div class="cm-card-body" id="authTypeDiv-1"></div>
        <div class="cm-card-footer">
          <div id="note" class="margin-t-10 clearfix">
            <span class="pull-left">
              <i>Kindly restart your server to get your configuration working.</i>
            </span>
            <div class="btn-icons nomargin-right-cls pull-right">
              <button id="btnAddSection" class="add_section btn btn-primary" type="button" onclick="addAuthType('-1')" style=<#if isAuthenticationEnabled?? && !isAuthenticationEnabled>"display:none" </#if> class="add_section btn btn-primary"> <i class="fa fa-plus"></i> Add </button>
              <input type="submit" value="Save" class="btn btn-primary" />
              <span onclick="backToHomePage();">
                <input id="backBtn" class="btn btn-secondary" name="backBtn" value="Cancel" type="button" />
              </span>
            </div>
          </div>
        </div>
      </div>
    </div>
	<div id="deleteHeader"></div>	
</form>
<script>
document.title = "User Management Configuration";
contextPath 	= "${contextPath}";
let oAuthClientDetails 	= [];
let selectedValues = [];
var onLoad = false;
var isAdminEmailExist = false;
var initialFormData = new Object();

$(document).ready(function () {	
	selectedValues = [];
	onLoad = true;
	$("#isAuthenticationEnabled").attr("checked",${isAuthenticationEnabled?c});
	if(${isAuthenticationEnabled?c}){	
		<#if (activAuthDetails)?? && activAuthDetails?has_content>			
			<#list activAuthDetails as authType>			
				addAuthType(${authType?api.getId()});
			</#list>		
		</#if>		
	}
	
	$(document).on("click", ".rem_section", function(e){	
		
		e.preventDefault();	
		let deleleteElement = $('<div id="deleteConfirmation"></div>');	
		var thisObj = $(this);
		var lastIndex = $(this).attr('id').split("-").pop();
		$("body").append(deleleteElement);	
		$("#deleteConfirmation").html("Are you sure you want to delete the changes ?");	
		$("#deleteConfirmation").dialog({	
			bgiframe		: true,	
			autoOpen		: true, 	
			modal		 	: true,	
			closeOnEscape 	: true,	
			draggable	 	: true,	
			resizable	 	: false,	
			title		 	: "Delete",	
			"class": 'btn btn-primary',
			position: {
				my: "center", at: "center"
			},
			buttons		 	: [{	
					text	: "Delete",
					"class": 'btn btn-primary',
					click	: function(){					
						$("#authTypeDiv-"+lastIndex).remove();
						//var	num = $('.dividesection).length;
						
						$(this).dialog("destroy");	
						$(this).remove();
					var	num = document.querySelectorAll('.dividesection').length;
if(num<1)						$("#isAuthenticationEnabled").prop("checked",false).trigger("change");						
					}	
	           	},{	
					text :"Cancel",
					"class":"btn btn-secondary",
					click: function() { 	
						$(this).dialog("destroy");	
						$(this).remove();	
					},	
				},	
					
	       ],	
	       open		: function( event, ui ) {	 
                  		
		   	   $(".ui-dialog-titlebar")	
		   	    .find("button").removeClass("ui-dialog-titlebar-close").addClass("ui-button ui-corner-all ui-widget ui-button-icon-only ui-dialog-titlebar-close")	
		       .prepend('<span class="ui-button-icon ui-icon ui-icon-closethick"></span>').append('<span class="ui-button-icon-space"></span>');               
		   }	
		
		});
        	
    });    
		
	$('#userManagement').submit(function(e) {       
		
		e.preventDefault();	
		var form 				= 	this;
		var formData 			= 	{};
		var authProperties		=	[];
		let errorFlag 		=	validateFormSubmit();
        let isAuthenticationEnabled = $('#isAuthenticationEnabled').is(':checked');	
        if(JSON.stringify($("#userManagement").serializeArray()) === initialFormData){
				showMessage("No changes detected in Configuration", "warn");
				errorFlag = true; 
		}		
		if(errorFlag == false){			
			let updatedUserManagementDiv = $("#userManagement").serializeArray();
		    
         //Modal for Save
		let saveAuth = $('<div id="saveAuthentication"></div>');	
		var thisObj = $(this);
		var lastIndex = $(this).attr('id').split("-").pop();
		$("body").append(saveAuth);	
        
		$("#saveAuthentication").html("Saving authentication changes require & will shutdown the sever, you'll have to start the server manually. <br> Do you want to save & shutdown the server?");	
		$("#saveAuthentication").dialog({	
			bgiframe		: true,	
			autoOpen		: true, 	
			modal		 	: true,	
			closeOnEscape 	: true,	
			draggable	 	: true,	
			resizable	 	: false,
            width           : 460,	
			title		 	: "Save Authentication Configuration?",	
			"class": 'btn btn-primary',
			position: {
				my: "center", at: "center"
			},
			buttons		 	: [{	
					text	: "Save",
					"class": 'btn btn-primary',
					click	: function(){
					const authTypeSelVal = document.querySelectorAll(`select[name^="authType"]`);
					authTypeSelVal.forEach(authType => {
                       	let authPropsData = new Object();					
						var authTypes 		= 	[];	
						var authTypeId = authType.id;												
						var lastIndex = authTypeId.split("-").pop();
						var authDivId = "authTypeDiv-"+lastIndex
						var authElementVal = $("#" + authType.id).val();
						var authProps = htmlToJson(authDivId, authElementVal);								
						authTypes.push(authProps);
						authPropsData.authTypes = authTypes;						
						authProperties.push(authPropsData);									
               
            });					
			formData.isAuthenticationEnabled = $('#isAuthenticationEnabled').is(':checked'); 
			formData.authProperties	= authProperties;		
			var formJsonData = JSON.stringify(formData);
			//console.log('Form Data : '+formJsonData);                
                       
			$.ajax({
				type : "POST",				
				url : contextPath+"/cf/sat",
				dataType : 'json',
				data : formJsonData,
				contentType: "application/json",				
				success: function(data) {					
					selectedVerificationType = $("#verificationStep").val();
					showMessage("Information saved successfully", "success");
					showMessage("Shutting down Server, please wait...", "warn");				
					shutDownServer();					
				}
			});
			$(this).dialog("destroy");	
			$(this).remove();	
		}	
	    },{	
			text :"Cancel",
			"class":"btn btn-secondary",
			click: function() { 
				showMessage("Save cancelled", "warn");	
				$(this).dialog("destroy");	
				$(this).remove();	
			},	
		},	
					
	    ],	
		open: function( event, ui ) {	    		
		   $(".ui-dialog-titlebar")	
			.find("button").removeClass("ui-dialog-titlebar-close").addClass("ui-button ui-corner-all ui-widget ui-button-icon-only ui-dialog-titlebar-close")	
		   .prepend('<span class="ui-button-icon ui-icon ui-icon-closethick"></span>').append('<span class="ui-button-icon-space"></span>');	
	   },
	   close: function(){
		   showMessage("Save cancelled","warn")
	   }});           
	}});	
	
	$('button[name="testLdapAuth"]').click(function(e){	
		e.preventDefault(); 
		testLdapAuth(this);
	});
	
	$('#adminModalDialog').on(".modal", function() {
        if(isAdminEmailExist == false) {
            $("#isAuthenticationEnabled").prop("checked",false).trigger("change");
        }else{
            $("#isAuthenticationEnabled").prop("checked",true).trigger("change");
        }
        
    });
	
	
	$('#btnManagePermission').on('click', function(){
		let enabled = checkAuthenticatedEnabled();	
         if(enabled){	
            location.href=contextPath+"/cf/mp";	
        }else{	
            showMessage("Not Authorized ", "error");	
        }
	});
	
	$('#btnManageRoles').on('click', function(){
		let enabled = checkAuthenticatedEnabled();	
        if(enabled){	
            location.href=contextPath+"/cf/rl";	
        }else{	
            showMessage("Not Authorized ", "error");	
        }
	});
	
	$('#btnManageUser').on('click', function(){
		let enabled = checkAuthenticatedEnabled();	
         if(enabled){	
            location.href=contextPath+"/cf/ul";	
        }else{	
            showMessage("Not Authorized ", "error");	
        }
	});
	
	$('#adminModalDialog').on("hide.bs.modal", function() {
        if(isAdminEmailExist == false) {
            $("#isAuthenticationEnabled").prop("checked",false).trigger("change");
        }else{
            $("#isAuthenticationEnabled").prop("checked",true).trigger("change");
        }
        
    });
		
	onLoad = false;
	selectedValues = [];
	// End of document ready
	
	if( $("input[name='enableDynamicForm']").length ){
		$("input[name='enableDynamicForm']").prop("checked",$("input[name='enableDynamicForm']").is(":checked")).trigger("change");
	}

    // Always keep the below lines of code at the end of ready function
    let userManagementFields = $("#userManagement").serializeArray();
    initialFormData = JSON.stringify(userManagementFields);	 
});


function changeAuthType(thisObj){	
	
	let authTypeId = thisObj.id;	

	let authTypeVal = $("#"+authTypeId).val();
	if(typeof thisObj == 'undefined' && thisObj == null && authTypeVal == '-1' 
	&& typeof authTypeId == 'undefined'){
		return false;
	}		
	var authTypeParentDivId = $(thisObj).closest('div').closest('.cm-card-body').attr('id');		
	var lastIndex = authTypeParentDivId.split("-").pop();		
	let props = $("#props-"+lastIndex);
	let authType = "authType-";
	let propertyElem = '';
	let parsedProperties = '';
	if(typeof thisObj != 'undefined' && thisObj != null ){
		authType = authTypeId;		
		props.html("");						
	}			
	
	
	if(onLoad == false){
		var defProperties = $('option:selected', thisObj).attr('defProperties');
		if(defProperties!= undefined && defProperties != ""){
	  		parsedProperties = getParsedJSONProperties(defProperties);
		}
		
	} else {
		var properties = $('option:selected', thisObj).attr('properties');
		if(properties!= undefined && properties != ""){
	  		parsedProperties = getParsedJSONProperties(properties);
		}
	}
		
    if(authTypeVal == AuthType.DAO){
        propertyElem += '<div  class="divDatabaseAuth configuration">';
    }   

	if(onLoad == false){
		selectedValues = [];
	}
	if(typeof parsedProperties != 'undefined' && parsedProperties != null ){	
		
		$.each(parsedProperties, function(key,val){			
			if(typeof val != 'undefined' || val != null ){
				var elementId = lastIndex;
				
				if(typeof key != 'undefined'){
					if(typeof key != 'undefined' && key == 'authenticationType'){
						var classType = 'authenticationType';
						if(typeof val != 'undefined'){
							
							var isExist = validateDuplicateAuthType(val, authTypeId);							
							if(isExist){								
								var errorMessage = val.textValue+" already exist."
								showMessage(errorMessage, "error");	
								propertyElem += '<input id="errors" type="hidden" name="errors" value= "'+errorMessage+'">';		
								return false;
							}
														
							propertyElem += addInputFields(val, authTypeId, elementId, classType);					
						}					
					}
				}				
				if(typeof key != 'undefined' && key == 'authenticationDetail'){					
					$.each(val, function(configKeys, configVals){
					if(authTypeVal == AuthType.OAUTH || authTypeVal == AuthType.LDAP){
						propertyElem +='<button class="addSection btn btn-primary" type="button" id="add-section-'+elementId+'" name="add-section" onclick="addSection(this)">Add</button>';
					}
						
						$.each(configVals, function(idx, configurationVal) {
							
							
							if(typeof idx != 'undefined'){	
								
								
								if(typeof configurationVal != 'undefined'){	
									elementId = idx+'-'+lastIndex;
									if(authTypeVal == AuthType.OAUTH || authTypeVal == AuthType.LDAP){								
										propertyElem +='<div class="row addSectionDiv configuration" id="addSection-' +elementId +'"><div class="col-12"><div class="col-inner-form full-form-fields"><table id="headerTable-'+elementId+'"  class="customtblecls"><tr><th colspan="3"><div class="displyflx"><span class="titleclsnm">${messageSource.getMessage('jws.requestparameters')} </span></div></th></tr><tr><td class="bgtd">${messageSource.getMessage('jws.name')}</td><td class="bgtd">${messageSource.getMessage('jws.value')}</td><td class="bgtd" style="width:50px;"><span onclick="addRow(this)" class="plusticon" id="'+elementId+'"><i class="fa fa-plus-circle" aria-hidden="true"></i></span></td></tr>';				
									}
									$.each(configurationVal, function(idxConf, configuration) {
										var classType = 'configurationType';
										if(authTypeVal == AuthType.DAO){								
										 	propertyElem += '<div  class="'+configuration.name+' blockdivcls row col-inner-form full-form-fields">';
										}										
										
										propertyElem = propertyElem + addInputFields(configuration, authTypeId, elementId, classType);				
										if(typeof configuration.additionalDetails != 'undefined' && typeof configuration.additionalDetails.additionalProperties != 'undefined'){							
										$.each(configuration.additionalDetails.additionalProperties, function(additionalPropKeys, additionalPropVals){	
											
												var addClassType = 'additionalProperty';
												propertyElem += '<div class="childElement col-inner-form full-form-fields"  data-parent="'+configuration.name+'">';			
												if(typeof additionalPropVals != 'undefined'){											
													propertyElem = propertyElem + addInputFields(additionalPropVals, authTypeId, elementId, addClassType);
												}
												propertyElem += '</div>';
											
												
										});														
									}	
									if(authTypeVal == AuthType.DAO){
										propertyElem += '</div>';	
									}
								});	
								if(authTypeVal == AuthType.LDAP || authTypeVal == AuthType.OAUTH){	
									propertyElem += '</table></div></div></div>';
								}
								}
								
															
								 
							}
						});						
					});						
				}												
			}		
		});
	}	
        
	$("#props-"+lastIndex).append(propertyElem);
	
	if( $("input[name='enableDynamicForm']").length ){
		$("input[name='enableDynamicForm']").prop("checked",$("input[name='enableDynamicForm']").is(":checked")).trigger("change");
	}
	if(!jQuery.isEmptyObject(selectedValues)){		
		$.each(selectedValues, function(key, val) {			
			if (typeof key != "undefined" && typeof val != "undefined") {
				if (typeof selectedValues[key].selval != "undefined") {					
				$("#"+selectedValues[key].id).val(selectedValues[key].selval).
				trigger("change");
				}			
			}		
		});
	}
}


function showAuthTypeDropDown(thisObj) {
	if ($(thisObj).is(":checked")) {
		var showAuthDropDown = false;
		var emailExist = checkAdminEmailExistInPm();
		if (emailExist == undefined || emailExist === '') {
			$("#adminModalDialog").modal({
				keyboard: false
			});
		} else {
			showAuthDropDown = true;
		}
		if (showAuthDropDown) {
			addAuthType('-1');
			$("#btnAddSection").show();
		}

	}
	else {
		$('div[class*=cm-card-body]').each(function(seq, element) {
			if (element.id != 'authTypeDiv-1') {
				$(this).remove();
			}
		});
		$("#btnAddSection").hide();
	}
}



function addAuthType(selectedElement){	
	const lastElement = Array.from(document.querySelectorAll('.cm-card-body')).pop();	
	var lastIndex = lastElement.id.split("-").pop();	
	var ele_len = parseInt(lastIndex) + 1;
	var dropdown = '<div class="col-12 cm-card-body dividesection" id="authTypeDiv-'+ele_len+'"><div for="authType-'+ele_len+'"><div class="dropvalueblock"><span class="asteriskmark">*</span> <strong>Authentication Type </strong><select class="form-control" id="authType-'+ele_len+'" name="authType" onchange="changeAuthType(this);" selected="'+selectedElement+'"><option value="-1">--Select--</option> ';	
	<#if (authenticationTypes)?? && authenticationTypes?has_content>
		<#list authenticationTypes as authType>			
		var jsonProperties ='${authType?api.getAuthenticationProperties()}';
		var defJsonProperties ='${authType?api.getDefaultAuthProperties()}';
		dropdown+='<option defProperties="'+encodeURIComponent(JSON.stringify(defJsonProperties))+'" properties="'+encodeURIComponent(JSON.stringify(jsonProperties))+'" value="'+${authType?api.getId()}+'">${authType?api.getAuthenticationName()}</option>';	
		</#list>
	</#if>		
	dropdown += '</div></select><button class="removebtncls btn btn-danger rem_section" id="delAuthRow-'+ele_len+'"><i class="fa fa-trash-o" aria-hidden="true"></i></button></div><div class="row col-inner-form full-form-fields configurations"><div id="props-'+ele_len+'" class="" style="width:100%;"></div></div></div>';
	var $target = $(".cm-card-body:last");
	$(dropdown).insertAfter($target);
	if(selectedElement != "-1"){
		$("#authType-"+ele_len).val(selectedElement).trigger("change");
	}
}

function addInputFields(propVal, authTypeId, elementId, classType){ 
	let propertyElem = '';	
	if(typeof propVal != 'undefined'){
		let authTypeVal = $("#"+authTypeId).val();
		var lastIndex = authTypeId.split("-").pop();		
		elementId  = propVal.name+"-"+elementId;
		var elementClass = classType;
		if(propVal.type == "boolean"){			
			elementClass += " onoffswitch-checkbox";
			var method = '';	
			if(propVal.name != 'enableCaptcha'){			
				method = 'changeChildElementStatus(this);';				
			}			
			
			if(propVal.value == "true"){						
				propertyElem = '<div class=" col-inner-form full-form-fields "><label for="' +propVal.name+'">'+propVal.textValue+'</label><div class="onoffswitch"><input type="checkbox" id="' +elementId+'" checked name="' +propVal.name+'" class="' +elementClass +'" onchange="' +method+'" textValue= "' +propVal.textValue+'" require= "' +propVal.required+'"><label class="onoffswitch-label" for="' +elementId+'"><span class="onoffswitch-inner"></span><span class="onoffswitch-switch"></span></label></div></div>';
				
			}else{
				propertyElem = '<div class="marginright col-inner-form full-form-fields"><label for="' +propVal.name+'">'+propVal.textValue+'</label><div class="onoffswitch"><input type="checkbox" id="' +elementId+'" name="' +propVal.name+'" require= "' +propVal.required+'" class="' +elementClass +'" textValue= "' +propVal.textValue+'" onchange="' +method+'"><label class="onoffswitch-label" for="' +elementId+'"><span class="onoffswitch-inner"></span><span class="onoffswitch-switch"></span></label></div></div>';				
			}
			
		}
		if(propVal.type == "select" ){
			elementClass += " form-control";
			var selectedValue = propVal.defaultValue;
			if(onLoad){
				selectedValue = propVal.value;
			}
			var strMethod = 'change-'+propVal.name;
			var method = $.camelCase(strMethod);			
			var dropdown = '<select class="' +elementClass +'" id="'+elementId+'" name="'+propVal.name+'" onchange="'+method+'(this);" selected="'+selectedValue+'" require= "' +propVal.required+'" textValue= "' +propVal.textValue+'" dropDownData= "' +JSON.stringify(propVal.dropDownData)+'" defaultValue= "' +propVal.defaultValue+'"><option value="-1">--Select--</option>';
			$.each(propVal.dropDownData, function(index, data) {	
				dropdown+='<option value="'+data.value+'">'+data.name+'</option>';
			});
			dropdown+='</select>'; 
			var label = '<label for="'+propVal.name+'">';
			if(propVal.required == true){
				label += '<span class="asteriskmark">*</span>';
			}
			label += propVal.textValue;
			var br = '<br>';
			if(authTypeVal != AuthType.DAO){
				propertyElem += '<tr><td class="bgtd" style="width:250px;">'+label+'</td><td class="bgtd">'+dropdown+'</td><td class="bgtd"></td></tr>'
			} else {	
				
				propertyElem += label+dropdown+'</label>';
			}
						
			if(typeof selectedValue != 'undefined' && selectedValue != "-1"){						
				selectedValues.push({id: elementId, name: propVal.name, selval: selectedValue});				
			}					
		}		
		if(propVal.type == "text" || propVal.type == "password"){		
			var propertyValue = propVal.value;
			var type = propVal.type;
			var strName = propVal.name;	
			elementClass += " form-control";		
			if(authTypeVal == AuthType.DAO){				
				if((typeof propertyValue == 'undefined' || propertyValue == "") && propVal.name == 'regexPattern'){
					propertyValue = "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@#$%^&+=])[A-Za-z\\d@#$%^&+=]{6,20}$";					
				}
				propertyElem += ' <div  style="margin-left:10px;" class="blockdivcls row col-inner-form full-form-fields"><label for="' +elementId+'" style="white-space:nowrap"><span class="asteriskmark">*</span>' +propVal.textValue+'<input class="' +elementClass +'" type="' +type+'" id="' +elementId +'" name="' +strName+'" value= "' +propertyValue+'" textValue= "' +propVal.textValue+'" require= "' +propVal.required+'"></label></div>';
			} else if(authTypeVal != AuthType.DAO){			
				if(propVal.condition == "row-added"){
					elementId = elementId.replace(/[_\W]+/g, "-");
					if(propVal.required == true){
					propertyElem += '<tr><td class="bgtd" style="width:250px;"><span class="asteriskmark">*</span><input class="key" type="text" value="' + propVal.textValue + '" textValue="' + propVal.textValue + '"  require="true" id="key-'+elementId+'"></td><td class="bgtd"><input class="' +elementClass +'" type="' +type+'" id="' +elementId +'" name="' +strName+'" value= "' +propertyValue+'" textValue= "' +propVal.textValue+'" require= "' +propVal.required+'" condition="row-added"></td><td class="bgtd"><span id="btn_' + elementId + '" onclick="deleteRow(this)" class="cusrorhandcls"><i class="fa fa-minus-circle" aria-hidden="true"></i></span></td></tr>';
					}else {
						propertyElem += '<tr><td class="bgtd"><input class="key" type="text" value="' + propVal.textValue + '" textValue="' + propVal.textValue + '"  require="false" id="key-'+elementId+'"></td><td class="bgtd"><input class="' +elementClass +'" type="' +type+'" id="value-' +elementId +'" name="' +strName+'" value= "' +propertyValue+'" textValue= "key-' +elementId +'" require= "' +propVal.required+'" condition="row-added"></td><td class="bgtd"><span id="btn_' + elementId + '" onclick="deleteRow(this)" class="cusrorhandcls"><i class="fa fa-minus-circle" aria-hidden="true"></i></span></td></tr>';
					}
				} else {
					if(propVal.required == true){
						propertyElem += '<tr><td class="bgtd" style="width:250px;"><span class="asteriskmark">*</span>'+propVal.textValue+'</td><td class="bgtd"><input class="' +elementClass +'" type="' +type+'" id="' +elementId +'" name="' +strName+'" textValue= "' +propVal.textValue+'" value= "' +propertyValue+'" require= "' +propVal.required+'"></td><td class="bgtd"></td></tr>';
					}else {
						propertyElem += '<tr><td class="bgtd">'+propVal.textValue+'</td><td class="bgtd"><input class="' +elementClass +'" type="' +type+'" textValue= "' +propVal.textValue+'" id="' +elementId +'" name="' +strName+'" value= "' +propertyValue+'" require= "' +propVal.required+'"></td><td class="bgtd"></td></tr>';
					}
				}
				
			}
		}		
		if(propVal.type == "button"){
			elementClass += " form-control removbtn "+propVal.name;
			var strMethod = propVal.name;;
			var clickMethod = $.camelCase(strMethod);	 
			var claszz = "blockdivcls removdiv "+propVal.name;
            propertyElem +='<div class="' +claszz +'"><input type="button" id="' +elementId +'" class="' +elementClass +'" textValue= "' +propVal.textValue+'" onclick="'+clickMethod+'(this);" textValue= "' +propVal.textValue+'" require= "' +propVal.required+'" nameAttribute="' +propVal.name+'" value="' +propVal.textValue+'" /></div>'    	
		}
		if(propVal.type == "hidden"){
			elementClass += " form-control";			
			propertyElem += '<input class="' +elementClass +'" type="hidden" id="'+elementId+'" name="' +propVal.name+'" value= "' +propVal.value+'" textValue= "' +propVal.textValue+'" require= "' +propVal.required+'">';			
		}
		if(propVal.type == "formAutocomplete"){	
			elementClass += " form-control";		
			propertyElem += '<div id="dynamicFormDiv"><label for="dynamicFormName" style="white-space:nowrap"><span class="asteriskmark">*</span>Form Name</label><div class="search-cover"><input type="text" id="dynamicFormName" class="' +elementClass +'" textValue= "' +propVal.textValue+'" require= "' +propVal.required+'" name="' +propVal.name+'"><i class="fa fa-search" aria-hidden="true"></i></div><input type="hidden" id="formName" value= "" name="formName" textValue= "' +propVal.textValue+'" require= "' +propVal.required+'"><input type="hidden" id="formId" value= "" name="formId" textValue= "' +propVal.textValue+'" require= "' +propVal.required+'"></div>';
			if(propVal.formId !== undefined){
				$("#formId").val(data.formId);
				$("#formName").val(data.formName);
				$("#dynamicFormName").val(data.formName);
				initFormAutocomplete(propVal);
			}
		}
		if(propVal.type == "templateAutocomplete"){	
			elementClass += " form-control";		
			propertyElem += '<div id="templateDiv"><label for="templateNameAC" style="white-space:nowrap"><span class="asteriskmark">*</span>Template Name</label><div class="search-cover"><input type="text" id="templateNameAC" class="' +elementClass +'" textValue= "' +propVal.textValue+'" require= "' +propVal.required+'" name="' +propVal.name+'"><i class="fa fa-search" aria-hidden="true"></i></div><input type="hidden" id="templateName" value= "" name="templateName" textValue= "' +propVal.textValue+'" require= "' +propVal.required+'"><input type="hidden" id="templateId" value= "" name="templateId" textValue= "' +propVal.textValue+'" require= "' +propVal.required+'"></div>';
			var inputId = "user-profile-template-details";
			$.ajax({
				type : "GET",
				url : contextPath+"/cf/gif",
				data : { 
					inputId:inputId,
				},
				success: function(templateData) {
					if(templateData.templateId !== undefined){
						$("#templateId").val(templateData.templateId);
						$("#templateName").val(templateData.templateName);
						$("#templateNameAC").val(templateData.templateName);
					}
					initTemplateAutocomplete(templateData);
				}
			});
			let isChecked = $('#enableDynamicForm').is(':checked');
			if(isChecked){			
				$("#dynamicFormDiv").closest('div.row').find('.childElement').show();
				$("#dynamicFormDiv").show();
				$("#templateDiv").show();
			}else{					
				$("#dynamicFormDiv").hide();
				$("#templateDiv").hide();
			}
		}
	}	
	return propertyElem;
}
 
 
function addSection(thisObj){
	var lastIndex = thisObj.id.split("-").pop();
	var authTypeId = "authType-"+lastIndex;
	const [first, ...rest] = thisObj.id.split('-');
	var	num = $('#props-'+lastIndex).children('.addSectionDiv').length;	
	num = num + 1;
	var elementId = num+'-'+lastIndex;
	var propertyElem  = '<div class="row addSectionDiv configuration" id="addSection-' +elementId +'"><div class="col-12"><div class="col-inner-form full-form-fields"><table id="headerTable-'+elementId+'"  class="customtblecls"><tr><th colspan="3"><div class="displyflx"><span class="titleclsnm">${messageSource.getMessage('jws.requestparameters')} </span></div></th></tr><tr><td class="bgtd" style="width:250px;">${messageSource.getMessage('jws.name')}</td><td class="bgtd">${messageSource.getMessage('jws.value')}</td><td class="bgtd" style="width:50px;"><span onclick="addRow(this)" class="plusticon" id="'+elementId+'"><i class="fa fa-plus-circle" aria-hidden="true"></i></span></td></tr>';	 
	var properties = $("#"+authTypeId).find('option:selected').attr('defProperties');
	let addConfigurations = [];	
	let addNewConfigurations = [];	
	if(properties!= undefined && properties != ""){		
	  parsedProperties = getParsedJSONProperties(properties);
	}
	
	if(typeof parsedProperties != 'undefined' && parsedProperties != null ){		
		$.each(parsedProperties, function(key,val){	
			
			if(typeof val != 'undefined' || val != null ){					
				if(typeof key != 'undefined' && key == 'authenticationType'){	
					var classType = 'authenticationType';
					if(typeof val != 'undefined'){
						var isExist = validateDuplicateAuthType(val, authTypeId);							
						if(isExist){
							var errorMessage = val.textValue+" already exist."
							showMessage(errorMessage, "error");	
							propertyElem += '<input id="errors" type="hidden" name="errors" value= "'+errorMessage+'">';						
							return false;
						}
						
						if(val.type=='text' || val.type=='password'){
							val.value = ''
						}
						//var ldapElementId = val.name+'-'+elementId;
						propertyElem += addInputFields(val, authTypeId, elementId, classType);					
					}					
				}					
				if(typeof key != 'undefined' && key == 'authenticationDetail'){	
					
					$.each(val, function(configKeys, configVals){
						var classType = 'configurationType';
						if(typeof configKeys != 'undefined' && typeof configVals != 'undefined'){
							
							$.each(configVals, function(idx, configurationVal) {
								if(typeof configurationVal != 'undefined' && idx==0){
									$.each(configurationVal, function(idx, configuration) {							
										propertyElem += '<div  class="'+configuration.name+'selectdivc ">';
										
										//elementId = configKeys+'-'+lastIndex;
										propertyElem = propertyElem + addInputFields(configuration, authTypeId, elementId, classType);						
										if(typeof configuration.additionalDetails != 'undefined' && typeof configuration.additionalDetails.additionalProperties != 'undefined'){				$.each(configuration.additionalDetails.additionalProperties, function(additionalPropKeys, additionalPropVals){	
												classType = 'additionalProperty';
												$.each(additionalPropVals, function(additionalPropKey, additionalPropVal){	
													//elementId = additionalPropKey+'-'+lastIndex;
													propertyElem += '<div class="childElement col-inner-form full-form-fields" data-parent="'+configuration.name+'" >';				
													if(typeof additionalPropVal != 'undefined'){					
														propertyElem = propertyElem + addInputFields(additionalPropVal, authTypeId, elementId, classType);
													}
													propertyElem += '</div>';
												});											
											});														
										}										
										propertyElem += '</div>';										
									});									
								}								
								
								return false;
							});
						}												
					});						
				}												
			}		
		});
	}
	propertyElem += '</table></div></div></div>';
	$('#props-'+lastIndex).append(propertyElem);

}

</script>